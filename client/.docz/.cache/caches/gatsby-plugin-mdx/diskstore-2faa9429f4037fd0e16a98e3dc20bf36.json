{"expireTime":9007200840493899000,"key":"gatsby-plugin-mdx-entire-payload-c81054f1c0a38183066958b20705e090-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"C:/Users/heath/Projects/rehouser/client/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":118,"offset":119},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":121},"end":{"line":5,"column":29,"offset":149},"indent":[]}},{"type":"import","value":"import { Playground, Props } from 'docz'\nimport FormCreator from \"./FormCreator\"\nimport InputFieldType from './InputFieldType'\nimport INSULATION_FORM_CONF from './InsulationStatementForm/fieldsConf'","position":{"start":{"line":8,"column":1,"offset":153},"end":{"line":11,"column":72,"offset":354},"indent":[1,1,1]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Forms","position":{"start":{"line":13,"column":3,"offset":360},"end":{"line":13,"column":8,"offset":365},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":358},"end":{"line":13,"column":8,"offset":365},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"ToDo: being able to copy paste configs would be super awesome","position":{"start":{"line":15,"column":3,"offset":371},"end":{"line":15,"column":64,"offset":432},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":371},"end":{"line":15,"column":64,"offset":432},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":369},"end":{"line":15,"column":64,"offset":432},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":369},"end":{"line":15,"column":64,"offset":432},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Form Creator","position":{"start":{"line":17,"column":4,"offset":439},"end":{"line":17,"column":16,"offset":451},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":436},"end":{"line":17,"column":16,"offset":451},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This is the base component, all it needs is a ","position":{"start":{"line":19,"column":1,"offset":455},"end":{"line":19,"column":47,"offset":501},"indent":[]}},{"type":"inlineCode","value":"config","position":{"start":{"line":19,"column":47,"offset":501},"end":{"line":19,"column":55,"offset":509},"indent":[]}},{"type":"text","value":" of field types and an ","position":{"start":{"line":19,"column":55,"offset":509},"end":{"line":19,"column":78,"offset":532},"indent":[]}},{"type":"inlineCode","value":"onSubmit","position":{"start":{"line":19,"column":78,"offset":532},"end":{"line":19,"column":88,"offset":542},"indent":[]}},{"type":"text","value":" to recieve the submitted form data which will be formmatted =)\nToDo","position":{"start":{"line":19,"column":88,"offset":542},"end":{"line":20,"column":5,"offset":611},"indent":[1]}}],"position":{"start":{"line":19,"column":1,"offset":455},"end":{"line":20,"column":5,"offset":611},"indent":[1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"consider onSave and onCreate","position":{"start":{"line":22,"column":3,"offset":617},"end":{"line":22,"column":31,"offset":645},"indent":[]}}],"position":{"start":{"line":22,"column":3,"offset":617},"end":{"line":22,"column":31,"offset":645},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":615},"end":{"line":22,"column":31,"offset":645},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"or let the outer wrapper handle onSubmit?","position":{"start":{"line":23,"column":3,"offset":649},"end":{"line":23,"column":44,"offset":690},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":649},"end":{"line":23,"column":44,"offset":690},"indent":[]}}],"position":{"start":{"line":23,"column":1,"offset":647},"end":{"line":23,"column":44,"offset":690},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"the second. It should just submit the data to its container. its container can work out if its create or update","position":{"start":{"line":24,"column":3,"offset":694},"end":{"line":24,"column":114,"offset":805},"indent":[]}}],"position":{"start":{"line":24,"column":3,"offset":694},"end":{"line":24,"column":114,"offset":805},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":692},"end":{"line":24,"column":114,"offset":805},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Side note. We are creatting these containers like ","position":{"start":{"line":25,"column":3,"offset":809},"end":{"line":25,"column":53,"offset":859},"indent":[]}},{"type":"inlineCode","value":"Components/Forms/InsulationForm","position":{"start":{"line":25,"column":53,"offset":859},"end":{"line":25,"column":86,"offset":892},"indent":[]}},{"type":"text","value":" is a wrapper to handle all this","position":{"start":{"line":25,"column":86,"offset":892},"end":{"line":25,"column":118,"offset":924},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":809},"end":{"line":25,"column":118,"offset":924},"indent":[]}}],"position":{"start":{"line":25,"column":1,"offset":807},"end":{"line":25,"column":118,"offset":924},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":615},"end":{"line":25,"column":118,"offset":924},"indent":[1,1,1]}},{"type":"jsx","value":"<Props of={FormCreator} />\nas stated above the most important prop is the config which is an array of InputFieldType config objects, \nthey all take unique properties for there type\n- config is an array of objects, not react class components, wasnt cleat in PropTypes to pass in an array of instancOf for config objects\n- maybe I dont and just manually code the config props for FormCreator... Seems gross and an anti pattern","position":{"start":{"line":27,"column":1,"offset":928},"end":{"line":31,"column":106,"offset":1356},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"InputFieldType props","position":{"start":{"line":33,"column":5,"offset":1364},"end":{"line":33,"column":25,"offset":1384},"indent":[]}}],"position":{"start":{"line":33,"column":1,"offset":1360},"end":{"line":33,"column":25,"offset":1384},"indent":[]}},{"type":"jsx","value":"<Props of={InputFieldType} />","position":{"start":{"line":35,"column":1,"offset":1388},"end":{"line":35,"column":30,"offset":1417},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Basic usage","position":{"start":{"line":37,"column":4,"offset":1424},"end":{"line":37,"column":15,"offset":1435},"indent":[]}}],"position":{"start":{"line":37,"column":1,"offset":1421},"end":{"line":37,"column":15,"offset":1435},"indent":[]}},{"type":"jsx","value":"<Playground>","position":{"start":{"line":39,"column":1,"offset":1439},"end":{"line":39,"column":13,"offset":1451},"indent":[]}},{"type":"jsx","value":"<FormCreator isNew={true} config={[{\n\"type\": \"CheckReason\",\n\"key\": \"meetsMinCeilingReq\",\n\"fieldProps\": {\n\"name\": \"meetsMinCeilingReq\",\n\"label\": \"Does insulation meet the minimum requirements for ceiling insulation?\",\n\"defaultValue\": \"Test\"\n},\n\"refConf\": {\n\"required\": {\n\"value\": true,\n\"message\": \"You must select an option for mmeeting minnimum ceiling requirements\"\n}\n},\n\"inners\": [\n{\n\"type\": \"String\",\n\"key\": \"meetsMinCeilingReqReason\",\n\"fieldProps\": {\n\"name\": \"meetsMinCeilingReqReason\",\n\"label\": \"Explain what exception applies and which room(s) it applies to.\",\n\"placeholder\": \"(e.g. professional installer cannot access skillion ceiling above bedroom 2)\",\n\"multiline\": true,\n\"rowsMax\": 6,\n\"margin\": \"dense\",\n\"style\": {\n\"marginTop\": 0\n}\n},\n\"refConf\": {\n\"required\": {\n\"value\": true,\n\"message\": \"You must have a reson when selecting no\"\n}\n}\n}\n]\n}]} onSubmit={(data) => alert(JSON.stringify(data, 0, null))} />","position":{"start":{"line":41,"column":1,"offset":1455},"end":{"line":78,"column":65,"offset":2404},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"jsx","value":"</Playground>","position":{"start":{"line":80,"column":1,"offset":2408},"end":{"line":80,"column":14,"offset":2421},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"field Types","position":{"start":{"line":82,"column":4,"offset":2428},"end":{"line":82,"column":15,"offset":2439},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2425},"end":{"line":82,"column":15,"offset":2439},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Header","position":{"start":{"line":84,"column":3,"offset":2445},"end":{"line":84,"column":9,"offset":2451},"indent":[]}}],"position":{"start":{"line":84,"column":3,"offset":2445},"end":{"line":84,"column":9,"offset":2451},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2443},"end":{"line":84,"column":9,"offset":2451},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Subheader","position":{"start":{"line":85,"column":3,"offset":2455},"end":{"line":85,"column":12,"offset":2464},"indent":[]}}],"position":{"start":{"line":85,"column":3,"offset":2455},"end":{"line":85,"column":12,"offset":2464},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":2453},"end":{"line":85,"column":12,"offset":2464},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"String","position":{"start":{"line":86,"column":3,"offset":2468},"end":{"line":86,"column":9,"offset":2474},"indent":[]}}],"position":{"start":{"line":86,"column":3,"offset":2468},"end":{"line":86,"column":9,"offset":2474},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2466},"end":{"line":86,"column":9,"offset":2474},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"CheckReason","position":{"start":{"line":87,"column":3,"offset":2478},"end":{"line":87,"column":14,"offset":2489},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":2478},"end":{"line":87,"column":14,"offset":2489},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":2476},"end":{"line":87,"column":14,"offset":2489},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"CheckboxText","position":{"start":{"line":88,"column":3,"offset":2493},"end":{"line":88,"column":15,"offset":2505},"indent":[]}}],"position":{"start":{"line":88,"column":3,"offset":2493},"end":{"line":88,"column":15,"offset":2505},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2491},"end":{"line":88,"column":15,"offset":2505},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"SelectOneWithText","position":{"start":{"line":89,"column":3,"offset":2509},"end":{"line":89,"column":20,"offset":2526},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":2509},"end":{"line":89,"column":20,"offset":2526},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":2507},"end":{"line":89,"column":20,"offset":2526},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"CheckMultipleWithText","position":{"start":{"line":90,"column":3,"offset":2530},"end":{"line":90,"column":24,"offset":2551},"indent":[]}}],"position":{"start":{"line":90,"column":3,"offset":2530},"end":{"line":90,"column":24,"offset":2551},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2528},"end":{"line":90,"column":24,"offset":2551},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Boolean","position":{"start":{"line":91,"column":3,"offset":2555},"end":{"line":91,"column":10,"offset":2562},"indent":[]}}],"position":{"start":{"line":91,"column":3,"offset":2555},"end":{"line":91,"column":10,"offset":2562},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":2553},"end":{"line":91,"column":10,"offset":2562},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Int","position":{"start":{"line":92,"column":3,"offset":2566},"end":{"line":92,"column":6,"offset":2569},"indent":[]}}],"position":{"start":{"line":92,"column":3,"offset":2566},"end":{"line":92,"column":6,"offset":2569},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":2564},"end":{"line":92,"column":6,"offset":2569},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Float","position":{"start":{"line":93,"column":3,"offset":2573},"end":{"line":93,"column":8,"offset":2578},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":2573},"end":{"line":93,"column":8,"offset":2578},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":2571},"end":{"line":93,"column":8,"offset":2578},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"DateTime","position":{"start":{"line":94,"column":3,"offset":2582},"end":{"line":94,"column":11,"offset":2590},"indent":[]}}],"position":{"start":{"line":94,"column":3,"offset":2582},"end":{"line":94,"column":11,"offset":2590},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2580},"end":{"line":94,"column":11,"offset":2590},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"AcceptTerms","position":{"start":{"line":95,"column":3,"offset":2594},"end":{"line":95,"column":14,"offset":2605},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":2594},"end":{"line":95,"column":14,"offset":2605},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":2592},"end":{"line":95,"column":14,"offset":2605},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2443},"end":{"line":95,"column":14,"offset":2605},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Header","position":{"start":{"line":97,"column":4,"offset":2612},"end":{"line":97,"column":10,"offset":2618},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":2609},"end":{"line":97,"column":10,"offset":2618},"indent":[]}},{"type":"jsx","value":"<Playground >\n  <InputFieldType config={{\n    type: 'Header',\n    fieldProps: {\n      label: 'INSULATION STATEMENT FORM',\n    },\n  }} />\n</Playground>","position":{"start":{"line":99,"column":1,"offset":2622},"end":{"line":106,"column":14,"offset":2779},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Subheader","position":{"start":{"line":108,"column":4,"offset":2786},"end":{"line":108,"column":13,"offset":2795},"indent":[]}}],"position":{"start":{"line":108,"column":1,"offset":2783},"end":{"line":108,"column":13,"offset":2795},"indent":[]}},{"type":"jsx","value":"<Playground >\n  <InputFieldType config={{\n    type: 'Subheader',\n    fieldProps: {\n      label:\n        'Landlords must complete the insulation statement for a property before it can go on the market',\n    },\n  }} />\n</Playground>","position":{"start":{"line":110,"column":1,"offset":2799},"end":{"line":118,"column":14,"offset":3037},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"CheckReason","position":{"start":{"line":120,"column":4,"offset":3044},"end":{"line":120,"column":15,"offset":3055},"indent":[]}}],"position":{"start":{"line":120,"column":1,"offset":3041},"end":{"line":120,"column":15,"offset":3055},"indent":[]}},{"type":"jsx","value":"<Playground >\n  <InputFieldType config={{\n  \"type\": \"CheckReason\",\n  \"key\": \"meetsMinCeilingReq\",\n  \"fieldProps\": {\n    \"name\": \"meetsMinCeilingReq\",\n    \"label\": \"Does insulation meet the minimum requirements for ceiling insulation?\",\n    \"defaultValue\": \"Test\"\n  },\n  \"refConf\": {\n    \"required\": {\n      \"value\": true,\n      \"message\": \"You must select an option for mmeeting minnimum ceiling requirements\"\n    }\n  },\n  \"inners\": [\n    {\n      \"type\": \"String\",\n      \"key\": \"meetsMinCeilingReqReason\",\n      \"fieldProps\": {\n        \"name\": \"meetsMinCeilingReqReason\",\n        \"label\": \"Explain what exception applies and which room(s) it applies to.\",\n        \"placeholder\": \"(e.g. professional installer cannot access skillion ceiling above bedroom 2)\",\n        \"multiline\": true,\n        \"rowsMax\": 6,\n        \"margin\": \"dense\",\n        \"style\": {\n          \"marginTop\": 0\n        }\n      },\n      \"refConf\": {\n        \"required\": {\n          \"value\": true,\n          \"message\": \"You must have a reson when selecting no\"\n        }\n      }\n    }\n  ]\n}} />\n</Playground>","position":{"start":{"line":122,"column":1,"offset":3059},"end":{"line":161,"column":14,"offset":4172},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"SelectOneWithText","position":{"start":{"line":163,"column":4,"offset":4179},"end":{"line":163,"column":21,"offset":4196},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":4176},"end":{"line":163,"column":21,"offset":4196},"indent":[]}},{"type":"jsx","value":"<Playground >\n  <InputFieldType config={{\n    type: 'SelectOneWithText',\n    key: 'ceilingCoverage',\n    fieldProps: {\n      name: 'ceilingCoverage',\n      label: 'Location/Coverage?',\n      options: [\n        {\n          name: 'COMPLETE',\n          label: 'Complete (all rooms)',\n        },\n        {\n          name: 'PARTIAL',\n          label: 'Partial (specify areas not insulated)',\n        },\n        {\n          name: 'NONE',\n          label: 'None',\n        },\n        {\n          name: 'UNKNOWN',\n          label:\n            'I don’t know as ceiling space is not accessible in the following areas (specify)',\n        },\n      ],\n    },\n    refConf: {\n      required: {\n        value: true,\n        message: 'Ceiling Coverage must be specified',\n      },\n    },\n    inners: [\n      {\n        type: 'String',\n        key: 'ceilingCoverageReason',\n        showOn: {\n          key: 'ceilingCoverage',\n          values: ['PARTIAL', 'UNKNOWN'],\n        },\n        fieldProps: {\n          name: 'ceilingCoverageReason',\n          label: '(specify):',\n          placeholder: '',\n          multiline: true,\n          rowsMax: 6,\n          margin: 'dense',\n          style: {\n            marginTop: 0,\n          },\n        },\n        refConf: {\n          required: {\n            value: true,\n            message:\n              'Please provide details for your ceiling coverage location choice',\n          },\n        },\n      },\n    ],\n  }} />\n</Playground>","position":{"start":{"line":165,"column":1,"offset":4200},"end":{"line":227,"column":14,"offset":5717},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"CheckMultipleWithText","position":{"start":{"line":229,"column":4,"offset":5724},"end":{"line":229,"column":25,"offset":5745},"indent":[]}}],"position":{"start":{"line":229,"column":1,"offset":5721},"end":{"line":229,"column":25,"offset":5745},"indent":[]}},{"type":"jsx","value":"<Playground >\n  <InputFieldType config={{\n    type: 'CheckMultipleWithText',\n    key: 'ceilingConditions',\n    fieldProps: {\n      name: 'ceilingConditions',\n      label: 'Condition',\n      options: [\n        {\n          name: 'REASONABLE',\n          label: 'Insulation is in at least a reasonable condition',\n        },\n        {\n          name: 'NOT_REASONABLE',\n          label: 'Insulation not in a reasonable condition',\n        },\n        {\n          name: 'NO_GAPS',\n          label:\n            'Insulation has no gaps other than clearances where required (e.g. around older style downlights and chimney flues)',\n        },\n        {\n          name: 'NOT_ACCESSIBLE',\n          label: 'Ceiling space is not accessible',\n        },\n      ],\n    },\n    refConf: {\n      required: {\n        value: true,\n        message: 'Celiling type must have at least one option checked',\n      },\n    },\n    inners: [\n      {\n        type: 'String',\n        key: 'ceilingConditionReason',\n        showOn: {\n          key: 'ceilingTypes',\n          values: ['NOT_REASONABLE'],\n        },\n        fieldProps: {\n          name: 'ceilingConditionReason',\n          label: '(specify):',\n          placeholder: '',\n          multiline: true,\n          rowsMax: 6,\n          margin: 'dense',\n          style: {\n            marginTop: 0,\n          },\n        },\n        refConf: {\n          required: {\n            value: true,\n            message:\n              'You must explain why ceiling insualtion is not in a resoanable condition',\n          },\n        },\n      },\n    ],\n  }} />\n</Playground>","position":{"start":{"line":231,"column":1,"offset":5749},"end":{"line":293,"column":14,"offset":7396},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"CheckboxText","position":{"start":{"line":295,"column":4,"offset":7403},"end":{"line":295,"column":16,"offset":7415},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":7400},"end":{"line":295,"column":16,"offset":7415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"ToDo: While we can set a type for this, i actually havnt implemenmted this yet","position":{"start":{"line":297,"column":1,"offset":7419},"end":{"line":297,"column":79,"offset":7497},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":7419},"end":{"line":297,"column":79,"offset":7497},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"putting it all together","position":{"start":{"line":299,"column":4,"offset":7504},"end":{"line":299,"column":27,"offset":7527},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":7501},"end":{"line":299,"column":27,"offset":7527},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"is frodo =)","position":{"start":{"line":301,"column":1,"offset":7531},"end":{"line":301,"column":12,"offset":7542},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":7531},"end":{"line":301,"column":12,"offset":7542},"indent":[]}},{"type":"jsx","value":"<Playground>","position":{"start":{"line":303,"column":1,"offset":7546},"end":{"line":303,"column":13,"offset":7558},"indent":[]}},{"type":"jsx","value":"<FormCreator\nconfig={[...INSULATION_FORM_CONF]}\nonSubmit={(d) => alert(d ? JSON.stringify(d): d)}\n/>","position":{"start":{"line":305,"column":1,"offset":7562},"end":{"line":308,"column":3,"offset":7665},"indent":[1,1,1]}},{"type":"jsx","value":"</Playground>","position":{"start":{"line":310,"column":1,"offset":7669},"end":{"line":310,"column":14,"offset":7682},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":313,"column":1,"offset":7686},"end":{"line":313,"column":31,"offset":7716},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":313,"column":31,"offset":7716}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\nimport DefaultLayout from \"C:/Users/heath/Projects/rehouser/client/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nimport { Playground, Props } from 'docz'\nimport FormCreator from \"./FormCreator\"\nimport InputFieldType from './InputFieldType'\nimport INSULATION_FORM_CONF from './InsulationStatementForm/fieldsConf'\nexport const _frontmatter = {};\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"forms\"\n    }}>{`Forms`}</h1>\n    <ul>\n      <li parentName=\"ul\">{`ToDo: being able to copy paste configs would be super awesome`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"form-creator\"\n    }}>{`Form Creator`}</h2>\n    <p>{`This is the base component, all it needs is a `}<inlineCode parentName=\"p\">{`config`}</inlineCode>{` of field types and an `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` to recieve the submitted form data which will be formmatted =)\nToDo`}</p>\n    <ul>\n      <li parentName=\"ul\">{`consider onSave and onCreate`}</li>\n      <li parentName=\"ul\">{`or let the outer wrapper handle onSubmit?`}</li>\n      <li parentName=\"ul\">{`the second. It should just submit the data to its container. its container can work out if its create or update`}</li>\n      <li parentName=\"ul\">{`Side note. We are creatting these containers like `}<inlineCode parentName=\"li\">{`Components/Forms/InsulationForm`}</inlineCode>{` is a wrapper to handle all this`}</li>\n    </ul>\n    <Props of={FormCreator} mdxType=\"Props\" />\nas stated above the most important prop is the config which is an array of InputFieldType config objects, \nthey all take unique properties for there type\n- config is an array of objects, not react class components, wasnt cleat in PropTypes to pass in an array of instancOf for config objects\n- maybe I dont and just manually code the config props for FormCreator... Seems gross and an anti pattern\n    <h3 {...{\n      \"id\": \"inputfieldtype-props\"\n    }}>{`InputFieldType props`}</h3>\n    <Props of={InputFieldType} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={2} __code={'<FormCreator\\n  isNew={true}\\n  config={[\\n    {\\n      type: \\'CheckReason\\',\\n      key: \\'meetsMinCeilingReq\\',\\n      fieldProps: {\\n        name: \\'meetsMinCeilingReq\\',\\n        label:\\n          \\'Does insulation meet the minimum requirements for ceiling insulation?\\',\\n        defaultValue: \\'Test\\',\\n      },\\n      refConf: {\\n        required: {\\n          value: true,\\n          message:\\n            \\'You must select an option for mmeeting minnimum ceiling requirements\\',\\n        },\\n      },\\n      inners: [\\n        {\\n          type: \\'String\\',\\n          key: \\'meetsMinCeilingReqReason\\',\\n          fieldProps: {\\n            name: \\'meetsMinCeilingReqReason\\',\\n            label:\\n              \\'Explain what exception applies and which room(s) it applies to.\\',\\n            placeholder:\\n              \\'(e.g. professional installer cannot access skillion ceiling above bedroom 2)\\',\\n            multiline: true,\\n            rowsMax: 6,\\n            margin: \\'dense\\',\\n            style: {\\n              marginTop: 0,\\n            },\\n          },\\n          refConf: {\\n            required: {\\n              value: true,\\n              message: \\'You must have a reson when selecting no\\',\\n            },\\n          },\\n        },\\n      ],\\n    },\\n  ]}\\n  onSubmit={data => alert(JSON.stringify(data, 0, null))}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      FormCreator,\n      InputFieldType,\n      INSULATION_FORM_CONF\n    }} mdxType=\"Playground\">\n      <FormCreator isNew={true} config={[{\n        \"type\": \"CheckReason\",\n        \"key\": \"meetsMinCeilingReq\",\n        \"fieldProps\": {\n          \"name\": \"meetsMinCeilingReq\",\n          \"label\": \"Does insulation meet the minimum requirements for ceiling insulation?\",\n          \"defaultValue\": \"Test\"\n        },\n        \"refConf\": {\n          \"required\": {\n            \"value\": true,\n            \"message\": \"You must select an option for mmeeting minnimum ceiling requirements\"\n          }\n        },\n        \"inners\": [{\n          \"type\": \"String\",\n          \"key\": \"meetsMinCeilingReqReason\",\n          \"fieldProps\": {\n            \"name\": \"meetsMinCeilingReqReason\",\n            \"label\": \"Explain what exception applies and which room(s) it applies to.\",\n            \"placeholder\": \"(e.g. professional installer cannot access skillion ceiling above bedroom 2)\",\n            \"multiline\": true,\n            \"rowsMax\": 6,\n            \"margin\": \"dense\",\n            \"style\": {\n              \"marginTop\": 0\n            }\n          },\n          \"refConf\": {\n            \"required\": {\n              \"value\": true,\n              \"message\": \"You must have a reson when selecting no\"\n            }\n          }\n        }]\n      }]} onSubmit={data => alert(JSON.stringify(data, 0, null))} mdxType=\"FormCreator\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"field-types\"\n    }}>{`field Types`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Header`}</li>\n      <li parentName=\"ul\">{`Subheader`}</li>\n      <li parentName=\"ul\">{`String`}</li>\n      <li parentName=\"ul\">{`CheckReason`}</li>\n      <li parentName=\"ul\">{`CheckboxText`}</li>\n      <li parentName=\"ul\">{`SelectOneWithText`}</li>\n      <li parentName=\"ul\">{`CheckMultipleWithText`}</li>\n      <li parentName=\"ul\">{`Boolean`}</li>\n      <li parentName=\"ul\">{`Int`}</li>\n      <li parentName=\"ul\">{`Float`}</li>\n      <li parentName=\"ul\">{`DateTime`}</li>\n      <li parentName=\"ul\">{`AcceptTerms`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"header\"\n    }}>{`Header`}</h2>\n    <Playground __position={3} __code={'<InputFieldType\\n  config={{\\n    type: \\'Header\\',\\n    fieldProps: {\\n      label: \\'INSULATION STATEMENT FORM\\',\\n    },\\n  }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      FormCreator,\n      InputFieldType,\n      INSULATION_FORM_CONF\n    }} mdxType=\"Playground\">\n  <InputFieldType config={{\n        type: 'Header',\n        fieldProps: {\n          label: 'INSULATION STATEMENT FORM'\n        }\n      }} mdxType=\"InputFieldType\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"subheader\"\n    }}>{`Subheader`}</h2>\n    <Playground __position={4} __code={'<InputFieldType\\n  config={{\\n    type: \\'Subheader\\',\\n    fieldProps: {\\n      label:\\n        \\'Landlords must complete the insulation statement for a property before it can go on the market\\',\\n    },\\n  }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      FormCreator,\n      InputFieldType,\n      INSULATION_FORM_CONF\n    }} mdxType=\"Playground\">\n  <InputFieldType config={{\n        type: 'Subheader',\n        fieldProps: {\n          label: 'Landlords must complete the insulation statement for a property before it can go on the market'\n        }\n      }} mdxType=\"InputFieldType\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"checkreason\"\n    }}>{`CheckReason`}</h2>\n    <Playground __position={5} __code={'<InputFieldType\\n  config={{\\n    type: \\'CheckReason\\',\\n    key: \\'meetsMinCeilingReq\\',\\n    fieldProps: {\\n      name: \\'meetsMinCeilingReq\\',\\n      label:\\n        \\'Does insulation meet the minimum requirements for ceiling insulation?\\',\\n      defaultValue: \\'Test\\',\\n    },\\n    refConf: {\\n      required: {\\n        value: true,\\n        message:\\n          \\'You must select an option for mmeeting minnimum ceiling requirements\\',\\n      },\\n    },\\n    inners: [\\n      {\\n        type: \\'String\\',\\n        key: \\'meetsMinCeilingReqReason\\',\\n        fieldProps: {\\n          name: \\'meetsMinCeilingReqReason\\',\\n          label:\\n            \\'Explain what exception applies and which room(s) it applies to.\\',\\n          placeholder:\\n            \\'(e.g. professional installer cannot access skillion ceiling above bedroom 2)\\',\\n          multiline: true,\\n          rowsMax: 6,\\n          margin: \\'dense\\',\\n          style: {\\n            marginTop: 0,\\n          },\\n        },\\n        refConf: {\\n          required: {\\n            value: true,\\n            message: \\'You must have a reson when selecting no\\',\\n          },\\n        },\\n      },\\n    ],\\n  }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      FormCreator,\n      InputFieldType,\n      INSULATION_FORM_CONF\n    }} mdxType=\"Playground\">\n  <InputFieldType config={{\n        \"type\": \"CheckReason\",\n        \"key\": \"meetsMinCeilingReq\",\n        \"fieldProps\": {\n          \"name\": \"meetsMinCeilingReq\",\n          \"label\": \"Does insulation meet the minimum requirements for ceiling insulation?\",\n          \"defaultValue\": \"Test\"\n        },\n        \"refConf\": {\n          \"required\": {\n            \"value\": true,\n            \"message\": \"You must select an option for mmeeting minnimum ceiling requirements\"\n          }\n        },\n        \"inners\": [{\n          \"type\": \"String\",\n          \"key\": \"meetsMinCeilingReqReason\",\n          \"fieldProps\": {\n            \"name\": \"meetsMinCeilingReqReason\",\n            \"label\": \"Explain what exception applies and which room(s) it applies to.\",\n            \"placeholder\": \"(e.g. professional installer cannot access skillion ceiling above bedroom 2)\",\n            \"multiline\": true,\n            \"rowsMax\": 6,\n            \"margin\": \"dense\",\n            \"style\": {\n              \"marginTop\": 0\n            }\n          },\n          \"refConf\": {\n            \"required\": {\n              \"value\": true,\n              \"message\": \"You must have a reson when selecting no\"\n            }\n          }\n        }]\n      }} mdxType=\"InputFieldType\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"selectonewithtext\"\n    }}>{`SelectOneWithText`}</h2>\n    <Playground __position={6} __code={'<InputFieldType\\n  config={{\\n    type: \\'SelectOneWithText\\',\\n    key: \\'ceilingCoverage\\',\\n    fieldProps: {\\n      name: \\'ceilingCoverage\\',\\n      label: \\'Location/Coverage?\\',\\n      options: [\\n        {\\n          name: \\'COMPLETE\\',\\n          label: \\'Complete (all rooms)\\',\\n        },\\n        {\\n          name: \\'PARTIAL\\',\\n          label: \\'Partial (specify areas not insulated)\\',\\n        },\\n        {\\n          name: \\'NONE\\',\\n          label: \\'None\\',\\n        },\\n        {\\n          name: \\'UNKNOWN\\',\\n          label:\\n            \\'I don’t know as ceiling space is not accessible in the following areas (specify)\\',\\n        },\\n      ],\\n    },\\n    refConf: {\\n      required: {\\n        value: true,\\n        message: \\'Ceiling Coverage must be specified\\',\\n      },\\n    },\\n    inners: [\\n      {\\n        type: \\'String\\',\\n        key: \\'ceilingCoverageReason\\',\\n        showOn: {\\n          key: \\'ceilingCoverage\\',\\n          values: [\\'PARTIAL\\', \\'UNKNOWN\\'],\\n        },\\n        fieldProps: {\\n          name: \\'ceilingCoverageReason\\',\\n          label: \\'(specify):\\',\\n          placeholder: \\'\\',\\n          multiline: true,\\n          rowsMax: 6,\\n          margin: \\'dense\\',\\n          style: {\\n            marginTop: 0,\\n          },\\n        },\\n        refConf: {\\n          required: {\\n            value: true,\\n            message:\\n              \\'Please provide details for your ceiling coverage location choice\\',\\n          },\\n        },\\n      },\\n    ],\\n  }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      FormCreator,\n      InputFieldType,\n      INSULATION_FORM_CONF\n    }} mdxType=\"Playground\">\n  <InputFieldType config={{\n        type: 'SelectOneWithText',\n        key: 'ceilingCoverage',\n        fieldProps: {\n          name: 'ceilingCoverage',\n          label: 'Location/Coverage?',\n          options: [{\n            name: 'COMPLETE',\n            label: 'Complete (all rooms)'\n          }, {\n            name: 'PARTIAL',\n            label: 'Partial (specify areas not insulated)'\n          }, {\n            name: 'NONE',\n            label: 'None'\n          }, {\n            name: 'UNKNOWN',\n            label: 'I don’t know as ceiling space is not accessible in the following areas (specify)'\n          }]\n        },\n        refConf: {\n          required: {\n            value: true,\n            message: 'Ceiling Coverage must be specified'\n          }\n        },\n        inners: [{\n          type: 'String',\n          key: 'ceilingCoverageReason',\n          showOn: {\n            key: 'ceilingCoverage',\n            values: ['PARTIAL', 'UNKNOWN']\n          },\n          fieldProps: {\n            name: 'ceilingCoverageReason',\n            label: '(specify):',\n            placeholder: '',\n            multiline: true,\n            rowsMax: 6,\n            margin: 'dense',\n            style: {\n              marginTop: 0\n            }\n          },\n          refConf: {\n            required: {\n              value: true,\n              message: 'Please provide details for your ceiling coverage location choice'\n            }\n          }\n        }]\n      }} mdxType=\"InputFieldType\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"checkmultiplewithtext\"\n    }}>{`CheckMultipleWithText`}</h2>\n    <Playground __position={7} __code={'<InputFieldType\\n  config={{\\n    type: \\'CheckMultipleWithText\\',\\n    key: \\'ceilingConditions\\',\\n    fieldProps: {\\n      name: \\'ceilingConditions\\',\\n      label: \\'Condition\\',\\n      options: [\\n        {\\n          name: \\'REASONABLE\\',\\n          label: \\'Insulation is in at least a reasonable condition\\',\\n        },\\n        {\\n          name: \\'NOT_REASONABLE\\',\\n          label: \\'Insulation not in a reasonable condition\\',\\n        },\\n        {\\n          name: \\'NO_GAPS\\',\\n          label:\\n            \\'Insulation has no gaps other than clearances where required (e.g. around older style downlights and chimney flues)\\',\\n        },\\n        {\\n          name: \\'NOT_ACCESSIBLE\\',\\n          label: \\'Ceiling space is not accessible\\',\\n        },\\n      ],\\n    },\\n    refConf: {\\n      required: {\\n        value: true,\\n        message: \\'Celiling type must have at least one option checked\\',\\n      },\\n    },\\n    inners: [\\n      {\\n        type: \\'String\\',\\n        key: \\'ceilingConditionReason\\',\\n        showOn: {\\n          key: \\'ceilingTypes\\',\\n          values: [\\'NOT_REASONABLE\\'],\\n        },\\n        fieldProps: {\\n          name: \\'ceilingConditionReason\\',\\n          label: \\'(specify):\\',\\n          placeholder: \\'\\',\\n          multiline: true,\\n          rowsMax: 6,\\n          margin: \\'dense\\',\\n          style: {\\n            marginTop: 0,\\n          },\\n        },\\n        refConf: {\\n          required: {\\n            value: true,\\n            message:\\n              \\'You must explain why ceiling insualtion is not in a resoanable condition\\',\\n          },\\n        },\\n      },\\n    ],\\n  }}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      FormCreator,\n      InputFieldType,\n      INSULATION_FORM_CONF\n    }} mdxType=\"Playground\">\n  <InputFieldType config={{\n        type: 'CheckMultipleWithText',\n        key: 'ceilingConditions',\n        fieldProps: {\n          name: 'ceilingConditions',\n          label: 'Condition',\n          options: [{\n            name: 'REASONABLE',\n            label: 'Insulation is in at least a reasonable condition'\n          }, {\n            name: 'NOT_REASONABLE',\n            label: 'Insulation not in a reasonable condition'\n          }, {\n            name: 'NO_GAPS',\n            label: 'Insulation has no gaps other than clearances where required (e.g. around older style downlights and chimney flues)'\n          }, {\n            name: 'NOT_ACCESSIBLE',\n            label: 'Ceiling space is not accessible'\n          }]\n        },\n        refConf: {\n          required: {\n            value: true,\n            message: 'Celiling type must have at least one option checked'\n          }\n        },\n        inners: [{\n          type: 'String',\n          key: 'ceilingConditionReason',\n          showOn: {\n            key: 'ceilingTypes',\n            values: ['NOT_REASONABLE']\n          },\n          fieldProps: {\n            name: 'ceilingConditionReason',\n            label: '(specify):',\n            placeholder: '',\n            multiline: true,\n            rowsMax: 6,\n            margin: 'dense',\n            style: {\n              marginTop: 0\n            }\n          },\n          refConf: {\n            required: {\n              value: true,\n              message: 'You must explain why ceiling insualtion is not in a resoanable condition'\n            }\n          }\n        }]\n      }} mdxType=\"InputFieldType\" />\n    </Playground>\n    <h2 {...{\n      \"id\": \"checkboxtext\"\n    }}>{`CheckboxText`}</h2>\n    <p>{`ToDo: While we can set a type for this, i actually havnt implemenmted this yet`}</p>\n    <h2 {...{\n      \"id\": \"putting-it-all-together\"\n    }}>{`putting it all together`}</h2>\n    <p>{`is frodo =)`}</p>\n    <Playground __position={8} __code={'<FormCreator\\n  config={[...INSULATION_FORM_CONF]}\\n  onSubmit={d => alert(d ? JSON.stringify(d) : d)}\\n/>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      FormCreator,\n      InputFieldType,\n      INSULATION_FORM_CONF\n    }} mdxType=\"Playground\">\n      <FormCreator config={[...INSULATION_FORM_CONF]} onSubmit={d => alert(d ? JSON.stringify(d) : d)} mdxType=\"FormCreator\" />\n    </Playground>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}