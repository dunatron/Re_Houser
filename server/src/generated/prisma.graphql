# source: https://us1.prisma.sh/heath-dunlop-37e897/rehouser-service/dev
# timestamp: Mon Jun 22 2020 22:05:40 GMT+1200 (New Zealand Standard Time)

type Accommodation implements Node {
  id: ID!
  property: Property!
  roomSize: Float
  rent: Float
  expenses: Float
  description: String
}

"""A connection to a list of items."""
type AccommodationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccommodationEdge]!
  aggregate: AggregateAccommodation!
}

input AccommodationCreateInput {
  id: ID
  roomSize: Float
  rent: Float
  expenses: Float
  description: String
  property: PropertyCreateOneWithoutAccommodationInput!
}

input AccommodationCreateManyWithoutPropertyInput {
  create: [AccommodationCreateWithoutPropertyInput!]
  connect: [AccommodationWhereUniqueInput!]
}

input AccommodationCreateWithoutPropertyInput {
  id: ID
  roomSize: Float
  rent: Float
  expenses: Float
  description: String
}

"""An edge in a connection."""
type AccommodationEdge {
  """The item at the end of the edge."""
  node: Accommodation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccommodationOrderByInput {
  id_ASC
  id_DESC
  roomSize_ASC
  roomSize_DESC
  rent_ASC
  rent_DESC
  expenses_ASC
  expenses_DESC
  description_ASC
  description_DESC
}

type AccommodationPreviousValues {
  id: ID!
  roomSize: Float
  rent: Float
  expenses: Float
  description: String
}

input AccommodationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [AccommodationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccommodationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccommodationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  roomSize: Float

  """All values that are not equal to given value."""
  roomSize_not: Float

  """All values that are contained in given list."""
  roomSize_in: [Float!]

  """All values that are not contained in given list."""
  roomSize_not_in: [Float!]

  """All values less than the given value."""
  roomSize_lt: Float

  """All values less than or equal the given value."""
  roomSize_lte: Float

  """All values greater than the given value."""
  roomSize_gt: Float

  """All values greater than or equal the given value."""
  roomSize_gte: Float
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  expenses: Float

  """All values that are not equal to given value."""
  expenses_not: Float

  """All values that are contained in given list."""
  expenses_in: [Float!]

  """All values that are not contained in given list."""
  expenses_not_in: [Float!]

  """All values less than the given value."""
  expenses_lt: Float

  """All values less than or equal the given value."""
  expenses_lte: Float

  """All values greater than the given value."""
  expenses_gt: Float

  """All values greater than or equal the given value."""
  expenses_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type AccommodationSubscriptionPayload {
  mutation: MutationType!
  node: Accommodation
  updatedFields: [String!]
  previousValues: AccommodationPreviousValues
}

input AccommodationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccommodationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccommodationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccommodationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccommodationWhereInput
}

input AccommodationUpdateInput {
  roomSize: Float
  rent: Float
  expenses: Float
  description: String
  property: PropertyUpdateOneRequiredWithoutAccommodationInput
}

input AccommodationUpdateManyDataInput {
  roomSize: Float
  rent: Float
  expenses: Float
  description: String
}

input AccommodationUpdateManyMutationInput {
  roomSize: Float
  rent: Float
  expenses: Float
  description: String
}

input AccommodationUpdateManyWithoutPropertyInput {
  create: [AccommodationCreateWithoutPropertyInput!]
  connect: [AccommodationWhereUniqueInput!]
  set: [AccommodationWhereUniqueInput!]
  disconnect: [AccommodationWhereUniqueInput!]
  delete: [AccommodationWhereUniqueInput!]
  update: [AccommodationUpdateWithWhereUniqueWithoutPropertyInput!]
  updateMany: [AccommodationUpdateManyWithWhereNestedInput!]
  deleteMany: [AccommodationScalarWhereInput!]
  upsert: [AccommodationUpsertWithWhereUniqueWithoutPropertyInput!]
}

input AccommodationUpdateManyWithWhereNestedInput {
  where: AccommodationScalarWhereInput!
  data: AccommodationUpdateManyDataInput!
}

input AccommodationUpdateWithoutPropertyDataInput {
  roomSize: Float
  rent: Float
  expenses: Float
  description: String
}

input AccommodationUpdateWithWhereUniqueWithoutPropertyInput {
  where: AccommodationWhereUniqueInput!
  data: AccommodationUpdateWithoutPropertyDataInput!
}

input AccommodationUpsertWithWhereUniqueWithoutPropertyInput {
  where: AccommodationWhereUniqueInput!
  update: AccommodationUpdateWithoutPropertyDataInput!
  create: AccommodationCreateWithoutPropertyInput!
}

input AccommodationWhereInput {
  """Logical AND on all given filters."""
  AND: [AccommodationWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccommodationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccommodationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  roomSize: Float

  """All values that are not equal to given value."""
  roomSize_not: Float

  """All values that are contained in given list."""
  roomSize_in: [Float!]

  """All values that are not contained in given list."""
  roomSize_not_in: [Float!]

  """All values less than the given value."""
  roomSize_lt: Float

  """All values less than or equal the given value."""
  roomSize_lte: Float

  """All values greater than the given value."""
  roomSize_gt: Float

  """All values greater than or equal the given value."""
  roomSize_gte: Float
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  expenses: Float

  """All values that are not equal to given value."""
  expenses_not: Float

  """All values that are contained in given list."""
  expenses_in: [Float!]

  """All values that are not contained in given list."""
  expenses_not_in: [Float!]

  """All values less than the given value."""
  expenses_lt: Float

  """All values less than or equal the given value."""
  expenses_lte: Float

  """All values greater than the given value."""
  expenses_gt: Float

  """All values greater than or equal the given value."""
  expenses_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  property: PropertyWhereInput
}

input AccommodationWhereUniqueInput {
  id: ID
}

type Activity implements Node {
  id: ID!
  createdAt: DateTime!
  title: String!
  content: String!
  jsonObj: Json
  type: ActivityType
  user: User
  involved(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  property: Property
  propertyLease: PropertyLease
}

"""A connection to a list of items."""
type ActivityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActivityEdge]!
  aggregate: AggregateActivity!
}

input ActivityCreateInput {
  id: ID
  title: String!
  content: String!
  jsonObj: Json
  type: ActivityType
  user: UserCreateOneWithoutActivityInput
  involved: UserCreateManyWithoutInvolvedActivityInput
  property: PropertyCreateOneWithoutActivityInput
  propertyLease: PropertyLeaseCreateOneWithoutActivityInput
}

input ActivityCreateManyWithoutInvolvedInput {
  create: [ActivityCreateWithoutInvolvedInput!]
  connect: [ActivityWhereUniqueInput!]
}

input ActivityCreateManyWithoutPropertyInput {
  create: [ActivityCreateWithoutPropertyInput!]
  connect: [ActivityWhereUniqueInput!]
}

input ActivityCreateManyWithoutPropertyLeaseInput {
  create: [ActivityCreateWithoutPropertyLeaseInput!]
  connect: [ActivityWhereUniqueInput!]
}

input ActivityCreateManyWithoutUserInput {
  create: [ActivityCreateWithoutUserInput!]
  connect: [ActivityWhereUniqueInput!]
}

input ActivityCreateWithoutInvolvedInput {
  id: ID
  title: String!
  content: String!
  jsonObj: Json
  type: ActivityType
  user: UserCreateOneWithoutActivityInput
  property: PropertyCreateOneWithoutActivityInput
  propertyLease: PropertyLeaseCreateOneWithoutActivityInput
}

input ActivityCreateWithoutPropertyInput {
  id: ID
  title: String!
  content: String!
  jsonObj: Json
  type: ActivityType
  user: UserCreateOneWithoutActivityInput
  involved: UserCreateManyWithoutInvolvedActivityInput
  propertyLease: PropertyLeaseCreateOneWithoutActivityInput
}

input ActivityCreateWithoutPropertyLeaseInput {
  id: ID
  title: String!
  content: String!
  jsonObj: Json
  type: ActivityType
  user: UserCreateOneWithoutActivityInput
  involved: UserCreateManyWithoutInvolvedActivityInput
  property: PropertyCreateOneWithoutActivityInput
}

input ActivityCreateWithoutUserInput {
  id: ID
  title: String!
  content: String!
  jsonObj: Json
  type: ActivityType
  involved: UserCreateManyWithoutInvolvedActivityInput
  property: PropertyCreateOneWithoutActivityInput
  propertyLease: PropertyLeaseCreateOneWithoutActivityInput
}

"""An edge in a connection."""
type ActivityEdge {
  """The item at the end of the edge."""
  node: Activity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActivityOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
  jsonObj_ASC
  jsonObj_DESC
  type_ASC
  type_DESC
}

type ActivityPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  content: String!
  jsonObj: Json
  type: ActivityType
}

input ActivityScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivityScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivityScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivityScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  type: ActivityType

  """All values that are not equal to given value."""
  type_not: ActivityType

  """All values that are contained in given list."""
  type_in: [ActivityType!]

  """All values that are not contained in given list."""
  type_not_in: [ActivityType!]
}

type ActivitySubscriptionPayload {
  mutation: MutationType!
  node: Activity
  updatedFields: [String!]
  previousValues: ActivityPreviousValues
}

input ActivitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivitySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActivityWhereInput
}

enum ActivityType {
  SIGNED_UP
  CREATED_PROPERTY
  UPDATED_PROPERTY
  PROPERTY_DRAFT
  PROPERTY_LIVE
  CREATED_LEASE
  LEASE_SIGNED
  LEASE_UPDATED
  LEASE_FINALISED
  LEASE_EXPIRED
  CREATED_PROPERTY_APPRAISAL
}

input ActivityUpdateInput {
  title: String
  content: String
  jsonObj: Json
  type: ActivityType
  user: UserUpdateOneWithoutActivityInput
  involved: UserUpdateManyWithoutInvolvedActivityInput
  property: PropertyUpdateOneWithoutActivityInput
  propertyLease: PropertyLeaseUpdateOneWithoutActivityInput
}

input ActivityUpdateManyDataInput {
  title: String
  content: String
  jsonObj: Json
  type: ActivityType
}

input ActivityUpdateManyMutationInput {
  title: String
  content: String
  jsonObj: Json
  type: ActivityType
}

input ActivityUpdateManyWithoutInvolvedInput {
  create: [ActivityCreateWithoutInvolvedInput!]
  connect: [ActivityWhereUniqueInput!]
  set: [ActivityWhereUniqueInput!]
  disconnect: [ActivityWhereUniqueInput!]
  delete: [ActivityWhereUniqueInput!]
  update: [ActivityUpdateWithWhereUniqueWithoutInvolvedInput!]
  updateMany: [ActivityUpdateManyWithWhereNestedInput!]
  deleteMany: [ActivityScalarWhereInput!]
  upsert: [ActivityUpsertWithWhereUniqueWithoutInvolvedInput!]
}

input ActivityUpdateManyWithoutPropertyInput {
  create: [ActivityCreateWithoutPropertyInput!]
  connect: [ActivityWhereUniqueInput!]
  set: [ActivityWhereUniqueInput!]
  disconnect: [ActivityWhereUniqueInput!]
  delete: [ActivityWhereUniqueInput!]
  update: [ActivityUpdateWithWhereUniqueWithoutPropertyInput!]
  updateMany: [ActivityUpdateManyWithWhereNestedInput!]
  deleteMany: [ActivityScalarWhereInput!]
  upsert: [ActivityUpsertWithWhereUniqueWithoutPropertyInput!]
}

input ActivityUpdateManyWithoutPropertyLeaseInput {
  create: [ActivityCreateWithoutPropertyLeaseInput!]
  connect: [ActivityWhereUniqueInput!]
  set: [ActivityWhereUniqueInput!]
  disconnect: [ActivityWhereUniqueInput!]
  delete: [ActivityWhereUniqueInput!]
  update: [ActivityUpdateWithWhereUniqueWithoutPropertyLeaseInput!]
  updateMany: [ActivityUpdateManyWithWhereNestedInput!]
  deleteMany: [ActivityScalarWhereInput!]
  upsert: [ActivityUpsertWithWhereUniqueWithoutPropertyLeaseInput!]
}

input ActivityUpdateManyWithoutUserInput {
  create: [ActivityCreateWithoutUserInput!]
  connect: [ActivityWhereUniqueInput!]
  set: [ActivityWhereUniqueInput!]
  disconnect: [ActivityWhereUniqueInput!]
  delete: [ActivityWhereUniqueInput!]
  update: [ActivityUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ActivityUpdateManyWithWhereNestedInput!]
  deleteMany: [ActivityScalarWhereInput!]
  upsert: [ActivityUpsertWithWhereUniqueWithoutUserInput!]
}

input ActivityUpdateManyWithWhereNestedInput {
  where: ActivityScalarWhereInput!
  data: ActivityUpdateManyDataInput!
}

input ActivityUpdateWithoutInvolvedDataInput {
  title: String
  content: String
  jsonObj: Json
  type: ActivityType
  user: UserUpdateOneWithoutActivityInput
  property: PropertyUpdateOneWithoutActivityInput
  propertyLease: PropertyLeaseUpdateOneWithoutActivityInput
}

input ActivityUpdateWithoutPropertyDataInput {
  title: String
  content: String
  jsonObj: Json
  type: ActivityType
  user: UserUpdateOneWithoutActivityInput
  involved: UserUpdateManyWithoutInvolvedActivityInput
  propertyLease: PropertyLeaseUpdateOneWithoutActivityInput
}

input ActivityUpdateWithoutPropertyLeaseDataInput {
  title: String
  content: String
  jsonObj: Json
  type: ActivityType
  user: UserUpdateOneWithoutActivityInput
  involved: UserUpdateManyWithoutInvolvedActivityInput
  property: PropertyUpdateOneWithoutActivityInput
}

input ActivityUpdateWithoutUserDataInput {
  title: String
  content: String
  jsonObj: Json
  type: ActivityType
  involved: UserUpdateManyWithoutInvolvedActivityInput
  property: PropertyUpdateOneWithoutActivityInput
  propertyLease: PropertyLeaseUpdateOneWithoutActivityInput
}

input ActivityUpdateWithWhereUniqueWithoutInvolvedInput {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateWithoutInvolvedDataInput!
}

input ActivityUpdateWithWhereUniqueWithoutPropertyInput {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateWithoutPropertyDataInput!
}

input ActivityUpdateWithWhereUniqueWithoutPropertyLeaseInput {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateWithoutPropertyLeaseDataInput!
}

input ActivityUpdateWithWhereUniqueWithoutUserInput {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateWithoutUserDataInput!
}

input ActivityUpsertWithWhereUniqueWithoutInvolvedInput {
  where: ActivityWhereUniqueInput!
  update: ActivityUpdateWithoutInvolvedDataInput!
  create: ActivityCreateWithoutInvolvedInput!
}

input ActivityUpsertWithWhereUniqueWithoutPropertyInput {
  where: ActivityWhereUniqueInput!
  update: ActivityUpdateWithoutPropertyDataInput!
  create: ActivityCreateWithoutPropertyInput!
}

input ActivityUpsertWithWhereUniqueWithoutPropertyLeaseInput {
  where: ActivityWhereUniqueInput!
  update: ActivityUpdateWithoutPropertyLeaseDataInput!
  create: ActivityCreateWithoutPropertyLeaseInput!
}

input ActivityUpsertWithWhereUniqueWithoutUserInput {
  where: ActivityWhereUniqueInput!
  update: ActivityUpdateWithoutUserDataInput!
  create: ActivityCreateWithoutUserInput!
}

input ActivityWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivityWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  type: ActivityType

  """All values that are not equal to given value."""
  type_not: ActivityType

  """All values that are contained in given list."""
  type_in: [ActivityType!]

  """All values that are not contained in given list."""
  type_not_in: [ActivityType!]
  user: UserWhereInput
  involved_every: UserWhereInput
  involved_some: UserWhereInput
  involved_none: UserWhereInput
  property: PropertyWhereInput
  propertyLease: PropertyLeaseWhereInput
}

input ActivityWhereUniqueInput {
  id: ID
}

type AggregateAccommodation {
  count: Int!
}

type AggregateActivity {
  count: Int!
}

type AggregateBankDetail {
  count: Int!
}

type AggregateCharge {
  count: Int!
}

type AggregateChat {
  count: Int!
}

type AggregateCreditCard {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateFriendRequest {
  count: Int!
}

type AggregateInsulationForm {
  count: Int!
}

type AggregateLessee {
  count: Int!
}

type AggregateLessor {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregatePayment {
  count: Int!
}

type AggregatePreTenancyForm {
  count: Int!
}

type AggregateProperty {
  count: Int!
}

type AggregatePropertyAdvertisement {
  count: Int!
}

type AggregatePropertyLease {
  count: Int!
}

type AggregateRentalApplication {
  count: Int!
}

type AggregateRentalAppraisal {
  count: Int!
}

type AggregateRentalGroupApplicant {
  count: Int!
}

type AggregateSeen {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateWallet {
  count: Int!
}

enum ApplicationStage {
  INITIALIZING
  PENDING
  DENIED
  ACCEPTED
}

type BankDetail implements Node {
  id: ID!
  name: String
  bank: String
  branch: String
}

"""A connection to a list of items."""
type BankDetailConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BankDetailEdge]!
  aggregate: AggregateBankDetail!
}

input BankDetailCreateInput {
  id: ID
  name: String
  bank: String
  branch: String
}

"""An edge in a connection."""
type BankDetailEdge {
  """The item at the end of the edge."""
  node: BankDetail!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BankDetailOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  bank_ASC
  bank_DESC
  branch_ASC
  branch_DESC
}

type BankDetailPreviousValues {
  id: ID!
  name: String
  bank: String
  branch: String
}

type BankDetailSubscriptionPayload {
  mutation: MutationType!
  node: BankDetail
  updatedFields: [String!]
  previousValues: BankDetailPreviousValues
}

input BankDetailSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BankDetailSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BankDetailSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BankDetailSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BankDetailWhereInput
}

input BankDetailUpdateInput {
  name: String
  bank: String
  branch: String
}

input BankDetailUpdateManyMutationInput {
  name: String
  bank: String
  branch: String
}

input BankDetailWhereInput {
  """Logical AND on all given filters."""
  AND: [BankDetailWhereInput!]

  """Logical OR on all given filters."""
  OR: [BankDetailWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BankDetailWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  bank: String

  """All values that are not equal to given value."""
  bank_not: String

  """All values that are contained in given list."""
  bank_in: [String!]

  """All values that are not contained in given list."""
  bank_not_in: [String!]

  """All values less than the given value."""
  bank_lt: String

  """All values less than or equal the given value."""
  bank_lte: String

  """All values greater than the given value."""
  bank_gt: String

  """All values greater than or equal the given value."""
  bank_gte: String

  """All values containing the given string."""
  bank_contains: String

  """All values not containing the given string."""
  bank_not_contains: String

  """All values starting with the given string."""
  bank_starts_with: String

  """All values not starting with the given string."""
  bank_not_starts_with: String

  """All values ending with the given string."""
  bank_ends_with: String

  """All values not ending with the given string."""
  bank_not_ends_with: String
  branch: String

  """All values that are not equal to given value."""
  branch_not: String

  """All values that are contained in given list."""
  branch_in: [String!]

  """All values that are not contained in given list."""
  branch_not_in: [String!]

  """All values less than the given value."""
  branch_lt: String

  """All values less than or equal the given value."""
  branch_lte: String

  """All values greater than the given value."""
  branch_gt: String

  """All values greater than or equal the given value."""
  branch_gte: String

  """All values containing the given string."""
  branch_contains: String

  """All values not containing the given string."""
  branch_not_contains: String

  """All values starting with the given string."""
  branch_starts_with: String

  """All values not starting with the given string."""
  branch_not_starts_with: String

  """All values ending with the given string."""
  branch_ends_with: String

  """All values not ending with the given string."""
  branch_not_ends_with: String
}

input BankDetailWhereUniqueInput {
  id: ID
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

enum CeilingInsulationTypes {
  SEGMENTS_BLANKETS
  LOOSE_FILL
  OTHER
  NOT_ACCESSIBLE
}

type Charge implements Node {
  id: ID!
  createdAt: DateTime!
  wallet: Wallet
  amount: Float
  description: String
}

"""A connection to a list of items."""
type ChargeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChargeEdge]!
  aggregate: AggregateCharge!
}

input ChargeCreateInput {
  id: ID
  amount: Float
  description: String
  wallet: WalletCreateOneWithoutChargesInput
}

input ChargeCreateManyWithoutWalletInput {
  create: [ChargeCreateWithoutWalletInput!]
  connect: [ChargeWhereUniqueInput!]
}

input ChargeCreateWithoutWalletInput {
  id: ID
  amount: Float
  description: String
}

"""An edge in a connection."""
type ChargeEdge {
  """The item at the end of the edge."""
  node: Charge!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChargeOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  amount_ASC
  amount_DESC
  description_ASC
  description_DESC
}

type ChargePreviousValues {
  id: ID!
  createdAt: DateTime!
  amount: Float
  description: String
}

input ChargeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChargeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChargeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChargeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
}

type ChargeSubscriptionPayload {
  mutation: MutationType!
  node: Charge
  updatedFields: [String!]
  previousValues: ChargePreviousValues
}

input ChargeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChargeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChargeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChargeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChargeWhereInput
}

input ChargeUpdateInput {
  amount: Float
  description: String
  wallet: WalletUpdateOneWithoutChargesInput
}

input ChargeUpdateManyDataInput {
  amount: Float
  description: String
}

input ChargeUpdateManyMutationInput {
  amount: Float
  description: String
}

input ChargeUpdateManyWithoutWalletInput {
  create: [ChargeCreateWithoutWalletInput!]
  connect: [ChargeWhereUniqueInput!]
  set: [ChargeWhereUniqueInput!]
  disconnect: [ChargeWhereUniqueInput!]
  delete: [ChargeWhereUniqueInput!]
  update: [ChargeUpdateWithWhereUniqueWithoutWalletInput!]
  updateMany: [ChargeUpdateManyWithWhereNestedInput!]
  deleteMany: [ChargeScalarWhereInput!]
  upsert: [ChargeUpsertWithWhereUniqueWithoutWalletInput!]
}

input ChargeUpdateManyWithWhereNestedInput {
  where: ChargeScalarWhereInput!
  data: ChargeUpdateManyDataInput!
}

input ChargeUpdateWithoutWalletDataInput {
  amount: Float
  description: String
}

input ChargeUpdateWithWhereUniqueWithoutWalletInput {
  where: ChargeWhereUniqueInput!
  data: ChargeUpdateWithoutWalletDataInput!
}

input ChargeUpsertWithWhereUniqueWithoutWalletInput {
  where: ChargeWhereUniqueInput!
  update: ChargeUpdateWithoutWalletDataInput!
  create: ChargeCreateWithoutWalletInput!
}

input ChargeWhereInput {
  """Logical AND on all given filters."""
  AND: [ChargeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChargeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChargeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  wallet: WalletWhereInput
}

input ChargeWhereUniqueInput {
  id: ID
}

type Chat implements Node {
  id: ID!
  name: String!
  picture: String
  type: ChatType
  lastMessage: Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  participants(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  seenInfo(where: SeenWhereInput, orderBy: SeenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Seen!]
}

"""A connection to a list of items."""
type ChatConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChatEdge]!
  aggregate: AggregateChat!
}

input ChatCreateInput {
  id: ID
  name: String!
  picture: String
  type: ChatType
  lastMessage: MessageCreateOneWithoutLastMessageRelInput
  messages: MessageCreateManyWithoutChatInput
  participants: UserCreateManyWithoutChatsInput
  seenInfo: SeenCreateManyWithoutChatInput
}

input ChatCreateManyWithoutParticipantsInput {
  create: [ChatCreateWithoutParticipantsInput!]
  connect: [ChatWhereUniqueInput!]
}

input ChatCreateOneWithoutLastMessageInput {
  create: ChatCreateWithoutLastMessageInput
  connect: ChatWhereUniqueInput
}

input ChatCreateOneWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput
  connect: ChatWhereUniqueInput
}

input ChatCreateOneWithoutSeenInfoInput {
  create: ChatCreateWithoutSeenInfoInput
  connect: ChatWhereUniqueInput
}

input ChatCreateWithoutLastMessageInput {
  id: ID
  name: String!
  picture: String
  type: ChatType
  messages: MessageCreateManyWithoutChatInput
  participants: UserCreateManyWithoutChatsInput
  seenInfo: SeenCreateManyWithoutChatInput
}

input ChatCreateWithoutMessagesInput {
  id: ID
  name: String!
  picture: String
  type: ChatType
  lastMessage: MessageCreateOneWithoutLastMessageRelInput
  participants: UserCreateManyWithoutChatsInput
  seenInfo: SeenCreateManyWithoutChatInput
}

input ChatCreateWithoutParticipantsInput {
  id: ID
  name: String!
  picture: String
  type: ChatType
  lastMessage: MessageCreateOneWithoutLastMessageRelInput
  messages: MessageCreateManyWithoutChatInput
  seenInfo: SeenCreateManyWithoutChatInput
}

input ChatCreateWithoutSeenInfoInput {
  id: ID
  name: String!
  picture: String
  type: ChatType
  lastMessage: MessageCreateOneWithoutLastMessageRelInput
  messages: MessageCreateManyWithoutChatInput
  participants: UserCreateManyWithoutChatsInput
}

"""An edge in a connection."""
type ChatEdge {
  """The item at the end of the edge."""
  node: Chat!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ChatOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  picture_ASC
  picture_DESC
  type_ASC
  type_DESC
}

type ChatPreviousValues {
  id: ID!
  name: String!
  picture: String
  type: ChatType
}

input ChatScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  type: ChatType

  """All values that are not equal to given value."""
  type_not: ChatType

  """All values that are contained in given list."""
  type_in: [ChatType!]

  """All values that are not contained in given list."""
  type_not_in: [ChatType!]
}

type ChatSubscriptionPayload {
  mutation: MutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

input ChatSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChatWhereInput
}

enum ChatType {
  PEER
  GROUP
}

input ChatUpdateInput {
  name: String
  picture: String
  type: ChatType
  lastMessage: MessageUpdateOneWithoutLastMessageRelInput
  messages: MessageUpdateManyWithoutChatInput
  participants: UserUpdateManyWithoutChatsInput
  seenInfo: SeenUpdateManyWithoutChatInput
}

input ChatUpdateManyDataInput {
  name: String
  picture: String
  type: ChatType
}

input ChatUpdateManyMutationInput {
  name: String
  picture: String
  type: ChatType
}

input ChatUpdateManyWithoutParticipantsInput {
  create: [ChatCreateWithoutParticipantsInput!]
  connect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  disconnect: [ChatWhereUniqueInput!]
  delete: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutParticipantsInput!]
  updateMany: [ChatUpdateManyWithWhereNestedInput!]
  deleteMany: [ChatScalarWhereInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutParticipantsInput!]
}

input ChatUpdateManyWithWhereNestedInput {
  where: ChatScalarWhereInput!
  data: ChatUpdateManyDataInput!
}

input ChatUpdateOneRequiredWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput
  connect: ChatWhereUniqueInput
  update: ChatUpdateWithoutMessagesDataInput
  upsert: ChatUpsertWithoutMessagesInput
}

input ChatUpdateOneRequiredWithoutSeenInfoInput {
  create: ChatCreateWithoutSeenInfoInput
  connect: ChatWhereUniqueInput
  update: ChatUpdateWithoutSeenInfoDataInput
  upsert: ChatUpsertWithoutSeenInfoInput
}

input ChatUpdateOneWithoutLastMessageInput {
  create: ChatCreateWithoutLastMessageInput
  connect: ChatWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ChatUpdateWithoutLastMessageDataInput
  upsert: ChatUpsertWithoutLastMessageInput
}

input ChatUpdateWithoutLastMessageDataInput {
  name: String
  picture: String
  type: ChatType
  messages: MessageUpdateManyWithoutChatInput
  participants: UserUpdateManyWithoutChatsInput
  seenInfo: SeenUpdateManyWithoutChatInput
}

input ChatUpdateWithoutMessagesDataInput {
  name: String
  picture: String
  type: ChatType
  lastMessage: MessageUpdateOneWithoutLastMessageRelInput
  participants: UserUpdateManyWithoutChatsInput
  seenInfo: SeenUpdateManyWithoutChatInput
}

input ChatUpdateWithoutParticipantsDataInput {
  name: String
  picture: String
  type: ChatType
  lastMessage: MessageUpdateOneWithoutLastMessageRelInput
  messages: MessageUpdateManyWithoutChatInput
  seenInfo: SeenUpdateManyWithoutChatInput
}

input ChatUpdateWithoutSeenInfoDataInput {
  name: String
  picture: String
  type: ChatType
  lastMessage: MessageUpdateOneWithoutLastMessageRelInput
  messages: MessageUpdateManyWithoutChatInput
  participants: UserUpdateManyWithoutChatsInput
}

input ChatUpdateWithWhereUniqueWithoutParticipantsInput {
  where: ChatWhereUniqueInput!
  data: ChatUpdateWithoutParticipantsDataInput!
}

input ChatUpsertWithoutLastMessageInput {
  update: ChatUpdateWithoutLastMessageDataInput!
  create: ChatCreateWithoutLastMessageInput!
}

input ChatUpsertWithoutMessagesInput {
  update: ChatUpdateWithoutMessagesDataInput!
  create: ChatCreateWithoutMessagesInput!
}

input ChatUpsertWithoutSeenInfoInput {
  update: ChatUpdateWithoutSeenInfoDataInput!
  create: ChatCreateWithoutSeenInfoInput!
}

input ChatUpsertWithWhereUniqueWithoutParticipantsInput {
  where: ChatWhereUniqueInput!
  update: ChatUpdateWithoutParticipantsDataInput!
  create: ChatCreateWithoutParticipantsInput!
}

input ChatWhereInput {
  """Logical AND on all given filters."""
  AND: [ChatWhereInput!]

  """Logical OR on all given filters."""
  OR: [ChatWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ChatWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  picture: String

  """All values that are not equal to given value."""
  picture_not: String

  """All values that are contained in given list."""
  picture_in: [String!]

  """All values that are not contained in given list."""
  picture_not_in: [String!]

  """All values less than the given value."""
  picture_lt: String

  """All values less than or equal the given value."""
  picture_lte: String

  """All values greater than the given value."""
  picture_gt: String

  """All values greater than or equal the given value."""
  picture_gte: String

  """All values containing the given string."""
  picture_contains: String

  """All values not containing the given string."""
  picture_not_contains: String

  """All values starting with the given string."""
  picture_starts_with: String

  """All values not starting with the given string."""
  picture_not_starts_with: String

  """All values ending with the given string."""
  picture_ends_with: String

  """All values not ending with the given string."""
  picture_not_ends_with: String
  type: ChatType

  """All values that are not equal to given value."""
  type_not: ChatType

  """All values that are contained in given list."""
  type_in: [ChatType!]

  """All values that are not contained in given list."""
  type_not_in: [ChatType!]
  lastMessage: MessageWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  participants_every: UserWhereInput
  participants_some: UserWhereInput
  participants_none: UserWhereInput
  seenInfo_every: SeenWhereInput
  seenInfo_some: SeenWhereInput
  seenInfo_none: SeenWhereInput
}

input ChatWhereUniqueInput {
  id: ID
}

type CreditCard implements Node {
  id: ID!
  cardOwner: User!
  createdAt: DateTime!
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
}

"""A connection to a list of items."""
type CreditCardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditCardEdge]!
  aggregate: AggregateCreditCard!
}

input CreditCardCreateInput {
  id: ID
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
  cardOwner: UserCreateOneWithoutCreditCardsInput!
}

input CreditCardCreateManyWithoutCardOwnerInput {
  create: [CreditCardCreateWithoutCardOwnerInput!]
  connect: [CreditCardWhereUniqueInput!]
}

input CreditCardCreateOneInput {
  create: CreditCardCreateInput
  connect: CreditCardWhereUniqueInput
}

input CreditCardCreateWithoutCardOwnerInput {
  id: ID
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
}

"""An edge in a connection."""
type CreditCardEdge {
  """The item at the end of the edge."""
  node: CreditCard!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CreditCardOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  stripeCardId_ASC
  stripeCardId_DESC
  brand_ASC
  brand_DESC
  country_ASC
  country_DESC
  address_city_ASC
  address_city_DESC
  address_country_ASC
  address_country_DESC
  address_line1_ASC
  address_line1_DESC
  address_line1_check_ASC
  address_line1_check_DESC
  address_line2_ASC
  address_line2_DESC
  address_state_ASC
  address_state_DESC
  address_zip_ASC
  address_zip_DESC
  address_zip_check_ASC
  address_zip_check_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  exp_month_ASC
  exp_month_DESC
  exp_year_ASC
  exp_year_DESC
  fingerprint_ASC
  fingerprint_DESC
  last4_ASC
  last4_DESC
  name_ASC
  name_DESC
  object_ASC
  object_DESC
  cvc_check_ASC
  cvc_check_DESC
  funding_ASC
  funding_DESC
}

type CreditCardPreviousValues {
  id: ID!
  createdAt: DateTime!
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
}

input CreditCardScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CreditCardScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreditCardScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreditCardScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  stripeCardId: String

  """All values that are not equal to given value."""
  stripeCardId_not: String

  """All values that are contained in given list."""
  stripeCardId_in: [String!]

  """All values that are not contained in given list."""
  stripeCardId_not_in: [String!]

  """All values less than the given value."""
  stripeCardId_lt: String

  """All values less than or equal the given value."""
  stripeCardId_lte: String

  """All values greater than the given value."""
  stripeCardId_gt: String

  """All values greater than or equal the given value."""
  stripeCardId_gte: String

  """All values containing the given string."""
  stripeCardId_contains: String

  """All values not containing the given string."""
  stripeCardId_not_contains: String

  """All values starting with the given string."""
  stripeCardId_starts_with: String

  """All values not starting with the given string."""
  stripeCardId_not_starts_with: String

  """All values ending with the given string."""
  stripeCardId_ends_with: String

  """All values not ending with the given string."""
  stripeCardId_not_ends_with: String
  brand: String

  """All values that are not equal to given value."""
  brand_not: String

  """All values that are contained in given list."""
  brand_in: [String!]

  """All values that are not contained in given list."""
  brand_not_in: [String!]

  """All values less than the given value."""
  brand_lt: String

  """All values less than or equal the given value."""
  brand_lte: String

  """All values greater than the given value."""
  brand_gt: String

  """All values greater than or equal the given value."""
  brand_gte: String

  """All values containing the given string."""
  brand_contains: String

  """All values not containing the given string."""
  brand_not_contains: String

  """All values starting with the given string."""
  brand_starts_with: String

  """All values not starting with the given string."""
  brand_not_starts_with: String

  """All values ending with the given string."""
  brand_ends_with: String

  """All values not ending with the given string."""
  brand_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  address_city: String

  """All values that are not equal to given value."""
  address_city_not: String

  """All values that are contained in given list."""
  address_city_in: [String!]

  """All values that are not contained in given list."""
  address_city_not_in: [String!]

  """All values less than the given value."""
  address_city_lt: String

  """All values less than or equal the given value."""
  address_city_lte: String

  """All values greater than the given value."""
  address_city_gt: String

  """All values greater than or equal the given value."""
  address_city_gte: String

  """All values containing the given string."""
  address_city_contains: String

  """All values not containing the given string."""
  address_city_not_contains: String

  """All values starting with the given string."""
  address_city_starts_with: String

  """All values not starting with the given string."""
  address_city_not_starts_with: String

  """All values ending with the given string."""
  address_city_ends_with: String

  """All values not ending with the given string."""
  address_city_not_ends_with: String
  address_country: String

  """All values that are not equal to given value."""
  address_country_not: String

  """All values that are contained in given list."""
  address_country_in: [String!]

  """All values that are not contained in given list."""
  address_country_not_in: [String!]

  """All values less than the given value."""
  address_country_lt: String

  """All values less than or equal the given value."""
  address_country_lte: String

  """All values greater than the given value."""
  address_country_gt: String

  """All values greater than or equal the given value."""
  address_country_gte: String

  """All values containing the given string."""
  address_country_contains: String

  """All values not containing the given string."""
  address_country_not_contains: String

  """All values starting with the given string."""
  address_country_starts_with: String

  """All values not starting with the given string."""
  address_country_not_starts_with: String

  """All values ending with the given string."""
  address_country_ends_with: String

  """All values not ending with the given string."""
  address_country_not_ends_with: String
  address_line1: String

  """All values that are not equal to given value."""
  address_line1_not: String

  """All values that are contained in given list."""
  address_line1_in: [String!]

  """All values that are not contained in given list."""
  address_line1_not_in: [String!]

  """All values less than the given value."""
  address_line1_lt: String

  """All values less than or equal the given value."""
  address_line1_lte: String

  """All values greater than the given value."""
  address_line1_gt: String

  """All values greater than or equal the given value."""
  address_line1_gte: String

  """All values containing the given string."""
  address_line1_contains: String

  """All values not containing the given string."""
  address_line1_not_contains: String

  """All values starting with the given string."""
  address_line1_starts_with: String

  """All values not starting with the given string."""
  address_line1_not_starts_with: String

  """All values ending with the given string."""
  address_line1_ends_with: String

  """All values not ending with the given string."""
  address_line1_not_ends_with: String
  address_line1_check: String

  """All values that are not equal to given value."""
  address_line1_check_not: String

  """All values that are contained in given list."""
  address_line1_check_in: [String!]

  """All values that are not contained in given list."""
  address_line1_check_not_in: [String!]

  """All values less than the given value."""
  address_line1_check_lt: String

  """All values less than or equal the given value."""
  address_line1_check_lte: String

  """All values greater than the given value."""
  address_line1_check_gt: String

  """All values greater than or equal the given value."""
  address_line1_check_gte: String

  """All values containing the given string."""
  address_line1_check_contains: String

  """All values not containing the given string."""
  address_line1_check_not_contains: String

  """All values starting with the given string."""
  address_line1_check_starts_with: String

  """All values not starting with the given string."""
  address_line1_check_not_starts_with: String

  """All values ending with the given string."""
  address_line1_check_ends_with: String

  """All values not ending with the given string."""
  address_line1_check_not_ends_with: String
  address_line2: String

  """All values that are not equal to given value."""
  address_line2_not: String

  """All values that are contained in given list."""
  address_line2_in: [String!]

  """All values that are not contained in given list."""
  address_line2_not_in: [String!]

  """All values less than the given value."""
  address_line2_lt: String

  """All values less than or equal the given value."""
  address_line2_lte: String

  """All values greater than the given value."""
  address_line2_gt: String

  """All values greater than or equal the given value."""
  address_line2_gte: String

  """All values containing the given string."""
  address_line2_contains: String

  """All values not containing the given string."""
  address_line2_not_contains: String

  """All values starting with the given string."""
  address_line2_starts_with: String

  """All values not starting with the given string."""
  address_line2_not_starts_with: String

  """All values ending with the given string."""
  address_line2_ends_with: String

  """All values not ending with the given string."""
  address_line2_not_ends_with: String
  address_state: String

  """All values that are not equal to given value."""
  address_state_not: String

  """All values that are contained in given list."""
  address_state_in: [String!]

  """All values that are not contained in given list."""
  address_state_not_in: [String!]

  """All values less than the given value."""
  address_state_lt: String

  """All values less than or equal the given value."""
  address_state_lte: String

  """All values greater than the given value."""
  address_state_gt: String

  """All values greater than or equal the given value."""
  address_state_gte: String

  """All values containing the given string."""
  address_state_contains: String

  """All values not containing the given string."""
  address_state_not_contains: String

  """All values starting with the given string."""
  address_state_starts_with: String

  """All values not starting with the given string."""
  address_state_not_starts_with: String

  """All values ending with the given string."""
  address_state_ends_with: String

  """All values not ending with the given string."""
  address_state_not_ends_with: String
  address_zip: String

  """All values that are not equal to given value."""
  address_zip_not: String

  """All values that are contained in given list."""
  address_zip_in: [String!]

  """All values that are not contained in given list."""
  address_zip_not_in: [String!]

  """All values less than the given value."""
  address_zip_lt: String

  """All values less than or equal the given value."""
  address_zip_lte: String

  """All values greater than the given value."""
  address_zip_gt: String

  """All values greater than or equal the given value."""
  address_zip_gte: String

  """All values containing the given string."""
  address_zip_contains: String

  """All values not containing the given string."""
  address_zip_not_contains: String

  """All values starting with the given string."""
  address_zip_starts_with: String

  """All values not starting with the given string."""
  address_zip_not_starts_with: String

  """All values ending with the given string."""
  address_zip_ends_with: String

  """All values not ending with the given string."""
  address_zip_not_ends_with: String
  address_zip_check: String

  """All values that are not equal to given value."""
  address_zip_check_not: String

  """All values that are contained in given list."""
  address_zip_check_in: [String!]

  """All values that are not contained in given list."""
  address_zip_check_not_in: [String!]

  """All values less than the given value."""
  address_zip_check_lt: String

  """All values less than or equal the given value."""
  address_zip_check_lte: String

  """All values greater than the given value."""
  address_zip_check_gt: String

  """All values greater than or equal the given value."""
  address_zip_check_gte: String

  """All values containing the given string."""
  address_zip_check_contains: String

  """All values not containing the given string."""
  address_zip_check_not_contains: String

  """All values starting with the given string."""
  address_zip_check_starts_with: String

  """All values not starting with the given string."""
  address_zip_check_not_starts_with: String

  """All values ending with the given string."""
  address_zip_check_ends_with: String

  """All values not ending with the given string."""
  address_zip_check_not_ends_with: String
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  exp_month: Int

  """All values that are not equal to given value."""
  exp_month_not: Int

  """All values that are contained in given list."""
  exp_month_in: [Int!]

  """All values that are not contained in given list."""
  exp_month_not_in: [Int!]

  """All values less than the given value."""
  exp_month_lt: Int

  """All values less than or equal the given value."""
  exp_month_lte: Int

  """All values greater than the given value."""
  exp_month_gt: Int

  """All values greater than or equal the given value."""
  exp_month_gte: Int
  exp_year: Int

  """All values that are not equal to given value."""
  exp_year_not: Int

  """All values that are contained in given list."""
  exp_year_in: [Int!]

  """All values that are not contained in given list."""
  exp_year_not_in: [Int!]

  """All values less than the given value."""
  exp_year_lt: Int

  """All values less than or equal the given value."""
  exp_year_lte: Int

  """All values greater than the given value."""
  exp_year_gt: Int

  """All values greater than or equal the given value."""
  exp_year_gte: Int
  fingerprint: String

  """All values that are not equal to given value."""
  fingerprint_not: String

  """All values that are contained in given list."""
  fingerprint_in: [String!]

  """All values that are not contained in given list."""
  fingerprint_not_in: [String!]

  """All values less than the given value."""
  fingerprint_lt: String

  """All values less than or equal the given value."""
  fingerprint_lte: String

  """All values greater than the given value."""
  fingerprint_gt: String

  """All values greater than or equal the given value."""
  fingerprint_gte: String

  """All values containing the given string."""
  fingerprint_contains: String

  """All values not containing the given string."""
  fingerprint_not_contains: String

  """All values starting with the given string."""
  fingerprint_starts_with: String

  """All values not starting with the given string."""
  fingerprint_not_starts_with: String

  """All values ending with the given string."""
  fingerprint_ends_with: String

  """All values not ending with the given string."""
  fingerprint_not_ends_with: String
  last4: String

  """All values that are not equal to given value."""
  last4_not: String

  """All values that are contained in given list."""
  last4_in: [String!]

  """All values that are not contained in given list."""
  last4_not_in: [String!]

  """All values less than the given value."""
  last4_lt: String

  """All values less than or equal the given value."""
  last4_lte: String

  """All values greater than the given value."""
  last4_gt: String

  """All values greater than or equal the given value."""
  last4_gte: String

  """All values containing the given string."""
  last4_contains: String

  """All values not containing the given string."""
  last4_not_contains: String

  """All values starting with the given string."""
  last4_starts_with: String

  """All values not starting with the given string."""
  last4_not_starts_with: String

  """All values ending with the given string."""
  last4_ends_with: String

  """All values not ending with the given string."""
  last4_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  object: String

  """All values that are not equal to given value."""
  object_not: String

  """All values that are contained in given list."""
  object_in: [String!]

  """All values that are not contained in given list."""
  object_not_in: [String!]

  """All values less than the given value."""
  object_lt: String

  """All values less than or equal the given value."""
  object_lte: String

  """All values greater than the given value."""
  object_gt: String

  """All values greater than or equal the given value."""
  object_gte: String

  """All values containing the given string."""
  object_contains: String

  """All values not containing the given string."""
  object_not_contains: String

  """All values starting with the given string."""
  object_starts_with: String

  """All values not starting with the given string."""
  object_not_starts_with: String

  """All values ending with the given string."""
  object_ends_with: String

  """All values not ending with the given string."""
  object_not_ends_with: String
  cvc_check: String

  """All values that are not equal to given value."""
  cvc_check_not: String

  """All values that are contained in given list."""
  cvc_check_in: [String!]

  """All values that are not contained in given list."""
  cvc_check_not_in: [String!]

  """All values less than the given value."""
  cvc_check_lt: String

  """All values less than or equal the given value."""
  cvc_check_lte: String

  """All values greater than the given value."""
  cvc_check_gt: String

  """All values greater than or equal the given value."""
  cvc_check_gte: String

  """All values containing the given string."""
  cvc_check_contains: String

  """All values not containing the given string."""
  cvc_check_not_contains: String

  """All values starting with the given string."""
  cvc_check_starts_with: String

  """All values not starting with the given string."""
  cvc_check_not_starts_with: String

  """All values ending with the given string."""
  cvc_check_ends_with: String

  """All values not ending with the given string."""
  cvc_check_not_ends_with: String
  funding: String

  """All values that are not equal to given value."""
  funding_not: String

  """All values that are contained in given list."""
  funding_in: [String!]

  """All values that are not contained in given list."""
  funding_not_in: [String!]

  """All values less than the given value."""
  funding_lt: String

  """All values less than or equal the given value."""
  funding_lte: String

  """All values greater than the given value."""
  funding_gt: String

  """All values greater than or equal the given value."""
  funding_gte: String

  """All values containing the given string."""
  funding_contains: String

  """All values not containing the given string."""
  funding_not_contains: String

  """All values starting with the given string."""
  funding_starts_with: String

  """All values not starting with the given string."""
  funding_not_starts_with: String

  """All values ending with the given string."""
  funding_ends_with: String

  """All values not ending with the given string."""
  funding_not_ends_with: String
}

type CreditCardSubscriptionPayload {
  mutation: MutationType!
  node: CreditCard
  updatedFields: [String!]
  previousValues: CreditCardPreviousValues
}

input CreditCardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CreditCardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreditCardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreditCardSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CreditCardWhereInput
}

input CreditCardUpdateDataInput {
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
  cardOwner: UserUpdateOneRequiredWithoutCreditCardsInput
}

input CreditCardUpdateInput {
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
  cardOwner: UserUpdateOneRequiredWithoutCreditCardsInput
}

input CreditCardUpdateManyDataInput {
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
}

input CreditCardUpdateManyMutationInput {
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
}

input CreditCardUpdateManyWithoutCardOwnerInput {
  create: [CreditCardCreateWithoutCardOwnerInput!]
  connect: [CreditCardWhereUniqueInput!]
  set: [CreditCardWhereUniqueInput!]
  disconnect: [CreditCardWhereUniqueInput!]
  delete: [CreditCardWhereUniqueInput!]
  update: [CreditCardUpdateWithWhereUniqueWithoutCardOwnerInput!]
  updateMany: [CreditCardUpdateManyWithWhereNestedInput!]
  deleteMany: [CreditCardScalarWhereInput!]
  upsert: [CreditCardUpsertWithWhereUniqueWithoutCardOwnerInput!]
}

input CreditCardUpdateManyWithWhereNestedInput {
  where: CreditCardScalarWhereInput!
  data: CreditCardUpdateManyDataInput!
}

input CreditCardUpdateOneInput {
  create: CreditCardCreateInput
  connect: CreditCardWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CreditCardUpdateDataInput
  upsert: CreditCardUpsertNestedInput
}

input CreditCardUpdateWithoutCardOwnerDataInput {
  stripeCardId: String
  brand: String
  country: String
  address_city: String
  address_country: String
  address_line1: String
  address_line1_check: String
  address_line2: String
  address_state: String
  address_zip: String
  address_zip_check: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  object: String
  cvc_check: String
  funding: String
}

input CreditCardUpdateWithWhereUniqueWithoutCardOwnerInput {
  where: CreditCardWhereUniqueInput!
  data: CreditCardUpdateWithoutCardOwnerDataInput!
}

input CreditCardUpsertNestedInput {
  update: CreditCardUpdateDataInput!
  create: CreditCardCreateInput!
}

input CreditCardUpsertWithWhereUniqueWithoutCardOwnerInput {
  where: CreditCardWhereUniqueInput!
  update: CreditCardUpdateWithoutCardOwnerDataInput!
  create: CreditCardCreateWithoutCardOwnerInput!
}

input CreditCardWhereInput {
  """Logical AND on all given filters."""
  AND: [CreditCardWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreditCardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreditCardWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  stripeCardId: String

  """All values that are not equal to given value."""
  stripeCardId_not: String

  """All values that are contained in given list."""
  stripeCardId_in: [String!]

  """All values that are not contained in given list."""
  stripeCardId_not_in: [String!]

  """All values less than the given value."""
  stripeCardId_lt: String

  """All values less than or equal the given value."""
  stripeCardId_lte: String

  """All values greater than the given value."""
  stripeCardId_gt: String

  """All values greater than or equal the given value."""
  stripeCardId_gte: String

  """All values containing the given string."""
  stripeCardId_contains: String

  """All values not containing the given string."""
  stripeCardId_not_contains: String

  """All values starting with the given string."""
  stripeCardId_starts_with: String

  """All values not starting with the given string."""
  stripeCardId_not_starts_with: String

  """All values ending with the given string."""
  stripeCardId_ends_with: String

  """All values not ending with the given string."""
  stripeCardId_not_ends_with: String
  brand: String

  """All values that are not equal to given value."""
  brand_not: String

  """All values that are contained in given list."""
  brand_in: [String!]

  """All values that are not contained in given list."""
  brand_not_in: [String!]

  """All values less than the given value."""
  brand_lt: String

  """All values less than or equal the given value."""
  brand_lte: String

  """All values greater than the given value."""
  brand_gt: String

  """All values greater than or equal the given value."""
  brand_gte: String

  """All values containing the given string."""
  brand_contains: String

  """All values not containing the given string."""
  brand_not_contains: String

  """All values starting with the given string."""
  brand_starts_with: String

  """All values not starting with the given string."""
  brand_not_starts_with: String

  """All values ending with the given string."""
  brand_ends_with: String

  """All values not ending with the given string."""
  brand_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  address_city: String

  """All values that are not equal to given value."""
  address_city_not: String

  """All values that are contained in given list."""
  address_city_in: [String!]

  """All values that are not contained in given list."""
  address_city_not_in: [String!]

  """All values less than the given value."""
  address_city_lt: String

  """All values less than or equal the given value."""
  address_city_lte: String

  """All values greater than the given value."""
  address_city_gt: String

  """All values greater than or equal the given value."""
  address_city_gte: String

  """All values containing the given string."""
  address_city_contains: String

  """All values not containing the given string."""
  address_city_not_contains: String

  """All values starting with the given string."""
  address_city_starts_with: String

  """All values not starting with the given string."""
  address_city_not_starts_with: String

  """All values ending with the given string."""
  address_city_ends_with: String

  """All values not ending with the given string."""
  address_city_not_ends_with: String
  address_country: String

  """All values that are not equal to given value."""
  address_country_not: String

  """All values that are contained in given list."""
  address_country_in: [String!]

  """All values that are not contained in given list."""
  address_country_not_in: [String!]

  """All values less than the given value."""
  address_country_lt: String

  """All values less than or equal the given value."""
  address_country_lte: String

  """All values greater than the given value."""
  address_country_gt: String

  """All values greater than or equal the given value."""
  address_country_gte: String

  """All values containing the given string."""
  address_country_contains: String

  """All values not containing the given string."""
  address_country_not_contains: String

  """All values starting with the given string."""
  address_country_starts_with: String

  """All values not starting with the given string."""
  address_country_not_starts_with: String

  """All values ending with the given string."""
  address_country_ends_with: String

  """All values not ending with the given string."""
  address_country_not_ends_with: String
  address_line1: String

  """All values that are not equal to given value."""
  address_line1_not: String

  """All values that are contained in given list."""
  address_line1_in: [String!]

  """All values that are not contained in given list."""
  address_line1_not_in: [String!]

  """All values less than the given value."""
  address_line1_lt: String

  """All values less than or equal the given value."""
  address_line1_lte: String

  """All values greater than the given value."""
  address_line1_gt: String

  """All values greater than or equal the given value."""
  address_line1_gte: String

  """All values containing the given string."""
  address_line1_contains: String

  """All values not containing the given string."""
  address_line1_not_contains: String

  """All values starting with the given string."""
  address_line1_starts_with: String

  """All values not starting with the given string."""
  address_line1_not_starts_with: String

  """All values ending with the given string."""
  address_line1_ends_with: String

  """All values not ending with the given string."""
  address_line1_not_ends_with: String
  address_line1_check: String

  """All values that are not equal to given value."""
  address_line1_check_not: String

  """All values that are contained in given list."""
  address_line1_check_in: [String!]

  """All values that are not contained in given list."""
  address_line1_check_not_in: [String!]

  """All values less than the given value."""
  address_line1_check_lt: String

  """All values less than or equal the given value."""
  address_line1_check_lte: String

  """All values greater than the given value."""
  address_line1_check_gt: String

  """All values greater than or equal the given value."""
  address_line1_check_gte: String

  """All values containing the given string."""
  address_line1_check_contains: String

  """All values not containing the given string."""
  address_line1_check_not_contains: String

  """All values starting with the given string."""
  address_line1_check_starts_with: String

  """All values not starting with the given string."""
  address_line1_check_not_starts_with: String

  """All values ending with the given string."""
  address_line1_check_ends_with: String

  """All values not ending with the given string."""
  address_line1_check_not_ends_with: String
  address_line2: String

  """All values that are not equal to given value."""
  address_line2_not: String

  """All values that are contained in given list."""
  address_line2_in: [String!]

  """All values that are not contained in given list."""
  address_line2_not_in: [String!]

  """All values less than the given value."""
  address_line2_lt: String

  """All values less than or equal the given value."""
  address_line2_lte: String

  """All values greater than the given value."""
  address_line2_gt: String

  """All values greater than or equal the given value."""
  address_line2_gte: String

  """All values containing the given string."""
  address_line2_contains: String

  """All values not containing the given string."""
  address_line2_not_contains: String

  """All values starting with the given string."""
  address_line2_starts_with: String

  """All values not starting with the given string."""
  address_line2_not_starts_with: String

  """All values ending with the given string."""
  address_line2_ends_with: String

  """All values not ending with the given string."""
  address_line2_not_ends_with: String
  address_state: String

  """All values that are not equal to given value."""
  address_state_not: String

  """All values that are contained in given list."""
  address_state_in: [String!]

  """All values that are not contained in given list."""
  address_state_not_in: [String!]

  """All values less than the given value."""
  address_state_lt: String

  """All values less than or equal the given value."""
  address_state_lte: String

  """All values greater than the given value."""
  address_state_gt: String

  """All values greater than or equal the given value."""
  address_state_gte: String

  """All values containing the given string."""
  address_state_contains: String

  """All values not containing the given string."""
  address_state_not_contains: String

  """All values starting with the given string."""
  address_state_starts_with: String

  """All values not starting with the given string."""
  address_state_not_starts_with: String

  """All values ending with the given string."""
  address_state_ends_with: String

  """All values not ending with the given string."""
  address_state_not_ends_with: String
  address_zip: String

  """All values that are not equal to given value."""
  address_zip_not: String

  """All values that are contained in given list."""
  address_zip_in: [String!]

  """All values that are not contained in given list."""
  address_zip_not_in: [String!]

  """All values less than the given value."""
  address_zip_lt: String

  """All values less than or equal the given value."""
  address_zip_lte: String

  """All values greater than the given value."""
  address_zip_gt: String

  """All values greater than or equal the given value."""
  address_zip_gte: String

  """All values containing the given string."""
  address_zip_contains: String

  """All values not containing the given string."""
  address_zip_not_contains: String

  """All values starting with the given string."""
  address_zip_starts_with: String

  """All values not starting with the given string."""
  address_zip_not_starts_with: String

  """All values ending with the given string."""
  address_zip_ends_with: String

  """All values not ending with the given string."""
  address_zip_not_ends_with: String
  address_zip_check: String

  """All values that are not equal to given value."""
  address_zip_check_not: String

  """All values that are contained in given list."""
  address_zip_check_in: [String!]

  """All values that are not contained in given list."""
  address_zip_check_not_in: [String!]

  """All values less than the given value."""
  address_zip_check_lt: String

  """All values less than or equal the given value."""
  address_zip_check_lte: String

  """All values greater than the given value."""
  address_zip_check_gt: String

  """All values greater than or equal the given value."""
  address_zip_check_gte: String

  """All values containing the given string."""
  address_zip_check_contains: String

  """All values not containing the given string."""
  address_zip_check_not_contains: String

  """All values starting with the given string."""
  address_zip_check_starts_with: String

  """All values not starting with the given string."""
  address_zip_check_not_starts_with: String

  """All values ending with the given string."""
  address_zip_check_ends_with: String

  """All values not ending with the given string."""
  address_zip_check_not_ends_with: String
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  exp_month: Int

  """All values that are not equal to given value."""
  exp_month_not: Int

  """All values that are contained in given list."""
  exp_month_in: [Int!]

  """All values that are not contained in given list."""
  exp_month_not_in: [Int!]

  """All values less than the given value."""
  exp_month_lt: Int

  """All values less than or equal the given value."""
  exp_month_lte: Int

  """All values greater than the given value."""
  exp_month_gt: Int

  """All values greater than or equal the given value."""
  exp_month_gte: Int
  exp_year: Int

  """All values that are not equal to given value."""
  exp_year_not: Int

  """All values that are contained in given list."""
  exp_year_in: [Int!]

  """All values that are not contained in given list."""
  exp_year_not_in: [Int!]

  """All values less than the given value."""
  exp_year_lt: Int

  """All values less than or equal the given value."""
  exp_year_lte: Int

  """All values greater than the given value."""
  exp_year_gt: Int

  """All values greater than or equal the given value."""
  exp_year_gte: Int
  fingerprint: String

  """All values that are not equal to given value."""
  fingerprint_not: String

  """All values that are contained in given list."""
  fingerprint_in: [String!]

  """All values that are not contained in given list."""
  fingerprint_not_in: [String!]

  """All values less than the given value."""
  fingerprint_lt: String

  """All values less than or equal the given value."""
  fingerprint_lte: String

  """All values greater than the given value."""
  fingerprint_gt: String

  """All values greater than or equal the given value."""
  fingerprint_gte: String

  """All values containing the given string."""
  fingerprint_contains: String

  """All values not containing the given string."""
  fingerprint_not_contains: String

  """All values starting with the given string."""
  fingerprint_starts_with: String

  """All values not starting with the given string."""
  fingerprint_not_starts_with: String

  """All values ending with the given string."""
  fingerprint_ends_with: String

  """All values not ending with the given string."""
  fingerprint_not_ends_with: String
  last4: String

  """All values that are not equal to given value."""
  last4_not: String

  """All values that are contained in given list."""
  last4_in: [String!]

  """All values that are not contained in given list."""
  last4_not_in: [String!]

  """All values less than the given value."""
  last4_lt: String

  """All values less than or equal the given value."""
  last4_lte: String

  """All values greater than the given value."""
  last4_gt: String

  """All values greater than or equal the given value."""
  last4_gte: String

  """All values containing the given string."""
  last4_contains: String

  """All values not containing the given string."""
  last4_not_contains: String

  """All values starting with the given string."""
  last4_starts_with: String

  """All values not starting with the given string."""
  last4_not_starts_with: String

  """All values ending with the given string."""
  last4_ends_with: String

  """All values not ending with the given string."""
  last4_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  object: String

  """All values that are not equal to given value."""
  object_not: String

  """All values that are contained in given list."""
  object_in: [String!]

  """All values that are not contained in given list."""
  object_not_in: [String!]

  """All values less than the given value."""
  object_lt: String

  """All values less than or equal the given value."""
  object_lte: String

  """All values greater than the given value."""
  object_gt: String

  """All values greater than or equal the given value."""
  object_gte: String

  """All values containing the given string."""
  object_contains: String

  """All values not containing the given string."""
  object_not_contains: String

  """All values starting with the given string."""
  object_starts_with: String

  """All values not starting with the given string."""
  object_not_starts_with: String

  """All values ending with the given string."""
  object_ends_with: String

  """All values not ending with the given string."""
  object_not_ends_with: String
  cvc_check: String

  """All values that are not equal to given value."""
  cvc_check_not: String

  """All values that are contained in given list."""
  cvc_check_in: [String!]

  """All values that are not contained in given list."""
  cvc_check_not_in: [String!]

  """All values less than the given value."""
  cvc_check_lt: String

  """All values less than or equal the given value."""
  cvc_check_lte: String

  """All values greater than the given value."""
  cvc_check_gt: String

  """All values greater than or equal the given value."""
  cvc_check_gte: String

  """All values containing the given string."""
  cvc_check_contains: String

  """All values not containing the given string."""
  cvc_check_not_contains: String

  """All values starting with the given string."""
  cvc_check_starts_with: String

  """All values not starting with the given string."""
  cvc_check_not_starts_with: String

  """All values ending with the given string."""
  cvc_check_ends_with: String

  """All values not ending with the given string."""
  cvc_check_not_ends_with: String
  funding: String

  """All values that are not equal to given value."""
  funding_not: String

  """All values that are contained in given list."""
  funding_in: [String!]

  """All values that are not contained in given list."""
  funding_not_in: [String!]

  """All values less than the given value."""
  funding_lt: String

  """All values less than or equal the given value."""
  funding_lte: String

  """All values greater than the given value."""
  funding_gt: String

  """All values greater than or equal the given value."""
  funding_gte: String

  """All values containing the given string."""
  funding_contains: String

  """All values not containing the given string."""
  funding_not_contains: String

  """All values starting with the given string."""
  funding_starts_with: String

  """All values not starting with the given string."""
  funding_not_starts_with: String

  """All values ending with the given string."""
  funding_ends_with: String

  """All values not ending with the given string."""
  funding_not_ends_with: String
  cardOwner: UserWhereInput
}

input CreditCardWhereUniqueInput {
  id: ID
  stripeCardId: String
}

scalar DateTime

type File implements Node {
  id: ID!
  updatedAt: DateTime
  createdAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
  userPhotoId: User
  userProfilePhoto: User
  userSignature: User
  preTenancyProofOfAddress: PreTenancyForm
  userProofOfAddress: User
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
  userPhotoId: UserCreateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserCreateOneWithoutProfilePhotoInput
  userSignature: UserCreateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormCreateOneWithoutProofOfAddressInput
  userProofOfAddress: UserCreateOneWithoutProofOfAddressInput
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneWithoutPreTenancyProofOfAddressInput {
  create: FileCreateWithoutPreTenancyProofOfAddressInput
  connect: FileWhereUniqueInput
}

input FileCreateOneWithoutUserPhotoIdInput {
  create: FileCreateWithoutUserPhotoIdInput
  connect: FileWhereUniqueInput
}

input FileCreateOneWithoutUserProfilePhotoInput {
  create: FileCreateWithoutUserProfilePhotoInput
  connect: FileWhereUniqueInput
}

input FileCreateOneWithoutUserProofOfAddressInput {
  create: FileCreateWithoutUserProofOfAddressInput
  connect: FileWhereUniqueInput
}

input FileCreateOneWithoutUserSignatureInput {
  create: FileCreateWithoutUserSignatureInput
  connect: FileWhereUniqueInput
}

input FileCreateWithoutPreTenancyProofOfAddressInput {
  id: ID
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
  userPhotoId: UserCreateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserCreateOneWithoutProfilePhotoInput
  userSignature: UserCreateOneWithoutSignatureInput
  userProofOfAddress: UserCreateOneWithoutProofOfAddressInput
}

input FileCreateWithoutUserPhotoIdInput {
  id: ID
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
  userProfilePhoto: UserCreateOneWithoutProfilePhotoInput
  userSignature: UserCreateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormCreateOneWithoutProofOfAddressInput
  userProofOfAddress: UserCreateOneWithoutProofOfAddressInput
}

input FileCreateWithoutUserProfilePhotoInput {
  id: ID
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
  userPhotoId: UserCreateOneWithoutPhotoIdentificationInput
  userSignature: UserCreateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormCreateOneWithoutProofOfAddressInput
  userProofOfAddress: UserCreateOneWithoutProofOfAddressInput
}

input FileCreateWithoutUserProofOfAddressInput {
  id: ID
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
  userPhotoId: UserCreateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserCreateOneWithoutProfilePhotoInput
  userSignature: UserCreateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormCreateOneWithoutProofOfAddressInput
}

input FileCreateWithoutUserSignatureInput {
  id: ID
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
  userPhotoId: UserCreateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserCreateOneWithoutProfilePhotoInput
  preTenancyProofOfAddress: PreTenancyFormCreateOneWithoutProofOfAddressInput
  userProofOfAddress: UserCreateOneWithoutProofOfAddressInput
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  updatedAt: DateTime
  createdAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
}

input FileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
  userPhotoId: UserUpdateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserUpdateOneWithoutProfilePhotoInput
  userSignature: UserUpdateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormUpdateOneWithoutProofOfAddressInput
  userProofOfAddress: UserUpdateOneWithoutProofOfAddressInput
}

input FileUpdateInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
  userPhotoId: UserUpdateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserUpdateOneWithoutProfilePhotoInput
  userSignature: UserUpdateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormUpdateOneWithoutProofOfAddressInput
  userProofOfAddress: UserUpdateOneWithoutProofOfAddressInput
}

input FileUpdateManyDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
  deleteMany: [FileScalarWhereInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
}

input FileUpdateManyMutationInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateOneWithoutPreTenancyProofOfAddressInput {
  create: FileCreateWithoutPreTenancyProofOfAddressInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutPreTenancyProofOfAddressDataInput
  upsert: FileUpsertWithoutPreTenancyProofOfAddressInput
}

input FileUpdateOneWithoutUserPhotoIdInput {
  create: FileCreateWithoutUserPhotoIdInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutUserPhotoIdDataInput
  upsert: FileUpsertWithoutUserPhotoIdInput
}

input FileUpdateOneWithoutUserProfilePhotoInput {
  create: FileCreateWithoutUserProfilePhotoInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutUserProfilePhotoDataInput
  upsert: FileUpsertWithoutUserProfilePhotoInput
}

input FileUpdateOneWithoutUserProofOfAddressInput {
  create: FileCreateWithoutUserProofOfAddressInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutUserProofOfAddressDataInput
  upsert: FileUpsertWithoutUserProofOfAddressInput
}

input FileUpdateOneWithoutUserSignatureInput {
  create: FileCreateWithoutUserSignatureInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateWithoutUserSignatureDataInput
  upsert: FileUpsertWithoutUserSignatureInput
}

input FileUpdateWithoutPreTenancyProofOfAddressDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
  userPhotoId: UserUpdateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserUpdateOneWithoutProfilePhotoInput
  userSignature: UserUpdateOneWithoutSignatureInput
  userProofOfAddress: UserUpdateOneWithoutProofOfAddressInput
}

input FileUpdateWithoutUserPhotoIdDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
  userProfilePhoto: UserUpdateOneWithoutProfilePhotoInput
  userSignature: UserUpdateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormUpdateOneWithoutProofOfAddressInput
  userProofOfAddress: UserUpdateOneWithoutProofOfAddressInput
}

input FileUpdateWithoutUserProfilePhotoDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
  userPhotoId: UserUpdateOneWithoutPhotoIdentificationInput
  userSignature: UserUpdateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormUpdateOneWithoutProofOfAddressInput
  userProofOfAddress: UserUpdateOneWithoutProofOfAddressInput
}

input FileUpdateWithoutUserProofOfAddressDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
  userPhotoId: UserUpdateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserUpdateOneWithoutProfilePhotoInput
  userSignature: UserUpdateOneWithoutSignatureInput
  preTenancyProofOfAddress: PreTenancyFormUpdateOneWithoutProofOfAddressInput
}

input FileUpdateWithoutUserSignatureDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
  userPhotoId: UserUpdateOneWithoutPhotoIdentificationInput
  userProfilePhoto: UserUpdateOneWithoutProfilePhotoInput
  preTenancyProofOfAddress: PreTenancyFormUpdateOneWithoutProofOfAddressInput
  userProofOfAddress: UserUpdateOneWithoutProofOfAddressInput
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpsertWithoutPreTenancyProofOfAddressInput {
  update: FileUpdateWithoutPreTenancyProofOfAddressDataInput!
  create: FileCreateWithoutPreTenancyProofOfAddressInput!
}

input FileUpsertWithoutUserPhotoIdInput {
  update: FileUpdateWithoutUserPhotoIdDataInput!
  create: FileCreateWithoutUserPhotoIdInput!
}

input FileUpsertWithoutUserProfilePhotoInput {
  update: FileUpdateWithoutUserProfilePhotoDataInput!
  create: FileCreateWithoutUserProfilePhotoInput!
}

input FileUpsertWithoutUserProofOfAddressInput {
  update: FileUpdateWithoutUserProofOfAddressDataInput!
  create: FileCreateWithoutUserProofOfAddressInput!
}

input FileUpsertWithoutUserSignatureInput {
  update: FileUpdateWithoutUserSignatureDataInput!
  create: FileCreateWithoutUserSignatureInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
  userPhotoId: UserWhereInput
  userProfilePhoto: UserWhereInput
  userSignature: UserWhereInput
  preTenancyProofOfAddress: PreTenancyFormWhereInput
  userProofOfAddress: UserWhereInput
}

input FileWhereUniqueInput {
  id: ID
}

type FriendRequest implements Node {
  id: ID!
  requestUser: User!
  acceptingUser: User!
}

"""A connection to a list of items."""
type FriendRequestConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FriendRequestEdge]!
  aggregate: AggregateFriendRequest!
}

input FriendRequestCreateInput {
  id: ID
  requestUser: UserCreateOneWithoutAwaitingFriendsInput!
  acceptingUser: UserCreateOneWithoutFriendRequestsInput!
}

input FriendRequestCreateManyWithoutAcceptingUserInput {
  create: [FriendRequestCreateWithoutAcceptingUserInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateManyWithoutRequestUserInput {
  create: [FriendRequestCreateWithoutRequestUserInput!]
  connect: [FriendRequestWhereUniqueInput!]
}

input FriendRequestCreateWithoutAcceptingUserInput {
  id: ID
  requestUser: UserCreateOneWithoutAwaitingFriendsInput!
}

input FriendRequestCreateWithoutRequestUserInput {
  id: ID
  acceptingUser: UserCreateOneWithoutFriendRequestsInput!
}

"""An edge in a connection."""
type FriendRequestEdge {
  """The item at the end of the edge."""
  node: FriendRequest!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FriendRequestOrderByInput {
  id_ASC
  id_DESC
}

type FriendRequestPreviousValues {
  id: ID!
}

input FriendRequestScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FriendRequestScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FriendRequestScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FriendRequestScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
}

type FriendRequestSubscriptionPayload {
  mutation: MutationType!
  node: FriendRequest
  updatedFields: [String!]
  previousValues: FriendRequestPreviousValues
}

input FriendRequestSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FriendRequestSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FriendRequestSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FriendRequestSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FriendRequestWhereInput
}

input FriendRequestUpdateInput {
  requestUser: UserUpdateOneRequiredWithoutAwaitingFriendsInput
  acceptingUser: UserUpdateOneRequiredWithoutFriendRequestsInput
}

input FriendRequestUpdateManyWithoutAcceptingUserInput {
  create: [FriendRequestCreateWithoutAcceptingUserInput!]
  connect: [FriendRequestWhereUniqueInput!]
  set: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  delete: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutAcceptingUserInput!]
  deleteMany: [FriendRequestScalarWhereInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutAcceptingUserInput!]
}

input FriendRequestUpdateManyWithoutRequestUserInput {
  create: [FriendRequestCreateWithoutRequestUserInput!]
  connect: [FriendRequestWhereUniqueInput!]
  set: [FriendRequestWhereUniqueInput!]
  disconnect: [FriendRequestWhereUniqueInput!]
  delete: [FriendRequestWhereUniqueInput!]
  update: [FriendRequestUpdateWithWhereUniqueWithoutRequestUserInput!]
  deleteMany: [FriendRequestScalarWhereInput!]
  upsert: [FriendRequestUpsertWithWhereUniqueWithoutRequestUserInput!]
}

input FriendRequestUpdateWithoutAcceptingUserDataInput {
  requestUser: UserUpdateOneRequiredWithoutAwaitingFriendsInput
}

input FriendRequestUpdateWithoutRequestUserDataInput {
  acceptingUser: UserUpdateOneRequiredWithoutFriendRequestsInput
}

input FriendRequestUpdateWithWhereUniqueWithoutAcceptingUserInput {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutAcceptingUserDataInput!
}

input FriendRequestUpdateWithWhereUniqueWithoutRequestUserInput {
  where: FriendRequestWhereUniqueInput!
  data: FriendRequestUpdateWithoutRequestUserDataInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutAcceptingUserInput {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutAcceptingUserDataInput!
  create: FriendRequestCreateWithoutAcceptingUserInput!
}

input FriendRequestUpsertWithWhereUniqueWithoutRequestUserInput {
  where: FriendRequestWhereUniqueInput!
  update: FriendRequestUpdateWithoutRequestUserDataInput!
  create: FriendRequestCreateWithoutRequestUserInput!
}

input FriendRequestWhereInput {
  """Logical AND on all given filters."""
  AND: [FriendRequestWhereInput!]

  """Logical OR on all given filters."""
  OR: [FriendRequestWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FriendRequestWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  requestUser: UserWhereInput
  acceptingUser: UserWhereInput
}

input FriendRequestWhereUniqueInput {
  id: ID
}

enum HealthyHomesStandardStatementTypes {
  WILL_COMPLY
  ALREADY_COMPLYING
}

enum HeatSource {
  FIRE_PLACE
  HEAT_PUMP
  ELECTRIC_HEATER
}

enum IndoorFeature {
  AIR_CONDITIONING
  FURNISHED
  INTERNAL_LAUNDRY
  DISHWASHER
  BUILT_IN_WARDROBES
  BALCONY
  ALARM_SYSTEM
  HEATING
}

enum InsulationConditionTypes {
  REASONABLE
  NOT_REASONABLE
  NO_GAPS
  NOT_ACCESSIBLE
}

enum InsulationCoverageTypes {
  COMPLETE
  PARTIAL
  NONE
  UNKNOWN
}

type InsulationForm implements Node {
  id: ID!
  meetsMinCeilingReq: Boolean
  meetsMinCeilingReqReason: String
  meetsMinUnderfloorReq: Boolean
  meetsMinUnderfloorReqReason: String
  ceilingCoverage: InsulationCoverageTypes
  ceilingCoverageReason: String
  ceilingTypes: [CeilingInsulationTypes!]!
  ceilingTypesOther: String
  ceilingBulkRValue: String
  ceilingMinimumThickness: String
  ceilingInsulationInstallDate: DateTime
  ceilingConditions: [InsulationConditionTypes!]!
  ceilingConditionReason: String
  underfloorCoverage: InsulationCoverageTypes
  underfloorCoverageReason: String
  underfloorTypes: [UnderfloorInsulationTypes!]!
  underfloorTypesOther: String
  underfloorBulkRValue: String
  underfloorMinimumThickness: String
  underfloorInsulationInstallDate: DateTime
  underfloorConditions: [InsulationConditionTypes!]!
  underfloorConditionReason: String
  wallCoverage: InsulationCoverageTypes
  wallCoverageReason: String
  supplementaryInfo: String
  lastUpgradedDate: DateTime
  profesionallyAssessedDate: DateTime
  declarationCheck: Boolean
  healthyHomesStandardStatement: HealthyHomesStandardStatementTypes
}

"""A connection to a list of items."""
type InsulationFormConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InsulationFormEdge]!
  aggregate: AggregateInsulationForm!
}

input InsulationFormCreateceilingConditionsInput {
  set: [InsulationConditionTypes!]
}

input InsulationFormCreateceilingTypesInput {
  set: [CeilingInsulationTypes!]
}

input InsulationFormCreateInput {
  id: ID
  meetsMinCeilingReq: Boolean
  meetsMinCeilingReqReason: String
  meetsMinUnderfloorReq: Boolean
  meetsMinUnderfloorReqReason: String
  ceilingCoverage: InsulationCoverageTypes
  ceilingCoverageReason: String
  ceilingTypesOther: String
  ceilingBulkRValue: String
  ceilingMinimumThickness: String
  ceilingInsulationInstallDate: DateTime
  ceilingConditionReason: String
  underfloorCoverage: InsulationCoverageTypes
  underfloorCoverageReason: String
  underfloorTypesOther: String
  underfloorBulkRValue: String
  underfloorMinimumThickness: String
  underfloorInsulationInstallDate: DateTime
  underfloorConditionReason: String
  wallCoverage: InsulationCoverageTypes
  wallCoverageReason: String
  supplementaryInfo: String
  lastUpgradedDate: DateTime
  profesionallyAssessedDate: DateTime
  declarationCheck: Boolean
  healthyHomesStandardStatement: HealthyHomesStandardStatementTypes
  ceilingTypes: InsulationFormCreateceilingTypesInput
  ceilingConditions: InsulationFormCreateceilingConditionsInput
  underfloorTypes: InsulationFormCreateunderfloorTypesInput
  underfloorConditions: InsulationFormCreateunderfloorConditionsInput
}

input InsulationFormCreateOneInput {
  create: InsulationFormCreateInput
  connect: InsulationFormWhereUniqueInput
}

input InsulationFormCreateunderfloorConditionsInput {
  set: [InsulationConditionTypes!]
}

input InsulationFormCreateunderfloorTypesInput {
  set: [UnderfloorInsulationTypes!]
}

"""An edge in a connection."""
type InsulationFormEdge {
  """The item at the end of the edge."""
  node: InsulationForm!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InsulationFormOrderByInput {
  id_ASC
  id_DESC
  meetsMinCeilingReq_ASC
  meetsMinCeilingReq_DESC
  meetsMinCeilingReqReason_ASC
  meetsMinCeilingReqReason_DESC
  meetsMinUnderfloorReq_ASC
  meetsMinUnderfloorReq_DESC
  meetsMinUnderfloorReqReason_ASC
  meetsMinUnderfloorReqReason_DESC
  ceilingCoverage_ASC
  ceilingCoverage_DESC
  ceilingCoverageReason_ASC
  ceilingCoverageReason_DESC
  ceilingTypesOther_ASC
  ceilingTypesOther_DESC
  ceilingBulkRValue_ASC
  ceilingBulkRValue_DESC
  ceilingMinimumThickness_ASC
  ceilingMinimumThickness_DESC
  ceilingInsulationInstallDate_ASC
  ceilingInsulationInstallDate_DESC
  ceilingConditionReason_ASC
  ceilingConditionReason_DESC
  underfloorCoverage_ASC
  underfloorCoverage_DESC
  underfloorCoverageReason_ASC
  underfloorCoverageReason_DESC
  underfloorTypesOther_ASC
  underfloorTypesOther_DESC
  underfloorBulkRValue_ASC
  underfloorBulkRValue_DESC
  underfloorMinimumThickness_ASC
  underfloorMinimumThickness_DESC
  underfloorInsulationInstallDate_ASC
  underfloorInsulationInstallDate_DESC
  underfloorConditionReason_ASC
  underfloorConditionReason_DESC
  wallCoverage_ASC
  wallCoverage_DESC
  wallCoverageReason_ASC
  wallCoverageReason_DESC
  supplementaryInfo_ASC
  supplementaryInfo_DESC
  lastUpgradedDate_ASC
  lastUpgradedDate_DESC
  profesionallyAssessedDate_ASC
  profesionallyAssessedDate_DESC
  declarationCheck_ASC
  declarationCheck_DESC
  healthyHomesStandardStatement_ASC
  healthyHomesStandardStatement_DESC
}

type InsulationFormPreviousValues {
  id: ID!
  meetsMinCeilingReq: Boolean
  meetsMinCeilingReqReason: String
  meetsMinUnderfloorReq: Boolean
  meetsMinUnderfloorReqReason: String
  ceilingCoverage: InsulationCoverageTypes
  ceilingCoverageReason: String
  ceilingTypes: [CeilingInsulationTypes!]!
  ceilingTypesOther: String
  ceilingBulkRValue: String
  ceilingMinimumThickness: String
  ceilingInsulationInstallDate: DateTime
  ceilingConditions: [InsulationConditionTypes!]!
  ceilingConditionReason: String
  underfloorCoverage: InsulationCoverageTypes
  underfloorCoverageReason: String
  underfloorTypes: [UnderfloorInsulationTypes!]!
  underfloorTypesOther: String
  underfloorBulkRValue: String
  underfloorMinimumThickness: String
  underfloorInsulationInstallDate: DateTime
  underfloorConditions: [InsulationConditionTypes!]!
  underfloorConditionReason: String
  wallCoverage: InsulationCoverageTypes
  wallCoverageReason: String
  supplementaryInfo: String
  lastUpgradedDate: DateTime
  profesionallyAssessedDate: DateTime
  declarationCheck: Boolean
  healthyHomesStandardStatement: HealthyHomesStandardStatementTypes
}

type InsulationFormSubscriptionPayload {
  mutation: MutationType!
  node: InsulationForm
  updatedFields: [String!]
  previousValues: InsulationFormPreviousValues
}

input InsulationFormSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InsulationFormSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InsulationFormSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InsulationFormSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InsulationFormWhereInput
}

input InsulationFormUpdateceilingConditionsInput {
  set: [InsulationConditionTypes!]
}

input InsulationFormUpdateceilingTypesInput {
  set: [CeilingInsulationTypes!]
}

input InsulationFormUpdateDataInput {
  meetsMinCeilingReq: Boolean
  meetsMinCeilingReqReason: String
  meetsMinUnderfloorReq: Boolean
  meetsMinUnderfloorReqReason: String
  ceilingCoverage: InsulationCoverageTypes
  ceilingCoverageReason: String
  ceilingTypesOther: String
  ceilingBulkRValue: String
  ceilingMinimumThickness: String
  ceilingInsulationInstallDate: DateTime
  ceilingConditionReason: String
  underfloorCoverage: InsulationCoverageTypes
  underfloorCoverageReason: String
  underfloorTypesOther: String
  underfloorBulkRValue: String
  underfloorMinimumThickness: String
  underfloorInsulationInstallDate: DateTime
  underfloorConditionReason: String
  wallCoverage: InsulationCoverageTypes
  wallCoverageReason: String
  supplementaryInfo: String
  lastUpgradedDate: DateTime
  profesionallyAssessedDate: DateTime
  declarationCheck: Boolean
  healthyHomesStandardStatement: HealthyHomesStandardStatementTypes
  ceilingTypes: InsulationFormUpdateceilingTypesInput
  ceilingConditions: InsulationFormUpdateceilingConditionsInput
  underfloorTypes: InsulationFormUpdateunderfloorTypesInput
  underfloorConditions: InsulationFormUpdateunderfloorConditionsInput
}

input InsulationFormUpdateInput {
  meetsMinCeilingReq: Boolean
  meetsMinCeilingReqReason: String
  meetsMinUnderfloorReq: Boolean
  meetsMinUnderfloorReqReason: String
  ceilingCoverage: InsulationCoverageTypes
  ceilingCoverageReason: String
  ceilingTypesOther: String
  ceilingBulkRValue: String
  ceilingMinimumThickness: String
  ceilingInsulationInstallDate: DateTime
  ceilingConditionReason: String
  underfloorCoverage: InsulationCoverageTypes
  underfloorCoverageReason: String
  underfloorTypesOther: String
  underfloorBulkRValue: String
  underfloorMinimumThickness: String
  underfloorInsulationInstallDate: DateTime
  underfloorConditionReason: String
  wallCoverage: InsulationCoverageTypes
  wallCoverageReason: String
  supplementaryInfo: String
  lastUpgradedDate: DateTime
  profesionallyAssessedDate: DateTime
  declarationCheck: Boolean
  healthyHomesStandardStatement: HealthyHomesStandardStatementTypes
  ceilingTypes: InsulationFormUpdateceilingTypesInput
  ceilingConditions: InsulationFormUpdateceilingConditionsInput
  underfloorTypes: InsulationFormUpdateunderfloorTypesInput
  underfloorConditions: InsulationFormUpdateunderfloorConditionsInput
}

input InsulationFormUpdateManyMutationInput {
  meetsMinCeilingReq: Boolean
  meetsMinCeilingReqReason: String
  meetsMinUnderfloorReq: Boolean
  meetsMinUnderfloorReqReason: String
  ceilingCoverage: InsulationCoverageTypes
  ceilingCoverageReason: String
  ceilingTypesOther: String
  ceilingBulkRValue: String
  ceilingMinimumThickness: String
  ceilingInsulationInstallDate: DateTime
  ceilingConditionReason: String
  underfloorCoverage: InsulationCoverageTypes
  underfloorCoverageReason: String
  underfloorTypesOther: String
  underfloorBulkRValue: String
  underfloorMinimumThickness: String
  underfloorInsulationInstallDate: DateTime
  underfloorConditionReason: String
  wallCoverage: InsulationCoverageTypes
  wallCoverageReason: String
  supplementaryInfo: String
  lastUpgradedDate: DateTime
  profesionallyAssessedDate: DateTime
  declarationCheck: Boolean
  healthyHomesStandardStatement: HealthyHomesStandardStatementTypes
  ceilingTypes: InsulationFormUpdateceilingTypesInput
  ceilingConditions: InsulationFormUpdateceilingConditionsInput
  underfloorTypes: InsulationFormUpdateunderfloorTypesInput
  underfloorConditions: InsulationFormUpdateunderfloorConditionsInput
}

input InsulationFormUpdateOneInput {
  create: InsulationFormCreateInput
  connect: InsulationFormWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InsulationFormUpdateDataInput
  upsert: InsulationFormUpsertNestedInput
}

input InsulationFormUpdateunderfloorConditionsInput {
  set: [InsulationConditionTypes!]
}

input InsulationFormUpdateunderfloorTypesInput {
  set: [UnderfloorInsulationTypes!]
}

input InsulationFormUpsertNestedInput {
  update: InsulationFormUpdateDataInput!
  create: InsulationFormCreateInput!
}

input InsulationFormWhereInput {
  """Logical AND on all given filters."""
  AND: [InsulationFormWhereInput!]

  """Logical OR on all given filters."""
  OR: [InsulationFormWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InsulationFormWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  meetsMinCeilingReq: Boolean

  """All values that are not equal to given value."""
  meetsMinCeilingReq_not: Boolean
  meetsMinCeilingReqReason: String

  """All values that are not equal to given value."""
  meetsMinCeilingReqReason_not: String

  """All values that are contained in given list."""
  meetsMinCeilingReqReason_in: [String!]

  """All values that are not contained in given list."""
  meetsMinCeilingReqReason_not_in: [String!]

  """All values less than the given value."""
  meetsMinCeilingReqReason_lt: String

  """All values less than or equal the given value."""
  meetsMinCeilingReqReason_lte: String

  """All values greater than the given value."""
  meetsMinCeilingReqReason_gt: String

  """All values greater than or equal the given value."""
  meetsMinCeilingReqReason_gte: String

  """All values containing the given string."""
  meetsMinCeilingReqReason_contains: String

  """All values not containing the given string."""
  meetsMinCeilingReqReason_not_contains: String

  """All values starting with the given string."""
  meetsMinCeilingReqReason_starts_with: String

  """All values not starting with the given string."""
  meetsMinCeilingReqReason_not_starts_with: String

  """All values ending with the given string."""
  meetsMinCeilingReqReason_ends_with: String

  """All values not ending with the given string."""
  meetsMinCeilingReqReason_not_ends_with: String
  meetsMinUnderfloorReq: Boolean

  """All values that are not equal to given value."""
  meetsMinUnderfloorReq_not: Boolean
  meetsMinUnderfloorReqReason: String

  """All values that are not equal to given value."""
  meetsMinUnderfloorReqReason_not: String

  """All values that are contained in given list."""
  meetsMinUnderfloorReqReason_in: [String!]

  """All values that are not contained in given list."""
  meetsMinUnderfloorReqReason_not_in: [String!]

  """All values less than the given value."""
  meetsMinUnderfloorReqReason_lt: String

  """All values less than or equal the given value."""
  meetsMinUnderfloorReqReason_lte: String

  """All values greater than the given value."""
  meetsMinUnderfloorReqReason_gt: String

  """All values greater than or equal the given value."""
  meetsMinUnderfloorReqReason_gte: String

  """All values containing the given string."""
  meetsMinUnderfloorReqReason_contains: String

  """All values not containing the given string."""
  meetsMinUnderfloorReqReason_not_contains: String

  """All values starting with the given string."""
  meetsMinUnderfloorReqReason_starts_with: String

  """All values not starting with the given string."""
  meetsMinUnderfloorReqReason_not_starts_with: String

  """All values ending with the given string."""
  meetsMinUnderfloorReqReason_ends_with: String

  """All values not ending with the given string."""
  meetsMinUnderfloorReqReason_not_ends_with: String
  ceilingCoverage: InsulationCoverageTypes

  """All values that are not equal to given value."""
  ceilingCoverage_not: InsulationCoverageTypes

  """All values that are contained in given list."""
  ceilingCoverage_in: [InsulationCoverageTypes!]

  """All values that are not contained in given list."""
  ceilingCoverage_not_in: [InsulationCoverageTypes!]
  ceilingCoverageReason: String

  """All values that are not equal to given value."""
  ceilingCoverageReason_not: String

  """All values that are contained in given list."""
  ceilingCoverageReason_in: [String!]

  """All values that are not contained in given list."""
  ceilingCoverageReason_not_in: [String!]

  """All values less than the given value."""
  ceilingCoverageReason_lt: String

  """All values less than or equal the given value."""
  ceilingCoverageReason_lte: String

  """All values greater than the given value."""
  ceilingCoverageReason_gt: String

  """All values greater than or equal the given value."""
  ceilingCoverageReason_gte: String

  """All values containing the given string."""
  ceilingCoverageReason_contains: String

  """All values not containing the given string."""
  ceilingCoverageReason_not_contains: String

  """All values starting with the given string."""
  ceilingCoverageReason_starts_with: String

  """All values not starting with the given string."""
  ceilingCoverageReason_not_starts_with: String

  """All values ending with the given string."""
  ceilingCoverageReason_ends_with: String

  """All values not ending with the given string."""
  ceilingCoverageReason_not_ends_with: String
  ceilingTypesOther: String

  """All values that are not equal to given value."""
  ceilingTypesOther_not: String

  """All values that are contained in given list."""
  ceilingTypesOther_in: [String!]

  """All values that are not contained in given list."""
  ceilingTypesOther_not_in: [String!]

  """All values less than the given value."""
  ceilingTypesOther_lt: String

  """All values less than or equal the given value."""
  ceilingTypesOther_lte: String

  """All values greater than the given value."""
  ceilingTypesOther_gt: String

  """All values greater than or equal the given value."""
  ceilingTypesOther_gte: String

  """All values containing the given string."""
  ceilingTypesOther_contains: String

  """All values not containing the given string."""
  ceilingTypesOther_not_contains: String

  """All values starting with the given string."""
  ceilingTypesOther_starts_with: String

  """All values not starting with the given string."""
  ceilingTypesOther_not_starts_with: String

  """All values ending with the given string."""
  ceilingTypesOther_ends_with: String

  """All values not ending with the given string."""
  ceilingTypesOther_not_ends_with: String
  ceilingBulkRValue: String

  """All values that are not equal to given value."""
  ceilingBulkRValue_not: String

  """All values that are contained in given list."""
  ceilingBulkRValue_in: [String!]

  """All values that are not contained in given list."""
  ceilingBulkRValue_not_in: [String!]

  """All values less than the given value."""
  ceilingBulkRValue_lt: String

  """All values less than or equal the given value."""
  ceilingBulkRValue_lte: String

  """All values greater than the given value."""
  ceilingBulkRValue_gt: String

  """All values greater than or equal the given value."""
  ceilingBulkRValue_gte: String

  """All values containing the given string."""
  ceilingBulkRValue_contains: String

  """All values not containing the given string."""
  ceilingBulkRValue_not_contains: String

  """All values starting with the given string."""
  ceilingBulkRValue_starts_with: String

  """All values not starting with the given string."""
  ceilingBulkRValue_not_starts_with: String

  """All values ending with the given string."""
  ceilingBulkRValue_ends_with: String

  """All values not ending with the given string."""
  ceilingBulkRValue_not_ends_with: String
  ceilingMinimumThickness: String

  """All values that are not equal to given value."""
  ceilingMinimumThickness_not: String

  """All values that are contained in given list."""
  ceilingMinimumThickness_in: [String!]

  """All values that are not contained in given list."""
  ceilingMinimumThickness_not_in: [String!]

  """All values less than the given value."""
  ceilingMinimumThickness_lt: String

  """All values less than or equal the given value."""
  ceilingMinimumThickness_lte: String

  """All values greater than the given value."""
  ceilingMinimumThickness_gt: String

  """All values greater than or equal the given value."""
  ceilingMinimumThickness_gte: String

  """All values containing the given string."""
  ceilingMinimumThickness_contains: String

  """All values not containing the given string."""
  ceilingMinimumThickness_not_contains: String

  """All values starting with the given string."""
  ceilingMinimumThickness_starts_with: String

  """All values not starting with the given string."""
  ceilingMinimumThickness_not_starts_with: String

  """All values ending with the given string."""
  ceilingMinimumThickness_ends_with: String

  """All values not ending with the given string."""
  ceilingMinimumThickness_not_ends_with: String
  ceilingInsulationInstallDate: DateTime

  """All values that are not equal to given value."""
  ceilingInsulationInstallDate_not: DateTime

  """All values that are contained in given list."""
  ceilingInsulationInstallDate_in: [DateTime!]

  """All values that are not contained in given list."""
  ceilingInsulationInstallDate_not_in: [DateTime!]

  """All values less than the given value."""
  ceilingInsulationInstallDate_lt: DateTime

  """All values less than or equal the given value."""
  ceilingInsulationInstallDate_lte: DateTime

  """All values greater than the given value."""
  ceilingInsulationInstallDate_gt: DateTime

  """All values greater than or equal the given value."""
  ceilingInsulationInstallDate_gte: DateTime
  ceilingConditionReason: String

  """All values that are not equal to given value."""
  ceilingConditionReason_not: String

  """All values that are contained in given list."""
  ceilingConditionReason_in: [String!]

  """All values that are not contained in given list."""
  ceilingConditionReason_not_in: [String!]

  """All values less than the given value."""
  ceilingConditionReason_lt: String

  """All values less than or equal the given value."""
  ceilingConditionReason_lte: String

  """All values greater than the given value."""
  ceilingConditionReason_gt: String

  """All values greater than or equal the given value."""
  ceilingConditionReason_gte: String

  """All values containing the given string."""
  ceilingConditionReason_contains: String

  """All values not containing the given string."""
  ceilingConditionReason_not_contains: String

  """All values starting with the given string."""
  ceilingConditionReason_starts_with: String

  """All values not starting with the given string."""
  ceilingConditionReason_not_starts_with: String

  """All values ending with the given string."""
  ceilingConditionReason_ends_with: String

  """All values not ending with the given string."""
  ceilingConditionReason_not_ends_with: String
  underfloorCoverage: InsulationCoverageTypes

  """All values that are not equal to given value."""
  underfloorCoverage_not: InsulationCoverageTypes

  """All values that are contained in given list."""
  underfloorCoverage_in: [InsulationCoverageTypes!]

  """All values that are not contained in given list."""
  underfloorCoverage_not_in: [InsulationCoverageTypes!]
  underfloorCoverageReason: String

  """All values that are not equal to given value."""
  underfloorCoverageReason_not: String

  """All values that are contained in given list."""
  underfloorCoverageReason_in: [String!]

  """All values that are not contained in given list."""
  underfloorCoverageReason_not_in: [String!]

  """All values less than the given value."""
  underfloorCoverageReason_lt: String

  """All values less than or equal the given value."""
  underfloorCoverageReason_lte: String

  """All values greater than the given value."""
  underfloorCoverageReason_gt: String

  """All values greater than or equal the given value."""
  underfloorCoverageReason_gte: String

  """All values containing the given string."""
  underfloorCoverageReason_contains: String

  """All values not containing the given string."""
  underfloorCoverageReason_not_contains: String

  """All values starting with the given string."""
  underfloorCoverageReason_starts_with: String

  """All values not starting with the given string."""
  underfloorCoverageReason_not_starts_with: String

  """All values ending with the given string."""
  underfloorCoverageReason_ends_with: String

  """All values not ending with the given string."""
  underfloorCoverageReason_not_ends_with: String
  underfloorTypesOther: String

  """All values that are not equal to given value."""
  underfloorTypesOther_not: String

  """All values that are contained in given list."""
  underfloorTypesOther_in: [String!]

  """All values that are not contained in given list."""
  underfloorTypesOther_not_in: [String!]

  """All values less than the given value."""
  underfloorTypesOther_lt: String

  """All values less than or equal the given value."""
  underfloorTypesOther_lte: String

  """All values greater than the given value."""
  underfloorTypesOther_gt: String

  """All values greater than or equal the given value."""
  underfloorTypesOther_gte: String

  """All values containing the given string."""
  underfloorTypesOther_contains: String

  """All values not containing the given string."""
  underfloorTypesOther_not_contains: String

  """All values starting with the given string."""
  underfloorTypesOther_starts_with: String

  """All values not starting with the given string."""
  underfloorTypesOther_not_starts_with: String

  """All values ending with the given string."""
  underfloorTypesOther_ends_with: String

  """All values not ending with the given string."""
  underfloorTypesOther_not_ends_with: String
  underfloorBulkRValue: String

  """All values that are not equal to given value."""
  underfloorBulkRValue_not: String

  """All values that are contained in given list."""
  underfloorBulkRValue_in: [String!]

  """All values that are not contained in given list."""
  underfloorBulkRValue_not_in: [String!]

  """All values less than the given value."""
  underfloorBulkRValue_lt: String

  """All values less than or equal the given value."""
  underfloorBulkRValue_lte: String

  """All values greater than the given value."""
  underfloorBulkRValue_gt: String

  """All values greater than or equal the given value."""
  underfloorBulkRValue_gte: String

  """All values containing the given string."""
  underfloorBulkRValue_contains: String

  """All values not containing the given string."""
  underfloorBulkRValue_not_contains: String

  """All values starting with the given string."""
  underfloorBulkRValue_starts_with: String

  """All values not starting with the given string."""
  underfloorBulkRValue_not_starts_with: String

  """All values ending with the given string."""
  underfloorBulkRValue_ends_with: String

  """All values not ending with the given string."""
  underfloorBulkRValue_not_ends_with: String
  underfloorMinimumThickness: String

  """All values that are not equal to given value."""
  underfloorMinimumThickness_not: String

  """All values that are contained in given list."""
  underfloorMinimumThickness_in: [String!]

  """All values that are not contained in given list."""
  underfloorMinimumThickness_not_in: [String!]

  """All values less than the given value."""
  underfloorMinimumThickness_lt: String

  """All values less than or equal the given value."""
  underfloorMinimumThickness_lte: String

  """All values greater than the given value."""
  underfloorMinimumThickness_gt: String

  """All values greater than or equal the given value."""
  underfloorMinimumThickness_gte: String

  """All values containing the given string."""
  underfloorMinimumThickness_contains: String

  """All values not containing the given string."""
  underfloorMinimumThickness_not_contains: String

  """All values starting with the given string."""
  underfloorMinimumThickness_starts_with: String

  """All values not starting with the given string."""
  underfloorMinimumThickness_not_starts_with: String

  """All values ending with the given string."""
  underfloorMinimumThickness_ends_with: String

  """All values not ending with the given string."""
  underfloorMinimumThickness_not_ends_with: String
  underfloorInsulationInstallDate: DateTime

  """All values that are not equal to given value."""
  underfloorInsulationInstallDate_not: DateTime

  """All values that are contained in given list."""
  underfloorInsulationInstallDate_in: [DateTime!]

  """All values that are not contained in given list."""
  underfloorInsulationInstallDate_not_in: [DateTime!]

  """All values less than the given value."""
  underfloorInsulationInstallDate_lt: DateTime

  """All values less than or equal the given value."""
  underfloorInsulationInstallDate_lte: DateTime

  """All values greater than the given value."""
  underfloorInsulationInstallDate_gt: DateTime

  """All values greater than or equal the given value."""
  underfloorInsulationInstallDate_gte: DateTime
  underfloorConditionReason: String

  """All values that are not equal to given value."""
  underfloorConditionReason_not: String

  """All values that are contained in given list."""
  underfloorConditionReason_in: [String!]

  """All values that are not contained in given list."""
  underfloorConditionReason_not_in: [String!]

  """All values less than the given value."""
  underfloorConditionReason_lt: String

  """All values less than or equal the given value."""
  underfloorConditionReason_lte: String

  """All values greater than the given value."""
  underfloorConditionReason_gt: String

  """All values greater than or equal the given value."""
  underfloorConditionReason_gte: String

  """All values containing the given string."""
  underfloorConditionReason_contains: String

  """All values not containing the given string."""
  underfloorConditionReason_not_contains: String

  """All values starting with the given string."""
  underfloorConditionReason_starts_with: String

  """All values not starting with the given string."""
  underfloorConditionReason_not_starts_with: String

  """All values ending with the given string."""
  underfloorConditionReason_ends_with: String

  """All values not ending with the given string."""
  underfloorConditionReason_not_ends_with: String
  wallCoverage: InsulationCoverageTypes

  """All values that are not equal to given value."""
  wallCoverage_not: InsulationCoverageTypes

  """All values that are contained in given list."""
  wallCoverage_in: [InsulationCoverageTypes!]

  """All values that are not contained in given list."""
  wallCoverage_not_in: [InsulationCoverageTypes!]
  wallCoverageReason: String

  """All values that are not equal to given value."""
  wallCoverageReason_not: String

  """All values that are contained in given list."""
  wallCoverageReason_in: [String!]

  """All values that are not contained in given list."""
  wallCoverageReason_not_in: [String!]

  """All values less than the given value."""
  wallCoverageReason_lt: String

  """All values less than or equal the given value."""
  wallCoverageReason_lte: String

  """All values greater than the given value."""
  wallCoverageReason_gt: String

  """All values greater than or equal the given value."""
  wallCoverageReason_gte: String

  """All values containing the given string."""
  wallCoverageReason_contains: String

  """All values not containing the given string."""
  wallCoverageReason_not_contains: String

  """All values starting with the given string."""
  wallCoverageReason_starts_with: String

  """All values not starting with the given string."""
  wallCoverageReason_not_starts_with: String

  """All values ending with the given string."""
  wallCoverageReason_ends_with: String

  """All values not ending with the given string."""
  wallCoverageReason_not_ends_with: String
  supplementaryInfo: String

  """All values that are not equal to given value."""
  supplementaryInfo_not: String

  """All values that are contained in given list."""
  supplementaryInfo_in: [String!]

  """All values that are not contained in given list."""
  supplementaryInfo_not_in: [String!]

  """All values less than the given value."""
  supplementaryInfo_lt: String

  """All values less than or equal the given value."""
  supplementaryInfo_lte: String

  """All values greater than the given value."""
  supplementaryInfo_gt: String

  """All values greater than or equal the given value."""
  supplementaryInfo_gte: String

  """All values containing the given string."""
  supplementaryInfo_contains: String

  """All values not containing the given string."""
  supplementaryInfo_not_contains: String

  """All values starting with the given string."""
  supplementaryInfo_starts_with: String

  """All values not starting with the given string."""
  supplementaryInfo_not_starts_with: String

  """All values ending with the given string."""
  supplementaryInfo_ends_with: String

  """All values not ending with the given string."""
  supplementaryInfo_not_ends_with: String
  lastUpgradedDate: DateTime

  """All values that are not equal to given value."""
  lastUpgradedDate_not: DateTime

  """All values that are contained in given list."""
  lastUpgradedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  lastUpgradedDate_not_in: [DateTime!]

  """All values less than the given value."""
  lastUpgradedDate_lt: DateTime

  """All values less than or equal the given value."""
  lastUpgradedDate_lte: DateTime

  """All values greater than the given value."""
  lastUpgradedDate_gt: DateTime

  """All values greater than or equal the given value."""
  lastUpgradedDate_gte: DateTime
  profesionallyAssessedDate: DateTime

  """All values that are not equal to given value."""
  profesionallyAssessedDate_not: DateTime

  """All values that are contained in given list."""
  profesionallyAssessedDate_in: [DateTime!]

  """All values that are not contained in given list."""
  profesionallyAssessedDate_not_in: [DateTime!]

  """All values less than the given value."""
  profesionallyAssessedDate_lt: DateTime

  """All values less than or equal the given value."""
  profesionallyAssessedDate_lte: DateTime

  """All values greater than the given value."""
  profesionallyAssessedDate_gt: DateTime

  """All values greater than or equal the given value."""
  profesionallyAssessedDate_gte: DateTime
  declarationCheck: Boolean

  """All values that are not equal to given value."""
  declarationCheck_not: Boolean
  healthyHomesStandardStatement: HealthyHomesStandardStatementTypes

  """All values that are not equal to given value."""
  healthyHomesStandardStatement_not: HealthyHomesStandardStatementTypes

  """All values that are contained in given list."""
  healthyHomesStandardStatement_in: [HealthyHomesStandardStatementTypes!]

  """All values that are not contained in given list."""
  healthyHomesStandardStatement_not_in: [HealthyHomesStandardStatementTypes!]
}

input InsulationFormWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

enum LeaseStage {
  INITIALIZING
  SIGNED
  PAID
  COMPLETED
}

type Lessee implements Node {
  id: ID!
  lease: PropertyLease
  user: User
  signed: Boolean!
  signedAt: DateTime
}

"""A connection to a list of items."""
type LesseeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LesseeEdge]!
  aggregate: AggregateLessee!
}

input LesseeCreateInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  lease: PropertyLeaseCreateOneWithoutLesseesInput
  user: UserCreateOneWithoutLesseeLeasesInput
}

input LesseeCreateManyWithoutLeaseInput {
  create: [LesseeCreateWithoutLeaseInput!]
  connect: [LesseeWhereUniqueInput!]
}

input LesseeCreateManyWithoutUserInput {
  create: [LesseeCreateWithoutUserInput!]
  connect: [LesseeWhereUniqueInput!]
}

input LesseeCreateWithoutLeaseInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  user: UserCreateOneWithoutLesseeLeasesInput
}

input LesseeCreateWithoutUserInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  lease: PropertyLeaseCreateOneWithoutLesseesInput
}

"""An edge in a connection."""
type LesseeEdge {
  """The item at the end of the edge."""
  node: Lessee!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LesseeOrderByInput {
  id_ASC
  id_DESC
  signed_ASC
  signed_DESC
  signedAt_ASC
  signedAt_DESC
}

type LesseePreviousValues {
  id: ID!
  signed: Boolean!
  signedAt: DateTime
}

input LesseeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LesseeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LesseeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LesseeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  signed: Boolean

  """All values that are not equal to given value."""
  signed_not: Boolean
  signedAt: DateTime

  """All values that are not equal to given value."""
  signedAt_not: DateTime

  """All values that are contained in given list."""
  signedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  signedAt_not_in: [DateTime!]

  """All values less than the given value."""
  signedAt_lt: DateTime

  """All values less than or equal the given value."""
  signedAt_lte: DateTime

  """All values greater than the given value."""
  signedAt_gt: DateTime

  """All values greater than or equal the given value."""
  signedAt_gte: DateTime
}

type LesseeSubscriptionPayload {
  mutation: MutationType!
  node: Lessee
  updatedFields: [String!]
  previousValues: LesseePreviousValues
}

input LesseeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LesseeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LesseeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LesseeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LesseeWhereInput
}

input LesseeUpdateInput {
  signed: Boolean
  signedAt: DateTime
  lease: PropertyLeaseUpdateOneWithoutLesseesInput
  user: UserUpdateOneWithoutLesseeLeasesInput
}

input LesseeUpdateManyDataInput {
  signed: Boolean
  signedAt: DateTime
}

input LesseeUpdateManyMutationInput {
  signed: Boolean
  signedAt: DateTime
}

input LesseeUpdateManyWithoutLeaseInput {
  create: [LesseeCreateWithoutLeaseInput!]
  connect: [LesseeWhereUniqueInput!]
  set: [LesseeWhereUniqueInput!]
  disconnect: [LesseeWhereUniqueInput!]
  delete: [LesseeWhereUniqueInput!]
  update: [LesseeUpdateWithWhereUniqueWithoutLeaseInput!]
  updateMany: [LesseeUpdateManyWithWhereNestedInput!]
  deleteMany: [LesseeScalarWhereInput!]
  upsert: [LesseeUpsertWithWhereUniqueWithoutLeaseInput!]
}

input LesseeUpdateManyWithoutUserInput {
  create: [LesseeCreateWithoutUserInput!]
  connect: [LesseeWhereUniqueInput!]
  set: [LesseeWhereUniqueInput!]
  disconnect: [LesseeWhereUniqueInput!]
  delete: [LesseeWhereUniqueInput!]
  update: [LesseeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LesseeUpdateManyWithWhereNestedInput!]
  deleteMany: [LesseeScalarWhereInput!]
  upsert: [LesseeUpsertWithWhereUniqueWithoutUserInput!]
}

input LesseeUpdateManyWithWhereNestedInput {
  where: LesseeScalarWhereInput!
  data: LesseeUpdateManyDataInput!
}

input LesseeUpdateWithoutLeaseDataInput {
  signed: Boolean
  signedAt: DateTime
  user: UserUpdateOneWithoutLesseeLeasesInput
}

input LesseeUpdateWithoutUserDataInput {
  signed: Boolean
  signedAt: DateTime
  lease: PropertyLeaseUpdateOneWithoutLesseesInput
}

input LesseeUpdateWithWhereUniqueWithoutLeaseInput {
  where: LesseeWhereUniqueInput!
  data: LesseeUpdateWithoutLeaseDataInput!
}

input LesseeUpdateWithWhereUniqueWithoutUserInput {
  where: LesseeWhereUniqueInput!
  data: LesseeUpdateWithoutUserDataInput!
}

input LesseeUpsertWithWhereUniqueWithoutLeaseInput {
  where: LesseeWhereUniqueInput!
  update: LesseeUpdateWithoutLeaseDataInput!
  create: LesseeCreateWithoutLeaseInput!
}

input LesseeUpsertWithWhereUniqueWithoutUserInput {
  where: LesseeWhereUniqueInput!
  update: LesseeUpdateWithoutUserDataInput!
  create: LesseeCreateWithoutUserInput!
}

input LesseeWhereInput {
  """Logical AND on all given filters."""
  AND: [LesseeWhereInput!]

  """Logical OR on all given filters."""
  OR: [LesseeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LesseeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  signed: Boolean

  """All values that are not equal to given value."""
  signed_not: Boolean
  signedAt: DateTime

  """All values that are not equal to given value."""
  signedAt_not: DateTime

  """All values that are contained in given list."""
  signedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  signedAt_not_in: [DateTime!]

  """All values less than the given value."""
  signedAt_lt: DateTime

  """All values less than or equal the given value."""
  signedAt_lte: DateTime

  """All values greater than the given value."""
  signedAt_gt: DateTime

  """All values greater than or equal the given value."""
  signedAt_gte: DateTime
  lease: PropertyLeaseWhereInput
  user: UserWhereInput
}

input LesseeWhereUniqueInput {
  id: ID
}

type Lessor implements Node {
  id: ID!
  lease: PropertyLease
  user: User
  signed: Boolean!
  signedAt: DateTime
}

"""A connection to a list of items."""
type LessorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LessorEdge]!
  aggregate: AggregateLessor!
}

input LessorCreateInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  lease: PropertyLeaseCreateOneWithoutLessorsInput
  user: UserCreateOneWithoutLessorLeasesInput
}

input LessorCreateManyWithoutLeaseInput {
  create: [LessorCreateWithoutLeaseInput!]
  connect: [LessorWhereUniqueInput!]
}

input LessorCreateManyWithoutUserInput {
  create: [LessorCreateWithoutUserInput!]
  connect: [LessorWhereUniqueInput!]
}

input LessorCreateWithoutLeaseInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  user: UserCreateOneWithoutLessorLeasesInput
}

input LessorCreateWithoutUserInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  lease: PropertyLeaseCreateOneWithoutLessorsInput
}

"""An edge in a connection."""
type LessorEdge {
  """The item at the end of the edge."""
  node: Lessor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LessorOrderByInput {
  id_ASC
  id_DESC
  signed_ASC
  signed_DESC
  signedAt_ASC
  signedAt_DESC
}

type LessorPreviousValues {
  id: ID!
  signed: Boolean!
  signedAt: DateTime
}

input LessorScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LessorScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessorScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessorScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  signed: Boolean

  """All values that are not equal to given value."""
  signed_not: Boolean
  signedAt: DateTime

  """All values that are not equal to given value."""
  signedAt_not: DateTime

  """All values that are contained in given list."""
  signedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  signedAt_not_in: [DateTime!]

  """All values less than the given value."""
  signedAt_lt: DateTime

  """All values less than or equal the given value."""
  signedAt_lte: DateTime

  """All values greater than the given value."""
  signedAt_gt: DateTime

  """All values greater than or equal the given value."""
  signedAt_gte: DateTime
}

type LessorSubscriptionPayload {
  mutation: MutationType!
  node: Lessor
  updatedFields: [String!]
  previousValues: LessorPreviousValues
}

input LessorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LessorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LessorWhereInput
}

input LessorUpdateInput {
  signed: Boolean
  signedAt: DateTime
  lease: PropertyLeaseUpdateOneWithoutLessorsInput
  user: UserUpdateOneWithoutLessorLeasesInput
}

input LessorUpdateManyDataInput {
  signed: Boolean
  signedAt: DateTime
}

input LessorUpdateManyMutationInput {
  signed: Boolean
  signedAt: DateTime
}

input LessorUpdateManyWithoutLeaseInput {
  create: [LessorCreateWithoutLeaseInput!]
  connect: [LessorWhereUniqueInput!]
  set: [LessorWhereUniqueInput!]
  disconnect: [LessorWhereUniqueInput!]
  delete: [LessorWhereUniqueInput!]
  update: [LessorUpdateWithWhereUniqueWithoutLeaseInput!]
  updateMany: [LessorUpdateManyWithWhereNestedInput!]
  deleteMany: [LessorScalarWhereInput!]
  upsert: [LessorUpsertWithWhereUniqueWithoutLeaseInput!]
}

input LessorUpdateManyWithoutUserInput {
  create: [LessorCreateWithoutUserInput!]
  connect: [LessorWhereUniqueInput!]
  set: [LessorWhereUniqueInput!]
  disconnect: [LessorWhereUniqueInput!]
  delete: [LessorWhereUniqueInput!]
  update: [LessorUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LessorUpdateManyWithWhereNestedInput!]
  deleteMany: [LessorScalarWhereInput!]
  upsert: [LessorUpsertWithWhereUniqueWithoutUserInput!]
}

input LessorUpdateManyWithWhereNestedInput {
  where: LessorScalarWhereInput!
  data: LessorUpdateManyDataInput!
}

input LessorUpdateWithoutLeaseDataInput {
  signed: Boolean
  signedAt: DateTime
  user: UserUpdateOneWithoutLessorLeasesInput
}

input LessorUpdateWithoutUserDataInput {
  signed: Boolean
  signedAt: DateTime
  lease: PropertyLeaseUpdateOneWithoutLessorsInput
}

input LessorUpdateWithWhereUniqueWithoutLeaseInput {
  where: LessorWhereUniqueInput!
  data: LessorUpdateWithoutLeaseDataInput!
}

input LessorUpdateWithWhereUniqueWithoutUserInput {
  where: LessorWhereUniqueInput!
  data: LessorUpdateWithoutUserDataInput!
}

input LessorUpsertWithWhereUniqueWithoutLeaseInput {
  where: LessorWhereUniqueInput!
  update: LessorUpdateWithoutLeaseDataInput!
  create: LessorCreateWithoutLeaseInput!
}

input LessorUpsertWithWhereUniqueWithoutUserInput {
  where: LessorWhereUniqueInput!
  update: LessorUpdateWithoutUserDataInput!
  create: LessorCreateWithoutUserInput!
}

input LessorWhereInput {
  """Logical AND on all given filters."""
  AND: [LessorWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  signed: Boolean

  """All values that are not equal to given value."""
  signed_not: Boolean
  signedAt: DateTime

  """All values that are not equal to given value."""
  signedAt_not: DateTime

  """All values that are contained in given list."""
  signedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  signedAt_not_in: [DateTime!]

  """All values less than the given value."""
  signedAt_lt: DateTime

  """All values less than or equal the given value."""
  signedAt_lte: DateTime

  """All values greater than the given value."""
  signedAt_gt: DateTime

  """All values greater than or equal the given value."""
  signedAt_gte: DateTime
  lease: PropertyLeaseWhereInput
  user: UserWhereInput
}

input LessorWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Message implements Node {
  id: ID!
  content: String!
  createdAt: DateTime!
  lastMessageRel: Chat
  chat: Chat!
  sender: User
  recipient: User
  isMine: Boolean!
}

"""A connection to a list of items."""
type MessageConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  content: String!
  isMine: Boolean!
  lastMessageRel: ChatCreateOneWithoutLastMessageInput
  chat: ChatCreateOneWithoutMessagesInput!
  sender: UserCreateOneWithoutSentMessagesInput
  recipient: UserCreateOneWithoutRecievedMessagesInput
}

input MessageCreateManyWithoutChatInput {
  create: [MessageCreateWithoutChatInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutRecipientInput {
  create: [MessageCreateWithoutRecipientInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutSenderInput {
  create: [MessageCreateWithoutSenderInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateOneWithoutLastMessageRelInput {
  create: MessageCreateWithoutLastMessageRelInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutChatInput {
  id: ID
  content: String!
  isMine: Boolean!
  lastMessageRel: ChatCreateOneWithoutLastMessageInput
  sender: UserCreateOneWithoutSentMessagesInput
  recipient: UserCreateOneWithoutRecievedMessagesInput
}

input MessageCreateWithoutLastMessageRelInput {
  id: ID
  content: String!
  isMine: Boolean!
  chat: ChatCreateOneWithoutMessagesInput!
  sender: UserCreateOneWithoutSentMessagesInput
  recipient: UserCreateOneWithoutRecievedMessagesInput
}

input MessageCreateWithoutRecipientInput {
  id: ID
  content: String!
  isMine: Boolean!
  lastMessageRel: ChatCreateOneWithoutLastMessageInput
  chat: ChatCreateOneWithoutMessagesInput!
  sender: UserCreateOneWithoutSentMessagesInput
}

input MessageCreateWithoutSenderInput {
  id: ID
  content: String!
  isMine: Boolean!
  lastMessageRel: ChatCreateOneWithoutLastMessageInput
  chat: ChatCreateOneWithoutMessagesInput!
  recipient: UserCreateOneWithoutRecievedMessagesInput
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  isMine_ASC
  isMine_DESC
}

type MessagePreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
  isMine: Boolean!
}

input MessageScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  isMine: Boolean

  """All values that are not equal to given value."""
  isMine_not: Boolean
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  content: String
  isMine: Boolean
  lastMessageRel: ChatUpdateOneWithoutLastMessageInput
  chat: ChatUpdateOneRequiredWithoutMessagesInput
  sender: UserUpdateOneWithoutSentMessagesInput
  recipient: UserUpdateOneWithoutRecievedMessagesInput
}

input MessageUpdateManyDataInput {
  content: String
  isMine: Boolean
}

input MessageUpdateManyMutationInput {
  content: String
  isMine: Boolean
}

input MessageUpdateManyWithoutChatInput {
  create: [MessageCreateWithoutChatInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChatInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  deleteMany: [MessageScalarWhereInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChatInput!]
}

input MessageUpdateManyWithoutRecipientInput {
  create: [MessageCreateWithoutRecipientInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutRecipientInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  deleteMany: [MessageScalarWhereInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutRecipientInput!]
}

input MessageUpdateManyWithoutSenderInput {
  create: [MessageCreateWithoutSenderInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSenderInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
  deleteMany: [MessageScalarWhereInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSenderInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateOneWithoutLastMessageRelInput {
  create: MessageCreateWithoutLastMessageRelInput
  connect: MessageWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MessageUpdateWithoutLastMessageRelDataInput
  upsert: MessageUpsertWithoutLastMessageRelInput
}

input MessageUpdateWithoutChatDataInput {
  content: String
  isMine: Boolean
  lastMessageRel: ChatUpdateOneWithoutLastMessageInput
  sender: UserUpdateOneWithoutSentMessagesInput
  recipient: UserUpdateOneWithoutRecievedMessagesInput
}

input MessageUpdateWithoutLastMessageRelDataInput {
  content: String
  isMine: Boolean
  chat: ChatUpdateOneRequiredWithoutMessagesInput
  sender: UserUpdateOneWithoutSentMessagesInput
  recipient: UserUpdateOneWithoutRecievedMessagesInput
}

input MessageUpdateWithoutRecipientDataInput {
  content: String
  isMine: Boolean
  lastMessageRel: ChatUpdateOneWithoutLastMessageInput
  chat: ChatUpdateOneRequiredWithoutMessagesInput
  sender: UserUpdateOneWithoutSentMessagesInput
}

input MessageUpdateWithoutSenderDataInput {
  content: String
  isMine: Boolean
  lastMessageRel: ChatUpdateOneWithoutLastMessageInput
  chat: ChatUpdateOneRequiredWithoutMessagesInput
  recipient: UserUpdateOneWithoutRecievedMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutChatInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutChatDataInput!
}

input MessageUpdateWithWhereUniqueWithoutRecipientInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutRecipientDataInput!
}

input MessageUpdateWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutSenderDataInput!
}

input MessageUpsertWithoutLastMessageRelInput {
  update: MessageUpdateWithoutLastMessageRelDataInput!
  create: MessageCreateWithoutLastMessageRelInput!
}

input MessageUpsertWithWhereUniqueWithoutChatInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutChatDataInput!
  create: MessageCreateWithoutChatInput!
}

input MessageUpsertWithWhereUniqueWithoutRecipientInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutRecipientDataInput!
  create: MessageCreateWithoutRecipientInput!
}

input MessageUpsertWithWhereUniqueWithoutSenderInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutSenderDataInput!
  create: MessageCreateWithoutSenderInput!
}

input MessageWhereInput {
  """Logical AND on all given filters."""
  AND: [MessageWhereInput!]

  """Logical OR on all given filters."""
  OR: [MessageWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MessageWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  content: String

  """All values that are not equal to given value."""
  content_not: String

  """All values that are contained in given list."""
  content_in: [String!]

  """All values that are not contained in given list."""
  content_not_in: [String!]

  """All values less than the given value."""
  content_lt: String

  """All values less than or equal the given value."""
  content_lte: String

  """All values greater than the given value."""
  content_gt: String

  """All values greater than or equal the given value."""
  content_gte: String

  """All values containing the given string."""
  content_contains: String

  """All values not containing the given string."""
  content_not_contains: String

  """All values starting with the given string."""
  content_starts_with: String

  """All values not starting with the given string."""
  content_not_starts_with: String

  """All values ending with the given string."""
  content_ends_with: String

  """All values not ending with the given string."""
  content_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  isMine: Boolean

  """All values that are not equal to given value."""
  isMine_not: Boolean
  lastMessageRel: ChatWhereInput
  chat: ChatWhereInput
  sender: UserWhereInput
  recipient: UserWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createBankDetail(data: BankDetailCreateInput!): BankDetail!
  createActivity(data: ActivityCreateInput!): Activity!
  createMessage(data: MessageCreateInput!): Message!
  createSeen(data: SeenCreateInput!): Seen!
  createChat(data: ChatCreateInput!): Chat!
  createFriendRequest(data: FriendRequestCreateInput!): FriendRequest!
  createProperty(data: PropertyCreateInput!): Property!
  createPropertyLease(data: PropertyLeaseCreateInput!): PropertyLease!
  createRentalAppraisal(data: RentalAppraisalCreateInput!): RentalAppraisal!
  createAccommodation(data: AccommodationCreateInput!): Accommodation!
  createRentalGroupApplicant(data: RentalGroupApplicantCreateInput!): RentalGroupApplicant!
  createPropertyAdvertisement(data: PropertyAdvertisementCreateInput!): PropertyAdvertisement!
  createRentalApplication(data: RentalApplicationCreateInput!): RentalApplication!
  createLessee(data: LesseeCreateInput!): Lessee!
  createLessor(data: LessorCreateInput!): Lessor!
  createWallet(data: WalletCreateInput!): Wallet!
  createCharge(data: ChargeCreateInput!): Charge!
  createPayment(data: PaymentCreateInput!): Payment!
  createPreTenancyForm(data: PreTenancyFormCreateInput!): PreTenancyForm!
  createFile(data: FileCreateInput!): File!
  createInsulationForm(data: InsulationFormCreateInput!): InsulationForm!
  createUser(data: UserCreateInput!): User!
  createCreditCard(data: CreditCardCreateInput!): CreditCard!
  updateBankDetail(data: BankDetailUpdateInput!, where: BankDetailWhereUniqueInput!): BankDetail
  updateActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateSeen(data: SeenUpdateInput!, where: SeenWhereUniqueInput!): Seen
  updateChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  updateFriendRequest(data: FriendRequestUpdateInput!, where: FriendRequestWhereUniqueInput!): FriendRequest
  updateProperty(data: PropertyUpdateInput!, where: PropertyWhereUniqueInput!): Property
  updatePropertyLease(data: PropertyLeaseUpdateInput!, where: PropertyLeaseWhereUniqueInput!): PropertyLease
  updateRentalAppraisal(data: RentalAppraisalUpdateInput!, where: RentalAppraisalWhereUniqueInput!): RentalAppraisal
  updateAccommodation(data: AccommodationUpdateInput!, where: AccommodationWhereUniqueInput!): Accommodation
  updateRentalGroupApplicant(data: RentalGroupApplicantUpdateInput!, where: RentalGroupApplicantWhereUniqueInput!): RentalGroupApplicant
  updateRentalApplication(data: RentalApplicationUpdateInput!, where: RentalApplicationWhereUniqueInput!): RentalApplication
  updateLessee(data: LesseeUpdateInput!, where: LesseeWhereUniqueInput!): Lessee
  updateLessor(data: LessorUpdateInput!, where: LessorWhereUniqueInput!): Lessor
  updateWallet(data: WalletUpdateInput!, where: WalletWhereUniqueInput!): Wallet
  updateCharge(data: ChargeUpdateInput!, where: ChargeWhereUniqueInput!): Charge
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment
  updatePreTenancyForm(data: PreTenancyFormUpdateInput!, where: PreTenancyFormWhereUniqueInput!): PreTenancyForm
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateInsulationForm(data: InsulationFormUpdateInput!, where: InsulationFormWhereUniqueInput!): InsulationForm
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateCreditCard(data: CreditCardUpdateInput!, where: CreditCardWhereUniqueInput!): CreditCard
  deleteBankDetail(where: BankDetailWhereUniqueInput!): BankDetail
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteSeen(where: SeenWhereUniqueInput!): Seen
  deleteChat(where: ChatWhereUniqueInput!): Chat
  deleteFriendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  deleteProperty(where: PropertyWhereUniqueInput!): Property
  deletePropertyLease(where: PropertyLeaseWhereUniqueInput!): PropertyLease
  deleteRentalAppraisal(where: RentalAppraisalWhereUniqueInput!): RentalAppraisal
  deleteAccommodation(where: AccommodationWhereUniqueInput!): Accommodation
  deleteRentalGroupApplicant(where: RentalGroupApplicantWhereUniqueInput!): RentalGroupApplicant
  deletePropertyAdvertisement(where: PropertyAdvertisementWhereUniqueInput!): PropertyAdvertisement
  deleteRentalApplication(where: RentalApplicationWhereUniqueInput!): RentalApplication
  deleteLessee(where: LesseeWhereUniqueInput!): Lessee
  deleteLessor(where: LessorWhereUniqueInput!): Lessor
  deleteWallet(where: WalletWhereUniqueInput!): Wallet
  deleteCharge(where: ChargeWhereUniqueInput!): Charge
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePreTenancyForm(where: PreTenancyFormWhereUniqueInput!): PreTenancyForm
  deleteFile(where: FileWhereUniqueInput!): File
  deleteInsulationForm(where: InsulationFormWhereUniqueInput!): InsulationForm
  deleteUser(where: UserWhereUniqueInput!): User
  deleteCreditCard(where: CreditCardWhereUniqueInput!): CreditCard
  upsertBankDetail(where: BankDetailWhereUniqueInput!, create: BankDetailCreateInput!, update: BankDetailUpdateInput!): BankDetail!
  upsertActivity(where: ActivityWhereUniqueInput!, create: ActivityCreateInput!, update: ActivityUpdateInput!): Activity!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertSeen(where: SeenWhereUniqueInput!, create: SeenCreateInput!, update: SeenUpdateInput!): Seen!
  upsertChat(where: ChatWhereUniqueInput!, create: ChatCreateInput!, update: ChatUpdateInput!): Chat!
  upsertFriendRequest(where: FriendRequestWhereUniqueInput!, create: FriendRequestCreateInput!, update: FriendRequestUpdateInput!): FriendRequest!
  upsertProperty(where: PropertyWhereUniqueInput!, create: PropertyCreateInput!, update: PropertyUpdateInput!): Property!
  upsertPropertyLease(where: PropertyLeaseWhereUniqueInput!, create: PropertyLeaseCreateInput!, update: PropertyLeaseUpdateInput!): PropertyLease!
  upsertRentalAppraisal(where: RentalAppraisalWhereUniqueInput!, create: RentalAppraisalCreateInput!, update: RentalAppraisalUpdateInput!): RentalAppraisal!
  upsertAccommodation(where: AccommodationWhereUniqueInput!, create: AccommodationCreateInput!, update: AccommodationUpdateInput!): Accommodation!
  upsertRentalGroupApplicant(where: RentalGroupApplicantWhereUniqueInput!, create: RentalGroupApplicantCreateInput!, update: RentalGroupApplicantUpdateInput!): RentalGroupApplicant!
  upsertRentalApplication(where: RentalApplicationWhereUniqueInput!, create: RentalApplicationCreateInput!, update: RentalApplicationUpdateInput!): RentalApplication!
  upsertLessee(where: LesseeWhereUniqueInput!, create: LesseeCreateInput!, update: LesseeUpdateInput!): Lessee!
  upsertLessor(where: LessorWhereUniqueInput!, create: LessorCreateInput!, update: LessorUpdateInput!): Lessor!
  upsertWallet(where: WalletWhereUniqueInput!, create: WalletCreateInput!, update: WalletUpdateInput!): Wallet!
  upsertCharge(where: ChargeWhereUniqueInput!, create: ChargeCreateInput!, update: ChargeUpdateInput!): Charge!
  upsertPayment(where: PaymentWhereUniqueInput!, create: PaymentCreateInput!, update: PaymentUpdateInput!): Payment!
  upsertPreTenancyForm(where: PreTenancyFormWhereUniqueInput!, create: PreTenancyFormCreateInput!, update: PreTenancyFormUpdateInput!): PreTenancyForm!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertInsulationForm(where: InsulationFormWhereUniqueInput!, create: InsulationFormCreateInput!, update: InsulationFormUpdateInput!): InsulationForm!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertCreditCard(where: CreditCardWhereUniqueInput!, create: CreditCardCreateInput!, update: CreditCardUpdateInput!): CreditCard!
  updateManyBankDetails(data: BankDetailUpdateManyMutationInput!, where: BankDetailWhereInput): BatchPayload!
  updateManyActivities(data: ActivityUpdateManyMutationInput!, where: ActivityWhereInput): BatchPayload!
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  updateManySeens(data: SeenUpdateManyMutationInput!, where: SeenWhereInput): BatchPayload!
  updateManyChats(data: ChatUpdateManyMutationInput!, where: ChatWhereInput): BatchPayload!
  updateManyProperties(data: PropertyUpdateManyMutationInput!, where: PropertyWhereInput): BatchPayload!
  updateManyPropertyLeases(data: PropertyLeaseUpdateManyMutationInput!, where: PropertyLeaseWhereInput): BatchPayload!
  updateManyRentalAppraisals(data: RentalAppraisalUpdateManyMutationInput!, where: RentalAppraisalWhereInput): BatchPayload!
  updateManyAccommodations(data: AccommodationUpdateManyMutationInput!, where: AccommodationWhereInput): BatchPayload!
  updateManyRentalGroupApplicants(data: RentalGroupApplicantUpdateManyMutationInput!, where: RentalGroupApplicantWhereInput): BatchPayload!
  updateManyRentalApplications(data: RentalApplicationUpdateManyMutationInput!, where: RentalApplicationWhereInput): BatchPayload!
  updateManyLessees(data: LesseeUpdateManyMutationInput!, where: LesseeWhereInput): BatchPayload!
  updateManyLessors(data: LessorUpdateManyMutationInput!, where: LessorWhereInput): BatchPayload!
  updateManyWallets(data: WalletUpdateManyMutationInput!, where: WalletWhereInput): BatchPayload!
  updateManyCharges(data: ChargeUpdateManyMutationInput!, where: ChargeWhereInput): BatchPayload!
  updateManyPayments(data: PaymentUpdateManyMutationInput!, where: PaymentWhereInput): BatchPayload!
  updateManyPreTenancyForms(data: PreTenancyFormUpdateManyMutationInput!, where: PreTenancyFormWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManyInsulationForms(data: InsulationFormUpdateManyMutationInput!, where: InsulationFormWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyCreditCards(data: CreditCardUpdateManyMutationInput!, where: CreditCardWhereInput): BatchPayload!
  deleteManyBankDetails(where: BankDetailWhereInput): BatchPayload!
  deleteManyActivities(where: ActivityWhereInput): BatchPayload!
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  deleteManySeens(where: SeenWhereInput): BatchPayload!
  deleteManyChats(where: ChatWhereInput): BatchPayload!
  deleteManyFriendRequests(where: FriendRequestWhereInput): BatchPayload!
  deleteManyProperties(where: PropertyWhereInput): BatchPayload!
  deleteManyPropertyLeases(where: PropertyLeaseWhereInput): BatchPayload!
  deleteManyRentalAppraisals(where: RentalAppraisalWhereInput): BatchPayload!
  deleteManyAccommodations(where: AccommodationWhereInput): BatchPayload!
  deleteManyRentalGroupApplicants(where: RentalGroupApplicantWhereInput): BatchPayload!
  deleteManyPropertyAdvertisements(where: PropertyAdvertisementWhereInput): BatchPayload!
  deleteManyRentalApplications(where: RentalApplicationWhereInput): BatchPayload!
  deleteManyLessees(where: LesseeWhereInput): BatchPayload!
  deleteManyLessors(where: LessorWhereInput): BatchPayload!
  deleteManyWallets(where: WalletWhereInput): BatchPayload!
  deleteManyCharges(where: ChargeWhereInput): BatchPayload!
  deleteManyPayments(where: PaymentWhereInput): BatchPayload!
  deleteManyPreTenancyForms(where: PreTenancyFormWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyInsulationForms(where: InsulationFormWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyCreditCards(where: CreditCardWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum OutdoorFeature {
  OUTDOOR_SPA
  OUTDOOR_ENTERTAINMENT
  SWIMMING_POOL
  PET_FRIENDLY
  FULLY_FENCED
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Payment implements Node {
  id: ID!
  wallet: Wallet
  userId: ID!
  bankName: String
  bankBranch: String
  bankAccount: String
  bankRef: String
  type: PaymentType
  leaseId: ID
  propertyId: ID
  stripePaymentId: String
  object: Json
  amount: Float
  createdAt: DateTime!
  description: String
  status: String
}

"""A connection to a list of items."""
type PaymentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentEdge]!
  aggregate: AggregatePayment!
}

input PaymentCreateInput {
  id: ID
  userId: ID!
  bankName: String
  bankBranch: String
  bankAccount: String
  bankRef: String
  type: PaymentType
  leaseId: ID
  propertyId: ID
  stripePaymentId: String
  object: Json
  amount: Float
  description: String
  status: String
  wallet: WalletCreateOneWithoutPaymentsInput
}

input PaymentCreateManyWithoutWalletInput {
  create: [PaymentCreateWithoutWalletInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateWithoutWalletInput {
  id: ID
  userId: ID!
  bankName: String
  bankBranch: String
  bankAccount: String
  bankRef: String
  type: PaymentType
  leaseId: ID
  propertyId: ID
  stripePaymentId: String
  object: Json
  amount: Float
  description: String
  status: String
}

"""An edge in a connection."""
type PaymentEdge {
  """The item at the end of the edge."""
  node: Payment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  bankName_ASC
  bankName_DESC
  bankBranch_ASC
  bankBranch_DESC
  bankAccount_ASC
  bankAccount_DESC
  bankRef_ASC
  bankRef_DESC
  type_ASC
  type_DESC
  leaseId_ASC
  leaseId_DESC
  propertyId_ASC
  propertyId_DESC
  stripePaymentId_ASC
  stripePaymentId_DESC
  object_ASC
  object_DESC
  amount_ASC
  amount_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  status_ASC
  status_DESC
}

type PaymentPreviousValues {
  id: ID!
  userId: ID!
  bankName: String
  bankBranch: String
  bankAccount: String
  bankRef: String
  type: PaymentType
  leaseId: ID
  propertyId: ID
  stripePaymentId: String
  object: Json
  amount: Float
  createdAt: DateTime!
  description: String
  status: String
}

input PaymentScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  userId: ID

  """All values that are not equal to given value."""
  userId_not: ID

  """All values that are contained in given list."""
  userId_in: [ID!]

  """All values that are not contained in given list."""
  userId_not_in: [ID!]

  """All values less than the given value."""
  userId_lt: ID

  """All values less than or equal the given value."""
  userId_lte: ID

  """All values greater than the given value."""
  userId_gt: ID

  """All values greater than or equal the given value."""
  userId_gte: ID

  """All values containing the given string."""
  userId_contains: ID

  """All values not containing the given string."""
  userId_not_contains: ID

  """All values starting with the given string."""
  userId_starts_with: ID

  """All values not starting with the given string."""
  userId_not_starts_with: ID

  """All values ending with the given string."""
  userId_ends_with: ID

  """All values not ending with the given string."""
  userId_not_ends_with: ID
  bankName: String

  """All values that are not equal to given value."""
  bankName_not: String

  """All values that are contained in given list."""
  bankName_in: [String!]

  """All values that are not contained in given list."""
  bankName_not_in: [String!]

  """All values less than the given value."""
  bankName_lt: String

  """All values less than or equal the given value."""
  bankName_lte: String

  """All values greater than the given value."""
  bankName_gt: String

  """All values greater than or equal the given value."""
  bankName_gte: String

  """All values containing the given string."""
  bankName_contains: String

  """All values not containing the given string."""
  bankName_not_contains: String

  """All values starting with the given string."""
  bankName_starts_with: String

  """All values not starting with the given string."""
  bankName_not_starts_with: String

  """All values ending with the given string."""
  bankName_ends_with: String

  """All values not ending with the given string."""
  bankName_not_ends_with: String
  bankBranch: String

  """All values that are not equal to given value."""
  bankBranch_not: String

  """All values that are contained in given list."""
  bankBranch_in: [String!]

  """All values that are not contained in given list."""
  bankBranch_not_in: [String!]

  """All values less than the given value."""
  bankBranch_lt: String

  """All values less than or equal the given value."""
  bankBranch_lte: String

  """All values greater than the given value."""
  bankBranch_gt: String

  """All values greater than or equal the given value."""
  bankBranch_gte: String

  """All values containing the given string."""
  bankBranch_contains: String

  """All values not containing the given string."""
  bankBranch_not_contains: String

  """All values starting with the given string."""
  bankBranch_starts_with: String

  """All values not starting with the given string."""
  bankBranch_not_starts_with: String

  """All values ending with the given string."""
  bankBranch_ends_with: String

  """All values not ending with the given string."""
  bankBranch_not_ends_with: String
  bankAccount: String

  """All values that are not equal to given value."""
  bankAccount_not: String

  """All values that are contained in given list."""
  bankAccount_in: [String!]

  """All values that are not contained in given list."""
  bankAccount_not_in: [String!]

  """All values less than the given value."""
  bankAccount_lt: String

  """All values less than or equal the given value."""
  bankAccount_lte: String

  """All values greater than the given value."""
  bankAccount_gt: String

  """All values greater than or equal the given value."""
  bankAccount_gte: String

  """All values containing the given string."""
  bankAccount_contains: String

  """All values not containing the given string."""
  bankAccount_not_contains: String

  """All values starting with the given string."""
  bankAccount_starts_with: String

  """All values not starting with the given string."""
  bankAccount_not_starts_with: String

  """All values ending with the given string."""
  bankAccount_ends_with: String

  """All values not ending with the given string."""
  bankAccount_not_ends_with: String
  bankRef: String

  """All values that are not equal to given value."""
  bankRef_not: String

  """All values that are contained in given list."""
  bankRef_in: [String!]

  """All values that are not contained in given list."""
  bankRef_not_in: [String!]

  """All values less than the given value."""
  bankRef_lt: String

  """All values less than or equal the given value."""
  bankRef_lte: String

  """All values greater than the given value."""
  bankRef_gt: String

  """All values greater than or equal the given value."""
  bankRef_gte: String

  """All values containing the given string."""
  bankRef_contains: String

  """All values not containing the given string."""
  bankRef_not_contains: String

  """All values starting with the given string."""
  bankRef_starts_with: String

  """All values not starting with the given string."""
  bankRef_not_starts_with: String

  """All values ending with the given string."""
  bankRef_ends_with: String

  """All values not ending with the given string."""
  bankRef_not_ends_with: String
  type: PaymentType

  """All values that are not equal to given value."""
  type_not: PaymentType

  """All values that are contained in given list."""
  type_in: [PaymentType!]

  """All values that are not contained in given list."""
  type_not_in: [PaymentType!]
  leaseId: ID

  """All values that are not equal to given value."""
  leaseId_not: ID

  """All values that are contained in given list."""
  leaseId_in: [ID!]

  """All values that are not contained in given list."""
  leaseId_not_in: [ID!]

  """All values less than the given value."""
  leaseId_lt: ID

  """All values less than or equal the given value."""
  leaseId_lte: ID

  """All values greater than the given value."""
  leaseId_gt: ID

  """All values greater than or equal the given value."""
  leaseId_gte: ID

  """All values containing the given string."""
  leaseId_contains: ID

  """All values not containing the given string."""
  leaseId_not_contains: ID

  """All values starting with the given string."""
  leaseId_starts_with: ID

  """All values not starting with the given string."""
  leaseId_not_starts_with: ID

  """All values ending with the given string."""
  leaseId_ends_with: ID

  """All values not ending with the given string."""
  leaseId_not_ends_with: ID
  propertyId: ID

  """All values that are not equal to given value."""
  propertyId_not: ID

  """All values that are contained in given list."""
  propertyId_in: [ID!]

  """All values that are not contained in given list."""
  propertyId_not_in: [ID!]

  """All values less than the given value."""
  propertyId_lt: ID

  """All values less than or equal the given value."""
  propertyId_lte: ID

  """All values greater than the given value."""
  propertyId_gt: ID

  """All values greater than or equal the given value."""
  propertyId_gte: ID

  """All values containing the given string."""
  propertyId_contains: ID

  """All values not containing the given string."""
  propertyId_not_contains: ID

  """All values starting with the given string."""
  propertyId_starts_with: ID

  """All values not starting with the given string."""
  propertyId_not_starts_with: ID

  """All values ending with the given string."""
  propertyId_ends_with: ID

  """All values not ending with the given string."""
  propertyId_not_ends_with: ID
  stripePaymentId: String

  """All values that are not equal to given value."""
  stripePaymentId_not: String

  """All values that are contained in given list."""
  stripePaymentId_in: [String!]

  """All values that are not contained in given list."""
  stripePaymentId_not_in: [String!]

  """All values less than the given value."""
  stripePaymentId_lt: String

  """All values less than or equal the given value."""
  stripePaymentId_lte: String

  """All values greater than the given value."""
  stripePaymentId_gt: String

  """All values greater than or equal the given value."""
  stripePaymentId_gte: String

  """All values containing the given string."""
  stripePaymentId_contains: String

  """All values not containing the given string."""
  stripePaymentId_not_contains: String

  """All values starting with the given string."""
  stripePaymentId_starts_with: String

  """All values not starting with the given string."""
  stripePaymentId_not_starts_with: String

  """All values ending with the given string."""
  stripePaymentId_ends_with: String

  """All values not ending with the given string."""
  stripePaymentId_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
}

type PaymentSubscriptionPayload {
  mutation: MutationType!
  node: Payment
  updatedFields: [String!]
  previousValues: PaymentPreviousValues
}

input PaymentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentWhereInput
}

enum PaymentType {
  STRIPE
  SYSTEM
}

input PaymentUpdateInput {
  userId: ID
  bankName: String
  bankBranch: String
  bankAccount: String
  bankRef: String
  type: PaymentType
  leaseId: ID
  propertyId: ID
  stripePaymentId: String
  object: Json
  amount: Float
  description: String
  status: String
  wallet: WalletUpdateOneWithoutPaymentsInput
}

input PaymentUpdateManyDataInput {
  userId: ID
  bankName: String
  bankBranch: String
  bankAccount: String
  bankRef: String
  type: PaymentType
  leaseId: ID
  propertyId: ID
  stripePaymentId: String
  object: Json
  amount: Float
  description: String
  status: String
}

input PaymentUpdateManyMutationInput {
  userId: ID
  bankName: String
  bankBranch: String
  bankAccount: String
  bankRef: String
  type: PaymentType
  leaseId: ID
  propertyId: ID
  stripePaymentId: String
  object: Json
  amount: Float
  description: String
  status: String
}

input PaymentUpdateManyWithoutWalletInput {
  create: [PaymentCreateWithoutWalletInput!]
  connect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithWhereUniqueWithoutWalletInput!]
  updateMany: [PaymentUpdateManyWithWhereNestedInput!]
  deleteMany: [PaymentScalarWhereInput!]
  upsert: [PaymentUpsertWithWhereUniqueWithoutWalletInput!]
}

input PaymentUpdateManyWithWhereNestedInput {
  where: PaymentScalarWhereInput!
  data: PaymentUpdateManyDataInput!
}

input PaymentUpdateWithoutWalletDataInput {
  userId: ID
  bankName: String
  bankBranch: String
  bankAccount: String
  bankRef: String
  type: PaymentType
  leaseId: ID
  propertyId: ID
  stripePaymentId: String
  object: Json
  amount: Float
  description: String
  status: String
}

input PaymentUpdateWithWhereUniqueWithoutWalletInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutWalletDataInput!
}

input PaymentUpsertWithWhereUniqueWithoutWalletInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutWalletDataInput!
  create: PaymentCreateWithoutWalletInput!
}

input PaymentWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  userId: ID

  """All values that are not equal to given value."""
  userId_not: ID

  """All values that are contained in given list."""
  userId_in: [ID!]

  """All values that are not contained in given list."""
  userId_not_in: [ID!]

  """All values less than the given value."""
  userId_lt: ID

  """All values less than or equal the given value."""
  userId_lte: ID

  """All values greater than the given value."""
  userId_gt: ID

  """All values greater than or equal the given value."""
  userId_gte: ID

  """All values containing the given string."""
  userId_contains: ID

  """All values not containing the given string."""
  userId_not_contains: ID

  """All values starting with the given string."""
  userId_starts_with: ID

  """All values not starting with the given string."""
  userId_not_starts_with: ID

  """All values ending with the given string."""
  userId_ends_with: ID

  """All values not ending with the given string."""
  userId_not_ends_with: ID
  bankName: String

  """All values that are not equal to given value."""
  bankName_not: String

  """All values that are contained in given list."""
  bankName_in: [String!]

  """All values that are not contained in given list."""
  bankName_not_in: [String!]

  """All values less than the given value."""
  bankName_lt: String

  """All values less than or equal the given value."""
  bankName_lte: String

  """All values greater than the given value."""
  bankName_gt: String

  """All values greater than or equal the given value."""
  bankName_gte: String

  """All values containing the given string."""
  bankName_contains: String

  """All values not containing the given string."""
  bankName_not_contains: String

  """All values starting with the given string."""
  bankName_starts_with: String

  """All values not starting with the given string."""
  bankName_not_starts_with: String

  """All values ending with the given string."""
  bankName_ends_with: String

  """All values not ending with the given string."""
  bankName_not_ends_with: String
  bankBranch: String

  """All values that are not equal to given value."""
  bankBranch_not: String

  """All values that are contained in given list."""
  bankBranch_in: [String!]

  """All values that are not contained in given list."""
  bankBranch_not_in: [String!]

  """All values less than the given value."""
  bankBranch_lt: String

  """All values less than or equal the given value."""
  bankBranch_lte: String

  """All values greater than the given value."""
  bankBranch_gt: String

  """All values greater than or equal the given value."""
  bankBranch_gte: String

  """All values containing the given string."""
  bankBranch_contains: String

  """All values not containing the given string."""
  bankBranch_not_contains: String

  """All values starting with the given string."""
  bankBranch_starts_with: String

  """All values not starting with the given string."""
  bankBranch_not_starts_with: String

  """All values ending with the given string."""
  bankBranch_ends_with: String

  """All values not ending with the given string."""
  bankBranch_not_ends_with: String
  bankAccount: String

  """All values that are not equal to given value."""
  bankAccount_not: String

  """All values that are contained in given list."""
  bankAccount_in: [String!]

  """All values that are not contained in given list."""
  bankAccount_not_in: [String!]

  """All values less than the given value."""
  bankAccount_lt: String

  """All values less than or equal the given value."""
  bankAccount_lte: String

  """All values greater than the given value."""
  bankAccount_gt: String

  """All values greater than or equal the given value."""
  bankAccount_gte: String

  """All values containing the given string."""
  bankAccount_contains: String

  """All values not containing the given string."""
  bankAccount_not_contains: String

  """All values starting with the given string."""
  bankAccount_starts_with: String

  """All values not starting with the given string."""
  bankAccount_not_starts_with: String

  """All values ending with the given string."""
  bankAccount_ends_with: String

  """All values not ending with the given string."""
  bankAccount_not_ends_with: String
  bankRef: String

  """All values that are not equal to given value."""
  bankRef_not: String

  """All values that are contained in given list."""
  bankRef_in: [String!]

  """All values that are not contained in given list."""
  bankRef_not_in: [String!]

  """All values less than the given value."""
  bankRef_lt: String

  """All values less than or equal the given value."""
  bankRef_lte: String

  """All values greater than the given value."""
  bankRef_gt: String

  """All values greater than or equal the given value."""
  bankRef_gte: String

  """All values containing the given string."""
  bankRef_contains: String

  """All values not containing the given string."""
  bankRef_not_contains: String

  """All values starting with the given string."""
  bankRef_starts_with: String

  """All values not starting with the given string."""
  bankRef_not_starts_with: String

  """All values ending with the given string."""
  bankRef_ends_with: String

  """All values not ending with the given string."""
  bankRef_not_ends_with: String
  type: PaymentType

  """All values that are not equal to given value."""
  type_not: PaymentType

  """All values that are contained in given list."""
  type_in: [PaymentType!]

  """All values that are not contained in given list."""
  type_not_in: [PaymentType!]
  leaseId: ID

  """All values that are not equal to given value."""
  leaseId_not: ID

  """All values that are contained in given list."""
  leaseId_in: [ID!]

  """All values that are not contained in given list."""
  leaseId_not_in: [ID!]

  """All values less than the given value."""
  leaseId_lt: ID

  """All values less than or equal the given value."""
  leaseId_lte: ID

  """All values greater than the given value."""
  leaseId_gt: ID

  """All values greater than or equal the given value."""
  leaseId_gte: ID

  """All values containing the given string."""
  leaseId_contains: ID

  """All values not containing the given string."""
  leaseId_not_contains: ID

  """All values starting with the given string."""
  leaseId_starts_with: ID

  """All values not starting with the given string."""
  leaseId_not_starts_with: ID

  """All values ending with the given string."""
  leaseId_ends_with: ID

  """All values not ending with the given string."""
  leaseId_not_ends_with: ID
  propertyId: ID

  """All values that are not equal to given value."""
  propertyId_not: ID

  """All values that are contained in given list."""
  propertyId_in: [ID!]

  """All values that are not contained in given list."""
  propertyId_not_in: [ID!]

  """All values less than the given value."""
  propertyId_lt: ID

  """All values less than or equal the given value."""
  propertyId_lte: ID

  """All values greater than the given value."""
  propertyId_gt: ID

  """All values greater than or equal the given value."""
  propertyId_gte: ID

  """All values containing the given string."""
  propertyId_contains: ID

  """All values not containing the given string."""
  propertyId_not_contains: ID

  """All values starting with the given string."""
  propertyId_starts_with: ID

  """All values not starting with the given string."""
  propertyId_not_starts_with: ID

  """All values ending with the given string."""
  propertyId_ends_with: ID

  """All values not ending with the given string."""
  propertyId_not_ends_with: ID
  stripePaymentId: String

  """All values that are not equal to given value."""
  stripePaymentId_not: String

  """All values that are contained in given list."""
  stripePaymentId_in: [String!]

  """All values that are not contained in given list."""
  stripePaymentId_not_in: [String!]

  """All values less than the given value."""
  stripePaymentId_lt: String

  """All values less than or equal the given value."""
  stripePaymentId_lte: String

  """All values greater than the given value."""
  stripePaymentId_gt: String

  """All values greater than or equal the given value."""
  stripePaymentId_gte: String

  """All values containing the given string."""
  stripePaymentId_contains: String

  """All values not containing the given string."""
  stripePaymentId_not_contains: String

  """All values starting with the given string."""
  stripePaymentId_starts_with: String

  """All values not starting with the given string."""
  stripePaymentId_not_starts_with: String

  """All values ending with the given string."""
  stripePaymentId_ends_with: String

  """All values not ending with the given string."""
  stripePaymentId_not_ends_with: String
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  status: String

  """All values that are not equal to given value."""
  status_not: String

  """All values that are contained in given list."""
  status_in: [String!]

  """All values that are not contained in given list."""
  status_not_in: [String!]

  """All values less than the given value."""
  status_lt: String

  """All values less than or equal the given value."""
  status_lte: String

  """All values greater than the given value."""
  status_gt: String

  """All values greater than or equal the given value."""
  status_gte: String

  """All values containing the given string."""
  status_contains: String

  """All values not containing the given string."""
  status_not_contains: String

  """All values starting with the given string."""
  status_starts_with: String

  """All values not starting with the given string."""
  status_not_starts_with: String

  """All values ending with the given string."""
  status_ends_with: String

  """All values not ending with the given string."""
  status_not_ends_with: String
  wallet: WalletWhereInput
}

input PaymentWhereUniqueInput {
  id: ID
}

enum Permission {
  ADMIN
  USER
  PERMISSIONUPDATE
}

enum Pet {
  DOG
  CAT
  CAGED_BIRD
  FISH
}

type PreTenancyForm implements Node {
  id: ID!
  rentalApplicant: RentalGroupApplicant
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  proofOfAddress: File
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
}

"""A connection to a list of items."""
type PreTenancyFormConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PreTenancyFormEdge]!
  aggregate: AggregatePreTenancyForm!
}

input PreTenancyFormCreateInput {
  id: ID
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
  rentalApplicant: RentalGroupApplicantCreateOneWithoutPreTenancyApplicationFormInput
  proofOfAddress: FileCreateOneWithoutPreTenancyProofOfAddressInput
}

input PreTenancyFormCreateOneWithoutProofOfAddressInput {
  create: PreTenancyFormCreateWithoutProofOfAddressInput
  connect: PreTenancyFormWhereUniqueInput
}

input PreTenancyFormCreateOneWithoutRentalApplicantInput {
  create: PreTenancyFormCreateWithoutRentalApplicantInput
  connect: PreTenancyFormWhereUniqueInput
}

input PreTenancyFormCreateWithoutProofOfAddressInput {
  id: ID
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
  rentalApplicant: RentalGroupApplicantCreateOneWithoutPreTenancyApplicationFormInput
}

input PreTenancyFormCreateWithoutRentalApplicantInput {
  id: ID
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
  proofOfAddress: FileCreateOneWithoutPreTenancyProofOfAddressInput
}

"""An edge in a connection."""
type PreTenancyFormEdge {
  """The item at the end of the edge."""
  node: PreTenancyForm!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PreTenancyFormOrderByInput {
  id_ASC
  id_DESC
  firstTimeTenant_ASC
  firstTimeTenant_DESC
  preferredMoveInDate_ASC
  preferredMoveInDate_DESC
  fullName_ASC
  fullName_DESC
  dob_ASC
  dob_DESC
  under18_ASC
  under18_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  currentLocation_ASC
  currentLocation_DESC
  yearsAtAddress_ASC
  yearsAtAddress_DESC
  monthsAtAddress_ASC
  monthsAtAddress_DESC
  reasonForLeaving_ASC
  reasonForLeaving_DESC
  currentLandlordName_ASC
  currentLandlordName_DESC
  currentLandlordNumber_ASC
  currentLandlordNumber_DESC
  currentLandlordEmail_ASC
  currentLandlordEmail_DESC
  consentToLandlordContact_ASC
  consentToLandlordContact_DESC
  referrence1Name_ASC
  referrence1Name_DESC
  referrence1Phone_ASC
  referrence1Phone_DESC
  referrence1Email_ASC
  referrence1Email_DESC
  referrence2Name_ASC
  referrence2Name_DESC
  referrence2Phone_ASC
  referrence2Phone_DESC
  referrence2Email_ASC
  referrence2Email_DESC
  acceptedTerms_ASC
  acceptedTerms_DESC
}

type PreTenancyFormPreviousValues {
  id: ID!
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
}

type PreTenancyFormSubscriptionPayload {
  mutation: MutationType!
  node: PreTenancyForm
  updatedFields: [String!]
  previousValues: PreTenancyFormPreviousValues
}

input PreTenancyFormSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PreTenancyFormSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PreTenancyFormSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PreTenancyFormSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PreTenancyFormWhereInput
}

input PreTenancyFormUpdateInput {
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
  rentalApplicant: RentalGroupApplicantUpdateOneWithoutPreTenancyApplicationFormInput
  proofOfAddress: FileUpdateOneWithoutPreTenancyProofOfAddressInput
}

input PreTenancyFormUpdateManyMutationInput {
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
}

input PreTenancyFormUpdateOneWithoutProofOfAddressInput {
  create: PreTenancyFormCreateWithoutProofOfAddressInput
  connect: PreTenancyFormWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PreTenancyFormUpdateWithoutProofOfAddressDataInput
  upsert: PreTenancyFormUpsertWithoutProofOfAddressInput
}

input PreTenancyFormUpdateOneWithoutRentalApplicantInput {
  create: PreTenancyFormCreateWithoutRentalApplicantInput
  connect: PreTenancyFormWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PreTenancyFormUpdateWithoutRentalApplicantDataInput
  upsert: PreTenancyFormUpsertWithoutRentalApplicantInput
}

input PreTenancyFormUpdateWithoutProofOfAddressDataInput {
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
  rentalApplicant: RentalGroupApplicantUpdateOneWithoutPreTenancyApplicationFormInput
}

input PreTenancyFormUpdateWithoutRentalApplicantDataInput {
  firstTimeTenant: Boolean
  preferredMoveInDate: DateTime
  fullName: String
  dob: DateTime
  under18: Boolean
  phone: String
  email: String
  currentLocation: String
  yearsAtAddress: Int
  monthsAtAddress: Int
  reasonForLeaving: String
  currentLandlordName: String
  currentLandlordNumber: String
  currentLandlordEmail: String
  consentToLandlordContact: Boolean
  referrence1Name: String
  referrence1Phone: String
  referrence1Email: String
  referrence2Name: String
  referrence2Phone: String
  referrence2Email: String
  acceptedTerms: Boolean
  proofOfAddress: FileUpdateOneWithoutPreTenancyProofOfAddressInput
}

input PreTenancyFormUpsertWithoutProofOfAddressInput {
  update: PreTenancyFormUpdateWithoutProofOfAddressDataInput!
  create: PreTenancyFormCreateWithoutProofOfAddressInput!
}

input PreTenancyFormUpsertWithoutRentalApplicantInput {
  update: PreTenancyFormUpdateWithoutRentalApplicantDataInput!
  create: PreTenancyFormCreateWithoutRentalApplicantInput!
}

input PreTenancyFormWhereInput {
  """Logical AND on all given filters."""
  AND: [PreTenancyFormWhereInput!]

  """Logical OR on all given filters."""
  OR: [PreTenancyFormWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PreTenancyFormWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstTimeTenant: Boolean

  """All values that are not equal to given value."""
  firstTimeTenant_not: Boolean
  preferredMoveInDate: DateTime

  """All values that are not equal to given value."""
  preferredMoveInDate_not: DateTime

  """All values that are contained in given list."""
  preferredMoveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  preferredMoveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  preferredMoveInDate_lt: DateTime

  """All values less than or equal the given value."""
  preferredMoveInDate_lte: DateTime

  """All values greater than the given value."""
  preferredMoveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  preferredMoveInDate_gte: DateTime
  fullName: String

  """All values that are not equal to given value."""
  fullName_not: String

  """All values that are contained in given list."""
  fullName_in: [String!]

  """All values that are not contained in given list."""
  fullName_not_in: [String!]

  """All values less than the given value."""
  fullName_lt: String

  """All values less than or equal the given value."""
  fullName_lte: String

  """All values greater than the given value."""
  fullName_gt: String

  """All values greater than or equal the given value."""
  fullName_gte: String

  """All values containing the given string."""
  fullName_contains: String

  """All values not containing the given string."""
  fullName_not_contains: String

  """All values starting with the given string."""
  fullName_starts_with: String

  """All values not starting with the given string."""
  fullName_not_starts_with: String

  """All values ending with the given string."""
  fullName_ends_with: String

  """All values not ending with the given string."""
  fullName_not_ends_with: String
  dob: DateTime

  """All values that are not equal to given value."""
  dob_not: DateTime

  """All values that are contained in given list."""
  dob_in: [DateTime!]

  """All values that are not contained in given list."""
  dob_not_in: [DateTime!]

  """All values less than the given value."""
  dob_lt: DateTime

  """All values less than or equal the given value."""
  dob_lte: DateTime

  """All values greater than the given value."""
  dob_gt: DateTime

  """All values greater than or equal the given value."""
  dob_gte: DateTime
  under18: Boolean

  """All values that are not equal to given value."""
  under18_not: Boolean
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  currentLocation: String

  """All values that are not equal to given value."""
  currentLocation_not: String

  """All values that are contained in given list."""
  currentLocation_in: [String!]

  """All values that are not contained in given list."""
  currentLocation_not_in: [String!]

  """All values less than the given value."""
  currentLocation_lt: String

  """All values less than or equal the given value."""
  currentLocation_lte: String

  """All values greater than the given value."""
  currentLocation_gt: String

  """All values greater than or equal the given value."""
  currentLocation_gte: String

  """All values containing the given string."""
  currentLocation_contains: String

  """All values not containing the given string."""
  currentLocation_not_contains: String

  """All values starting with the given string."""
  currentLocation_starts_with: String

  """All values not starting with the given string."""
  currentLocation_not_starts_with: String

  """All values ending with the given string."""
  currentLocation_ends_with: String

  """All values not ending with the given string."""
  currentLocation_not_ends_with: String
  yearsAtAddress: Int

  """All values that are not equal to given value."""
  yearsAtAddress_not: Int

  """All values that are contained in given list."""
  yearsAtAddress_in: [Int!]

  """All values that are not contained in given list."""
  yearsAtAddress_not_in: [Int!]

  """All values less than the given value."""
  yearsAtAddress_lt: Int

  """All values less than or equal the given value."""
  yearsAtAddress_lte: Int

  """All values greater than the given value."""
  yearsAtAddress_gt: Int

  """All values greater than or equal the given value."""
  yearsAtAddress_gte: Int
  monthsAtAddress: Int

  """All values that are not equal to given value."""
  monthsAtAddress_not: Int

  """All values that are contained in given list."""
  monthsAtAddress_in: [Int!]

  """All values that are not contained in given list."""
  monthsAtAddress_not_in: [Int!]

  """All values less than the given value."""
  monthsAtAddress_lt: Int

  """All values less than or equal the given value."""
  monthsAtAddress_lte: Int

  """All values greater than the given value."""
  monthsAtAddress_gt: Int

  """All values greater than or equal the given value."""
  monthsAtAddress_gte: Int
  reasonForLeaving: String

  """All values that are not equal to given value."""
  reasonForLeaving_not: String

  """All values that are contained in given list."""
  reasonForLeaving_in: [String!]

  """All values that are not contained in given list."""
  reasonForLeaving_not_in: [String!]

  """All values less than the given value."""
  reasonForLeaving_lt: String

  """All values less than or equal the given value."""
  reasonForLeaving_lte: String

  """All values greater than the given value."""
  reasonForLeaving_gt: String

  """All values greater than or equal the given value."""
  reasonForLeaving_gte: String

  """All values containing the given string."""
  reasonForLeaving_contains: String

  """All values not containing the given string."""
  reasonForLeaving_not_contains: String

  """All values starting with the given string."""
  reasonForLeaving_starts_with: String

  """All values not starting with the given string."""
  reasonForLeaving_not_starts_with: String

  """All values ending with the given string."""
  reasonForLeaving_ends_with: String

  """All values not ending with the given string."""
  reasonForLeaving_not_ends_with: String
  currentLandlordName: String

  """All values that are not equal to given value."""
  currentLandlordName_not: String

  """All values that are contained in given list."""
  currentLandlordName_in: [String!]

  """All values that are not contained in given list."""
  currentLandlordName_not_in: [String!]

  """All values less than the given value."""
  currentLandlordName_lt: String

  """All values less than or equal the given value."""
  currentLandlordName_lte: String

  """All values greater than the given value."""
  currentLandlordName_gt: String

  """All values greater than or equal the given value."""
  currentLandlordName_gte: String

  """All values containing the given string."""
  currentLandlordName_contains: String

  """All values not containing the given string."""
  currentLandlordName_not_contains: String

  """All values starting with the given string."""
  currentLandlordName_starts_with: String

  """All values not starting with the given string."""
  currentLandlordName_not_starts_with: String

  """All values ending with the given string."""
  currentLandlordName_ends_with: String

  """All values not ending with the given string."""
  currentLandlordName_not_ends_with: String
  currentLandlordNumber: String

  """All values that are not equal to given value."""
  currentLandlordNumber_not: String

  """All values that are contained in given list."""
  currentLandlordNumber_in: [String!]

  """All values that are not contained in given list."""
  currentLandlordNumber_not_in: [String!]

  """All values less than the given value."""
  currentLandlordNumber_lt: String

  """All values less than or equal the given value."""
  currentLandlordNumber_lte: String

  """All values greater than the given value."""
  currentLandlordNumber_gt: String

  """All values greater than or equal the given value."""
  currentLandlordNumber_gte: String

  """All values containing the given string."""
  currentLandlordNumber_contains: String

  """All values not containing the given string."""
  currentLandlordNumber_not_contains: String

  """All values starting with the given string."""
  currentLandlordNumber_starts_with: String

  """All values not starting with the given string."""
  currentLandlordNumber_not_starts_with: String

  """All values ending with the given string."""
  currentLandlordNumber_ends_with: String

  """All values not ending with the given string."""
  currentLandlordNumber_not_ends_with: String
  currentLandlordEmail: String

  """All values that are not equal to given value."""
  currentLandlordEmail_not: String

  """All values that are contained in given list."""
  currentLandlordEmail_in: [String!]

  """All values that are not contained in given list."""
  currentLandlordEmail_not_in: [String!]

  """All values less than the given value."""
  currentLandlordEmail_lt: String

  """All values less than or equal the given value."""
  currentLandlordEmail_lte: String

  """All values greater than the given value."""
  currentLandlordEmail_gt: String

  """All values greater than or equal the given value."""
  currentLandlordEmail_gte: String

  """All values containing the given string."""
  currentLandlordEmail_contains: String

  """All values not containing the given string."""
  currentLandlordEmail_not_contains: String

  """All values starting with the given string."""
  currentLandlordEmail_starts_with: String

  """All values not starting with the given string."""
  currentLandlordEmail_not_starts_with: String

  """All values ending with the given string."""
  currentLandlordEmail_ends_with: String

  """All values not ending with the given string."""
  currentLandlordEmail_not_ends_with: String
  consentToLandlordContact: Boolean

  """All values that are not equal to given value."""
  consentToLandlordContact_not: Boolean
  referrence1Name: String

  """All values that are not equal to given value."""
  referrence1Name_not: String

  """All values that are contained in given list."""
  referrence1Name_in: [String!]

  """All values that are not contained in given list."""
  referrence1Name_not_in: [String!]

  """All values less than the given value."""
  referrence1Name_lt: String

  """All values less than or equal the given value."""
  referrence1Name_lte: String

  """All values greater than the given value."""
  referrence1Name_gt: String

  """All values greater than or equal the given value."""
  referrence1Name_gte: String

  """All values containing the given string."""
  referrence1Name_contains: String

  """All values not containing the given string."""
  referrence1Name_not_contains: String

  """All values starting with the given string."""
  referrence1Name_starts_with: String

  """All values not starting with the given string."""
  referrence1Name_not_starts_with: String

  """All values ending with the given string."""
  referrence1Name_ends_with: String

  """All values not ending with the given string."""
  referrence1Name_not_ends_with: String
  referrence1Phone: String

  """All values that are not equal to given value."""
  referrence1Phone_not: String

  """All values that are contained in given list."""
  referrence1Phone_in: [String!]

  """All values that are not contained in given list."""
  referrence1Phone_not_in: [String!]

  """All values less than the given value."""
  referrence1Phone_lt: String

  """All values less than or equal the given value."""
  referrence1Phone_lte: String

  """All values greater than the given value."""
  referrence1Phone_gt: String

  """All values greater than or equal the given value."""
  referrence1Phone_gte: String

  """All values containing the given string."""
  referrence1Phone_contains: String

  """All values not containing the given string."""
  referrence1Phone_not_contains: String

  """All values starting with the given string."""
  referrence1Phone_starts_with: String

  """All values not starting with the given string."""
  referrence1Phone_not_starts_with: String

  """All values ending with the given string."""
  referrence1Phone_ends_with: String

  """All values not ending with the given string."""
  referrence1Phone_not_ends_with: String
  referrence1Email: String

  """All values that are not equal to given value."""
  referrence1Email_not: String

  """All values that are contained in given list."""
  referrence1Email_in: [String!]

  """All values that are not contained in given list."""
  referrence1Email_not_in: [String!]

  """All values less than the given value."""
  referrence1Email_lt: String

  """All values less than or equal the given value."""
  referrence1Email_lte: String

  """All values greater than the given value."""
  referrence1Email_gt: String

  """All values greater than or equal the given value."""
  referrence1Email_gte: String

  """All values containing the given string."""
  referrence1Email_contains: String

  """All values not containing the given string."""
  referrence1Email_not_contains: String

  """All values starting with the given string."""
  referrence1Email_starts_with: String

  """All values not starting with the given string."""
  referrence1Email_not_starts_with: String

  """All values ending with the given string."""
  referrence1Email_ends_with: String

  """All values not ending with the given string."""
  referrence1Email_not_ends_with: String
  referrence2Name: String

  """All values that are not equal to given value."""
  referrence2Name_not: String

  """All values that are contained in given list."""
  referrence2Name_in: [String!]

  """All values that are not contained in given list."""
  referrence2Name_not_in: [String!]

  """All values less than the given value."""
  referrence2Name_lt: String

  """All values less than or equal the given value."""
  referrence2Name_lte: String

  """All values greater than the given value."""
  referrence2Name_gt: String

  """All values greater than or equal the given value."""
  referrence2Name_gte: String

  """All values containing the given string."""
  referrence2Name_contains: String

  """All values not containing the given string."""
  referrence2Name_not_contains: String

  """All values starting with the given string."""
  referrence2Name_starts_with: String

  """All values not starting with the given string."""
  referrence2Name_not_starts_with: String

  """All values ending with the given string."""
  referrence2Name_ends_with: String

  """All values not ending with the given string."""
  referrence2Name_not_ends_with: String
  referrence2Phone: String

  """All values that are not equal to given value."""
  referrence2Phone_not: String

  """All values that are contained in given list."""
  referrence2Phone_in: [String!]

  """All values that are not contained in given list."""
  referrence2Phone_not_in: [String!]

  """All values less than the given value."""
  referrence2Phone_lt: String

  """All values less than or equal the given value."""
  referrence2Phone_lte: String

  """All values greater than the given value."""
  referrence2Phone_gt: String

  """All values greater than or equal the given value."""
  referrence2Phone_gte: String

  """All values containing the given string."""
  referrence2Phone_contains: String

  """All values not containing the given string."""
  referrence2Phone_not_contains: String

  """All values starting with the given string."""
  referrence2Phone_starts_with: String

  """All values not starting with the given string."""
  referrence2Phone_not_starts_with: String

  """All values ending with the given string."""
  referrence2Phone_ends_with: String

  """All values not ending with the given string."""
  referrence2Phone_not_ends_with: String
  referrence2Email: String

  """All values that are not equal to given value."""
  referrence2Email_not: String

  """All values that are contained in given list."""
  referrence2Email_in: [String!]

  """All values that are not contained in given list."""
  referrence2Email_not_in: [String!]

  """All values less than the given value."""
  referrence2Email_lt: String

  """All values less than or equal the given value."""
  referrence2Email_lte: String

  """All values greater than the given value."""
  referrence2Email_gt: String

  """All values greater than or equal the given value."""
  referrence2Email_gte: String

  """All values containing the given string."""
  referrence2Email_contains: String

  """All values not containing the given string."""
  referrence2Email_not_contains: String

  """All values starting with the given string."""
  referrence2Email_starts_with: String

  """All values not starting with the given string."""
  referrence2Email_not_starts_with: String

  """All values ending with the given string."""
  referrence2Email_ends_with: String

  """All values not ending with the given string."""
  referrence2Email_not_ends_with: String
  acceptedTerms: Boolean

  """All values that are not equal to given value."""
  acceptedTerms_not: Boolean
  rentalApplicant: RentalGroupApplicantWhereInput
  proofOfAddress: FileWhereInput
}

input PreTenancyFormWhereUniqueInput {
  id: ID
}

type Property implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  accommodation(where: AccommodationWhereInput, orderBy: AccommodationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Accommodation!]
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  insulationForm: InsulationForm
  indoorFeatures: [IndoorFeature!]!
  outdoorFeatures: [OutdoorFeature!]!
  heatSources: [HeatSource!]!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  owners(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  creator: User!
  images(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  acceptedTerms: Boolean
  rentalApplications(where: RentalApplicationWhereInput, orderBy: RentalApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalApplication!]
  leases(where: PropertyLeaseWhereInput, orderBy: PropertyLeaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PropertyLease!]
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  activity(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity!]
  appraisals(where: RentalAppraisalWhereInput, orderBy: RentalAppraisalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalAppraisal!]
  tenancyType: TenancyType
  petsAllowed: Boolean
  pets: [Pet!]!
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
}

type PropertyAdvertisement implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PropertyAdvertisementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PropertyAdvertisementEdge]!
  aggregate: AggregatePropertyAdvertisement!
}

input PropertyAdvertisementCreateInput {
  id: ID
}

"""An edge in a connection."""
type PropertyAdvertisementEdge {
  """The item at the end of the edge."""
  node: PropertyAdvertisement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PropertyAdvertisementOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PropertyAdvertisementPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PropertyAdvertisementSubscriptionPayload {
  mutation: MutationType!
  node: PropertyAdvertisement
  updatedFields: [String!]
  previousValues: PropertyAdvertisementPreviousValues
}

input PropertyAdvertisementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyAdvertisementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyAdvertisementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyAdvertisementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PropertyAdvertisementWhereInput
}

input PropertyAdvertisementWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyAdvertisementWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyAdvertisementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyAdvertisementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input PropertyAdvertisementWhereUniqueInput {
  id: ID
}

enum PropertyChattel {
  DISH_WASHER
  RANGE_HOOD
  HOB_OR_STOVE
  WALL_OVEN
  DRAPES
  BLINDS
  HEAT_PUMP
  GAS_FIRE
  HEATED_TOWEL_RAIL
  WALL_HEATER
  ALARM
  IRRIGATION
  SMOKE_DETECTORS
  AUTOMATIC_GARAGE_DOOR
}

"""A connection to a list of items."""
type PropertyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PropertyEdge]!
  aggregate: AggregateProperty!
}

input PropertyCreateheatSourcesInput {
  set: [HeatSource!]
}

input PropertyCreateindoorFeaturesInput {
  set: [IndoorFeature!]
}

input PropertyCreateInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  heatSources: PropertyCreateheatSourcesInput
  pets: PropertyCreatepetsInput
  accommodation: AccommodationCreateManyWithoutPropertyInput
  insulationForm: InsulationFormCreateOneInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
  activity: ActivityCreateManyWithoutPropertyInput
  appraisals: RentalAppraisalCreateManyWithoutPropertyInput
}

input PropertyCreateManyWithoutCreatorInput {
  create: [PropertyCreateWithoutCreatorInput!]
  connect: [PropertyWhereUniqueInput!]
}

input PropertyCreateManyWithoutOwnersInput {
  create: [PropertyCreateWithoutOwnersInput!]
  connect: [PropertyWhereUniqueInput!]
}

input PropertyCreateOneWithoutAccommodationInput {
  create: PropertyCreateWithoutAccommodationInput
  connect: PropertyWhereUniqueInput
}

input PropertyCreateOneWithoutActivityInput {
  create: PropertyCreateWithoutActivityInput
  connect: PropertyWhereUniqueInput
}

input PropertyCreateOneWithoutAppraisalsInput {
  create: PropertyCreateWithoutAppraisalsInput
  connect: PropertyWhereUniqueInput
}

input PropertyCreateOneWithoutLeasesInput {
  create: PropertyCreateWithoutLeasesInput
  connect: PropertyWhereUniqueInput
}

input PropertyCreateOneWithoutRentalApplicationsInput {
  create: PropertyCreateWithoutRentalApplicationsInput
  connect: PropertyWhereUniqueInput
}

input PropertyCreateoutdoorFeaturesInput {
  set: [OutdoorFeature!]
}

input PropertyCreatepetsInput {
  set: [Pet!]
}

input PropertyCreateWithoutAccommodationInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  heatSources: PropertyCreateheatSourcesInput
  pets: PropertyCreatepetsInput
  insulationForm: InsulationFormCreateOneInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
  activity: ActivityCreateManyWithoutPropertyInput
  appraisals: RentalAppraisalCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutActivityInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  heatSources: PropertyCreateheatSourcesInput
  pets: PropertyCreatepetsInput
  accommodation: AccommodationCreateManyWithoutPropertyInput
  insulationForm: InsulationFormCreateOneInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
  appraisals: RentalAppraisalCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutAppraisalsInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  heatSources: PropertyCreateheatSourcesInput
  pets: PropertyCreatepetsInput
  accommodation: AccommodationCreateManyWithoutPropertyInput
  insulationForm: InsulationFormCreateOneInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
  activity: ActivityCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutCreatorInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  heatSources: PropertyCreateheatSourcesInput
  pets: PropertyCreatepetsInput
  accommodation: AccommodationCreateManyWithoutPropertyInput
  insulationForm: InsulationFormCreateOneInput
  owners: UserCreateManyWithoutPropertiesInput
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
  activity: ActivityCreateManyWithoutPropertyInput
  appraisals: RentalAppraisalCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutLeasesInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  heatSources: PropertyCreateheatSourcesInput
  pets: PropertyCreatepetsInput
  accommodation: AccommodationCreateManyWithoutPropertyInput
  insulationForm: InsulationFormCreateOneInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  activity: ActivityCreateManyWithoutPropertyInput
  appraisals: RentalAppraisalCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutOwnersInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  heatSources: PropertyCreateheatSourcesInput
  pets: PropertyCreatepetsInput
  accommodation: AccommodationCreateManyWithoutPropertyInput
  insulationForm: InsulationFormCreateOneInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
  activity: ActivityCreateManyWithoutPropertyInput
  appraisals: RentalAppraisalCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutRentalApplicationsInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  heatSources: PropertyCreateheatSourcesInput
  pets: PropertyCreatepetsInput
  accommodation: AccommodationCreateManyWithoutPropertyInput
  insulationForm: InsulationFormCreateOneInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
  activity: ActivityCreateManyWithoutPropertyInput
  appraisals: RentalAppraisalCreateManyWithoutPropertyInput
}

"""An edge in a connection."""
type PropertyEdge {
  """The item at the end of the edge."""
  node: Property!

  """A cursor for use in pagination."""
  cursor: String!
}

type PropertyLease implements Node {
  id: ID!
  stage: LeaseStage!
  property: Property!
  updatedAt: DateTime!
  createdAt: DateTime!
  lessees(where: LesseeWhereInput, orderBy: LesseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessee!]
  lessors(where: LessorWhereInput, orderBy: LessorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessor!]
  canAcceptPayment: Boolean
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  indoorFeatures: [IndoorFeature!]!
  outdoorFeatures: [OutdoorFeature!]!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  activity(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity!]
  wallet: Wallet
  tenancyType: TenancyType
  petsAllowed: Boolean
  pets: [Pet!]!
  maximumOccupants: Int
  chattels: [PropertyChattel!]!
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
}

"""A connection to a list of items."""
type PropertyLeaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PropertyLeaseEdge]!
  aggregate: AggregatePropertyLease!
}

input PropertyLeaseCreatechattelsInput {
  set: [PropertyChattel!]
}

input PropertyLeaseCreateindoorFeaturesInput {
  set: [IndoorFeature!]
}

input PropertyLeaseCreateInput {
  id: ID
  stage: LeaseStage!
  canAcceptPayment: Boolean
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  pets: PropertyLeaseCreatepetsInput
  chattels: PropertyLeaseCreatechattelsInput
  property: PropertyCreateOneWithoutLeasesInput!
  lessees: LesseeCreateManyWithoutLeaseInput
  lessors: LessorCreateManyWithoutLeaseInput
  activity: ActivityCreateManyWithoutPropertyLeaseInput
  wallet: WalletCreateOneWithoutLeaseInput
}

input PropertyLeaseCreateManyWithoutPropertyInput {
  create: [PropertyLeaseCreateWithoutPropertyInput!]
  connect: [PropertyLeaseWhereUniqueInput!]
}

input PropertyLeaseCreateOneWithoutActivityInput {
  create: PropertyLeaseCreateWithoutActivityInput
  connect: PropertyLeaseWhereUniqueInput
}

input PropertyLeaseCreateOneWithoutLesseesInput {
  create: PropertyLeaseCreateWithoutLesseesInput
  connect: PropertyLeaseWhereUniqueInput
}

input PropertyLeaseCreateOneWithoutLessorsInput {
  create: PropertyLeaseCreateWithoutLessorsInput
  connect: PropertyLeaseWhereUniqueInput
}

input PropertyLeaseCreateOneWithoutWalletInput {
  create: PropertyLeaseCreateWithoutWalletInput
  connect: PropertyLeaseWhereUniqueInput
}

input PropertyLeaseCreateoutdoorFeaturesInput {
  set: [OutdoorFeature!]
}

input PropertyLeaseCreatepetsInput {
  set: [Pet!]
}

input PropertyLeaseCreateWithoutActivityInput {
  id: ID
  stage: LeaseStage!
  canAcceptPayment: Boolean
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  pets: PropertyLeaseCreatepetsInput
  chattels: PropertyLeaseCreatechattelsInput
  property: PropertyCreateOneWithoutLeasesInput!
  lessees: LesseeCreateManyWithoutLeaseInput
  lessors: LessorCreateManyWithoutLeaseInput
  wallet: WalletCreateOneWithoutLeaseInput
}

input PropertyLeaseCreateWithoutLesseesInput {
  id: ID
  stage: LeaseStage!
  canAcceptPayment: Boolean
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  pets: PropertyLeaseCreatepetsInput
  chattels: PropertyLeaseCreatechattelsInput
  property: PropertyCreateOneWithoutLeasesInput!
  lessors: LessorCreateManyWithoutLeaseInput
  activity: ActivityCreateManyWithoutPropertyLeaseInput
  wallet: WalletCreateOneWithoutLeaseInput
}

input PropertyLeaseCreateWithoutLessorsInput {
  id: ID
  stage: LeaseStage!
  canAcceptPayment: Boolean
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  pets: PropertyLeaseCreatepetsInput
  chattels: PropertyLeaseCreatechattelsInput
  property: PropertyCreateOneWithoutLeasesInput!
  lessees: LesseeCreateManyWithoutLeaseInput
  activity: ActivityCreateManyWithoutPropertyLeaseInput
  wallet: WalletCreateOneWithoutLeaseInput
}

input PropertyLeaseCreateWithoutPropertyInput {
  id: ID
  stage: LeaseStage!
  canAcceptPayment: Boolean
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  pets: PropertyLeaseCreatepetsInput
  chattels: PropertyLeaseCreatechattelsInput
  lessees: LesseeCreateManyWithoutLeaseInput
  lessors: LessorCreateManyWithoutLeaseInput
  activity: ActivityCreateManyWithoutPropertyLeaseInput
  wallet: WalletCreateOneWithoutLeaseInput
}

input PropertyLeaseCreateWithoutWalletInput {
  id: ID
  stage: LeaseStage!
  canAcceptPayment: Boolean
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  pets: PropertyLeaseCreatepetsInput
  chattels: PropertyLeaseCreatechattelsInput
  property: PropertyCreateOneWithoutLeasesInput!
  lessees: LesseeCreateManyWithoutLeaseInput
  lessors: LessorCreateManyWithoutLeaseInput
  activity: ActivityCreateManyWithoutPropertyLeaseInput
}

"""An edge in a connection."""
type PropertyLeaseEdge {
  """The item at the end of the edge."""
  node: PropertyLease!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PropertyLeaseOrderByInput {
  id_ASC
  id_DESC
  stage_ASC
  stage_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  canAcceptPayment_ASC
  canAcceptPayment_DESC
  rooms_ASC
  rooms_DESC
  bathrooms_ASC
  bathrooms_DESC
  garageSpaces_ASC
  garageSpaces_DESC
  carportSpaces_ASC
  carportSpaces_DESC
  offStreetSpaces_ASC
  offStreetSpaces_DESC
  rent_ASC
  rent_DESC
  moveInDate_ASC
  moveInDate_DESC
  expiryDate_ASC
  expiryDate_DESC
  location_ASC
  location_DESC
  locationLat_ASC
  locationLat_DESC
  locationLng_ASC
  locationLng_DESC
  tenancyType_ASC
  tenancyType_DESC
  petsAllowed_ASC
  petsAllowed_DESC
  maximumOccupants_ASC
  maximumOccupants_DESC
  landlordProtectionCover_ASC
  landlordProtectionCover_DESC
  freeGlassCover_ASC
  freeGlassCover_DESC
  workingAlarms_ASC
  workingAlarms_DESC
  inHallway3mOfEachBedroom_ASC
  inHallway3mOfEachBedroom_DESC
  tenYearPhotoelectricAlarms_ASC
  tenYearPhotoelectricAlarms_DESC
  alarmsEachLevel_ASC
  alarmsEachLevel_DESC
}

type PropertyLeasePreviousValues {
  id: ID!
  stage: LeaseStage!
  updatedAt: DateTime!
  createdAt: DateTime!
  canAcceptPayment: Boolean
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  indoorFeatures: [IndoorFeature!]!
  outdoorFeatures: [OutdoorFeature!]!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  tenancyType: TenancyType
  petsAllowed: Boolean
  pets: [Pet!]!
  maximumOccupants: Int
  chattels: [PropertyChattel!]!
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
}

input PropertyLeaseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyLeaseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyLeaseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyLeaseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stage: LeaseStage

  """All values that are not equal to given value."""
  stage_not: LeaseStage

  """All values that are contained in given list."""
  stage_in: [LeaseStage!]

  """All values that are not contained in given list."""
  stage_not_in: [LeaseStage!]
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  canAcceptPayment: Boolean

  """All values that are not equal to given value."""
  canAcceptPayment_not: Boolean
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  carportSpaces: Int

  """All values that are not equal to given value."""
  carportSpaces_not: Int

  """All values that are contained in given list."""
  carportSpaces_in: [Int!]

  """All values that are not contained in given list."""
  carportSpaces_not_in: [Int!]

  """All values less than the given value."""
  carportSpaces_lt: Int

  """All values less than or equal the given value."""
  carportSpaces_lte: Int

  """All values greater than the given value."""
  carportSpaces_gt: Int

  """All values greater than or equal the given value."""
  carportSpaces_gte: Int
  offStreetSpaces: Int

  """All values that are not equal to given value."""
  offStreetSpaces_not: Int

  """All values that are contained in given list."""
  offStreetSpaces_in: [Int!]

  """All values that are not contained in given list."""
  offStreetSpaces_not_in: [Int!]

  """All values less than the given value."""
  offStreetSpaces_lt: Int

  """All values less than or equal the given value."""
  offStreetSpaces_lte: Int

  """All values greater than the given value."""
  offStreetSpaces_gt: Int

  """All values greater than or equal the given value."""
  offStreetSpaces_gte: Int
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  moveInDate: DateTime

  """All values that are not equal to given value."""
  moveInDate_not: DateTime

  """All values that are contained in given list."""
  moveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  moveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  moveInDate_lt: DateTime

  """All values less than or equal the given value."""
  moveInDate_lte: DateTime

  """All values greater than the given value."""
  moveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  moveInDate_gte: DateTime
  expiryDate: DateTime

  """All values that are not equal to given value."""
  expiryDate_not: DateTime

  """All values that are contained in given list."""
  expiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  expiryDate_lt: DateTime

  """All values less than or equal the given value."""
  expiryDate_lte: DateTime

  """All values greater than the given value."""
  expiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  expiryDate_gte: DateTime
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  tenancyType: TenancyType

  """All values that are not equal to given value."""
  tenancyType_not: TenancyType

  """All values that are contained in given list."""
  tenancyType_in: [TenancyType!]

  """All values that are not contained in given list."""
  tenancyType_not_in: [TenancyType!]
  petsAllowed: Boolean

  """All values that are not equal to given value."""
  petsAllowed_not: Boolean
  maximumOccupants: Int

  """All values that are not equal to given value."""
  maximumOccupants_not: Int

  """All values that are contained in given list."""
  maximumOccupants_in: [Int!]

  """All values that are not contained in given list."""
  maximumOccupants_not_in: [Int!]

  """All values less than the given value."""
  maximumOccupants_lt: Int

  """All values less than or equal the given value."""
  maximumOccupants_lte: Int

  """All values greater than the given value."""
  maximumOccupants_gt: Int

  """All values greater than or equal the given value."""
  maximumOccupants_gte: Int
  landlordProtectionCover: Boolean

  """All values that are not equal to given value."""
  landlordProtectionCover_not: Boolean
  freeGlassCover: Boolean

  """All values that are not equal to given value."""
  freeGlassCover_not: Boolean
  workingAlarms: Boolean

  """All values that are not equal to given value."""
  workingAlarms_not: Boolean
  inHallway3mOfEachBedroom: Boolean

  """All values that are not equal to given value."""
  inHallway3mOfEachBedroom_not: Boolean
  tenYearPhotoelectricAlarms: Boolean

  """All values that are not equal to given value."""
  tenYearPhotoelectricAlarms_not: Boolean
  alarmsEachLevel: Boolean

  """All values that are not equal to given value."""
  alarmsEachLevel_not: Boolean
}

type PropertyLeaseSubscriptionPayload {
  mutation: MutationType!
  node: PropertyLease
  updatedFields: [String!]
  previousValues: PropertyLeasePreviousValues
}

input PropertyLeaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyLeaseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyLeaseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyLeaseSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PropertyLeaseWhereInput
}

input PropertyLeaseUpdatechattelsInput {
  set: [PropertyChattel!]
}

input PropertyLeaseUpdateindoorFeaturesInput {
  set: [IndoorFeature!]
}

input PropertyLeaseUpdateInput {
  stage: LeaseStage
  canAcceptPayment: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  pets: PropertyLeaseUpdatepetsInput
  chattels: PropertyLeaseUpdatechattelsInput
  property: PropertyUpdateOneRequiredWithoutLeasesInput
  lessees: LesseeUpdateManyWithoutLeaseInput
  lessors: LessorUpdateManyWithoutLeaseInput
  activity: ActivityUpdateManyWithoutPropertyLeaseInput
  wallet: WalletUpdateOneWithoutLeaseInput
}

input PropertyLeaseUpdateManyDataInput {
  stage: LeaseStage
  canAcceptPayment: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  pets: PropertyLeaseUpdatepetsInput
  chattels: PropertyLeaseUpdatechattelsInput
}

input PropertyLeaseUpdateManyMutationInput {
  stage: LeaseStage
  canAcceptPayment: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  pets: PropertyLeaseUpdatepetsInput
  chattels: PropertyLeaseUpdatechattelsInput
}

input PropertyLeaseUpdateManyWithoutPropertyInput {
  create: [PropertyLeaseCreateWithoutPropertyInput!]
  connect: [PropertyLeaseWhereUniqueInput!]
  set: [PropertyLeaseWhereUniqueInput!]
  disconnect: [PropertyLeaseWhereUniqueInput!]
  delete: [PropertyLeaseWhereUniqueInput!]
  update: [PropertyLeaseUpdateWithWhereUniqueWithoutPropertyInput!]
  updateMany: [PropertyLeaseUpdateManyWithWhereNestedInput!]
  deleteMany: [PropertyLeaseScalarWhereInput!]
  upsert: [PropertyLeaseUpsertWithWhereUniqueWithoutPropertyInput!]
}

input PropertyLeaseUpdateManyWithWhereNestedInput {
  where: PropertyLeaseScalarWhereInput!
  data: PropertyLeaseUpdateManyDataInput!
}

input PropertyLeaseUpdateOneWithoutActivityInput {
  create: PropertyLeaseCreateWithoutActivityInput
  connect: PropertyLeaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertyLeaseUpdateWithoutActivityDataInput
  upsert: PropertyLeaseUpsertWithoutActivityInput
}

input PropertyLeaseUpdateOneWithoutLesseesInput {
  create: PropertyLeaseCreateWithoutLesseesInput
  connect: PropertyLeaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertyLeaseUpdateWithoutLesseesDataInput
  upsert: PropertyLeaseUpsertWithoutLesseesInput
}

input PropertyLeaseUpdateOneWithoutLessorsInput {
  create: PropertyLeaseCreateWithoutLessorsInput
  connect: PropertyLeaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertyLeaseUpdateWithoutLessorsDataInput
  upsert: PropertyLeaseUpsertWithoutLessorsInput
}

input PropertyLeaseUpdateOneWithoutWalletInput {
  create: PropertyLeaseCreateWithoutWalletInput
  connect: PropertyLeaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertyLeaseUpdateWithoutWalletDataInput
  upsert: PropertyLeaseUpsertWithoutWalletInput
}

input PropertyLeaseUpdateoutdoorFeaturesInput {
  set: [OutdoorFeature!]
}

input PropertyLeaseUpdatepetsInput {
  set: [Pet!]
}

input PropertyLeaseUpdateWithoutActivityDataInput {
  stage: LeaseStage
  canAcceptPayment: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  pets: PropertyLeaseUpdatepetsInput
  chattels: PropertyLeaseUpdatechattelsInput
  property: PropertyUpdateOneRequiredWithoutLeasesInput
  lessees: LesseeUpdateManyWithoutLeaseInput
  lessors: LessorUpdateManyWithoutLeaseInput
  wallet: WalletUpdateOneWithoutLeaseInput
}

input PropertyLeaseUpdateWithoutLesseesDataInput {
  stage: LeaseStage
  canAcceptPayment: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  pets: PropertyLeaseUpdatepetsInput
  chattels: PropertyLeaseUpdatechattelsInput
  property: PropertyUpdateOneRequiredWithoutLeasesInput
  lessors: LessorUpdateManyWithoutLeaseInput
  activity: ActivityUpdateManyWithoutPropertyLeaseInput
  wallet: WalletUpdateOneWithoutLeaseInput
}

input PropertyLeaseUpdateWithoutLessorsDataInput {
  stage: LeaseStage
  canAcceptPayment: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  pets: PropertyLeaseUpdatepetsInput
  chattels: PropertyLeaseUpdatechattelsInput
  property: PropertyUpdateOneRequiredWithoutLeasesInput
  lessees: LesseeUpdateManyWithoutLeaseInput
  activity: ActivityUpdateManyWithoutPropertyLeaseInput
  wallet: WalletUpdateOneWithoutLeaseInput
}

input PropertyLeaseUpdateWithoutPropertyDataInput {
  stage: LeaseStage
  canAcceptPayment: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  pets: PropertyLeaseUpdatepetsInput
  chattels: PropertyLeaseUpdatechattelsInput
  lessees: LesseeUpdateManyWithoutLeaseInput
  lessors: LessorUpdateManyWithoutLeaseInput
  activity: ActivityUpdateManyWithoutPropertyLeaseInput
  wallet: WalletUpdateOneWithoutLeaseInput
}

input PropertyLeaseUpdateWithoutWalletDataInput {
  stage: LeaseStage
  canAcceptPayment: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  pets: PropertyLeaseUpdatepetsInput
  chattels: PropertyLeaseUpdatechattelsInput
  property: PropertyUpdateOneRequiredWithoutLeasesInput
  lessees: LesseeUpdateManyWithoutLeaseInput
  lessors: LessorUpdateManyWithoutLeaseInput
  activity: ActivityUpdateManyWithoutPropertyLeaseInput
}

input PropertyLeaseUpdateWithWhereUniqueWithoutPropertyInput {
  where: PropertyLeaseWhereUniqueInput!
  data: PropertyLeaseUpdateWithoutPropertyDataInput!
}

input PropertyLeaseUpsertWithoutActivityInput {
  update: PropertyLeaseUpdateWithoutActivityDataInput!
  create: PropertyLeaseCreateWithoutActivityInput!
}

input PropertyLeaseUpsertWithoutLesseesInput {
  update: PropertyLeaseUpdateWithoutLesseesDataInput!
  create: PropertyLeaseCreateWithoutLesseesInput!
}

input PropertyLeaseUpsertWithoutLessorsInput {
  update: PropertyLeaseUpdateWithoutLessorsDataInput!
  create: PropertyLeaseCreateWithoutLessorsInput!
}

input PropertyLeaseUpsertWithoutWalletInput {
  update: PropertyLeaseUpdateWithoutWalletDataInput!
  create: PropertyLeaseCreateWithoutWalletInput!
}

input PropertyLeaseUpsertWithWhereUniqueWithoutPropertyInput {
  where: PropertyLeaseWhereUniqueInput!
  update: PropertyLeaseUpdateWithoutPropertyDataInput!
  create: PropertyLeaseCreateWithoutPropertyInput!
}

input PropertyLeaseWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyLeaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyLeaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyLeaseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  stage: LeaseStage

  """All values that are not equal to given value."""
  stage_not: LeaseStage

  """All values that are contained in given list."""
  stage_in: [LeaseStage!]

  """All values that are not contained in given list."""
  stage_not_in: [LeaseStage!]
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  canAcceptPayment: Boolean

  """All values that are not equal to given value."""
  canAcceptPayment_not: Boolean
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  carportSpaces: Int

  """All values that are not equal to given value."""
  carportSpaces_not: Int

  """All values that are contained in given list."""
  carportSpaces_in: [Int!]

  """All values that are not contained in given list."""
  carportSpaces_not_in: [Int!]

  """All values less than the given value."""
  carportSpaces_lt: Int

  """All values less than or equal the given value."""
  carportSpaces_lte: Int

  """All values greater than the given value."""
  carportSpaces_gt: Int

  """All values greater than or equal the given value."""
  carportSpaces_gte: Int
  offStreetSpaces: Int

  """All values that are not equal to given value."""
  offStreetSpaces_not: Int

  """All values that are contained in given list."""
  offStreetSpaces_in: [Int!]

  """All values that are not contained in given list."""
  offStreetSpaces_not_in: [Int!]

  """All values less than the given value."""
  offStreetSpaces_lt: Int

  """All values less than or equal the given value."""
  offStreetSpaces_lte: Int

  """All values greater than the given value."""
  offStreetSpaces_gt: Int

  """All values greater than or equal the given value."""
  offStreetSpaces_gte: Int
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  moveInDate: DateTime

  """All values that are not equal to given value."""
  moveInDate_not: DateTime

  """All values that are contained in given list."""
  moveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  moveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  moveInDate_lt: DateTime

  """All values less than or equal the given value."""
  moveInDate_lte: DateTime

  """All values greater than the given value."""
  moveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  moveInDate_gte: DateTime
  expiryDate: DateTime

  """All values that are not equal to given value."""
  expiryDate_not: DateTime

  """All values that are contained in given list."""
  expiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  expiryDate_lt: DateTime

  """All values less than or equal the given value."""
  expiryDate_lte: DateTime

  """All values greater than the given value."""
  expiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  expiryDate_gte: DateTime
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  tenancyType: TenancyType

  """All values that are not equal to given value."""
  tenancyType_not: TenancyType

  """All values that are contained in given list."""
  tenancyType_in: [TenancyType!]

  """All values that are not contained in given list."""
  tenancyType_not_in: [TenancyType!]
  petsAllowed: Boolean

  """All values that are not equal to given value."""
  petsAllowed_not: Boolean
  maximumOccupants: Int

  """All values that are not equal to given value."""
  maximumOccupants_not: Int

  """All values that are contained in given list."""
  maximumOccupants_in: [Int!]

  """All values that are not contained in given list."""
  maximumOccupants_not_in: [Int!]

  """All values less than the given value."""
  maximumOccupants_lt: Int

  """All values less than or equal the given value."""
  maximumOccupants_lte: Int

  """All values greater than the given value."""
  maximumOccupants_gt: Int

  """All values greater than or equal the given value."""
  maximumOccupants_gte: Int
  landlordProtectionCover: Boolean

  """All values that are not equal to given value."""
  landlordProtectionCover_not: Boolean
  freeGlassCover: Boolean

  """All values that are not equal to given value."""
  freeGlassCover_not: Boolean
  workingAlarms: Boolean

  """All values that are not equal to given value."""
  workingAlarms_not: Boolean
  inHallway3mOfEachBedroom: Boolean

  """All values that are not equal to given value."""
  inHallway3mOfEachBedroom_not: Boolean
  tenYearPhotoelectricAlarms: Boolean

  """All values that are not equal to given value."""
  tenYearPhotoelectricAlarms_not: Boolean
  alarmsEachLevel: Boolean

  """All values that are not equal to given value."""
  alarmsEachLevel_not: Boolean
  property: PropertyWhereInput
  lessees_every: LesseeWhereInput
  lessees_some: LesseeWhereInput
  lessees_none: LesseeWhereInput
  lessors_every: LessorWhereInput
  lessors_some: LessorWhereInput
  lessors_none: LessorWhereInput
  activity_every: ActivityWhereInput
  activity_some: ActivityWhereInput
  activity_none: ActivityWhereInput
  wallet: WalletWhereInput
}

input PropertyLeaseWhereUniqueInput {
  id: ID
}

enum PropertyOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  headline_ASC
  headline_DESC
  rooms_ASC
  rooms_DESC
  lowestRoomPrice_ASC
  lowestRoomPrice_DESC
  highestRoomPrice_ASC
  highestRoomPrice_DESC
  useAdvancedRent_ASC
  useAdvancedRent_DESC
  bathrooms_ASC
  bathrooms_DESC
  garageSpaces_ASC
  garageSpaces_DESC
  carportSpaces_ASC
  carportSpaces_DESC
  offStreetSpaces_ASC
  offStreetSpaces_DESC
  rent_ASC
  rent_DESC
  moveInDate_ASC
  moveInDate_DESC
  expiryDate_ASC
  expiryDate_DESC
  onTheMarket_ASC
  onTheMarket_DESC
  location_ASC
  location_DESC
  locationLat_ASC
  locationLat_DESC
  locationLng_ASC
  locationLng_DESC
  acceptedTerms_ASC
  acceptedTerms_DESC
  isLeased_ASC
  isLeased_DESC
  lastLeaseId_ASC
  lastLeaseId_DESC
  leaseExpiryDate_ASC
  leaseExpiryDate_DESC
  rehouserStamp_ASC
  rehouserStamp_DESC
  tenancyType_ASC
  tenancyType_DESC
  petsAllowed_ASC
  petsAllowed_DESC
  maximumOccupants_ASC
  maximumOccupants_DESC
  landlordProtectionCover_ASC
  landlordProtectionCover_DESC
  freeGlassCover_ASC
  freeGlassCover_DESC
  workingAlarms_ASC
  workingAlarms_DESC
  inHallway3mOfEachBedroom_ASC
  inHallway3mOfEachBedroom_DESC
  tenYearPhotoelectricAlarms_ASC
  tenYearPhotoelectricAlarms_DESC
  alarmsEachLevel_ASC
  alarmsEachLevel_DESC
}

type PropertyPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  type: PropertyType
  headline: String
  rooms: Int!
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  indoorFeatures: [IndoorFeature!]!
  outdoorFeatures: [OutdoorFeature!]!
  heatSources: [HeatSource!]!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  pets: [Pet!]!
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
}

input PropertyScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: PropertyType

  """All values that are not equal to given value."""
  type_not: PropertyType

  """All values that are contained in given list."""
  type_in: [PropertyType!]

  """All values that are not contained in given list."""
  type_not_in: [PropertyType!]
  headline: String

  """All values that are not equal to given value."""
  headline_not: String

  """All values that are contained in given list."""
  headline_in: [String!]

  """All values that are not contained in given list."""
  headline_not_in: [String!]

  """All values less than the given value."""
  headline_lt: String

  """All values less than or equal the given value."""
  headline_lte: String

  """All values greater than the given value."""
  headline_gt: String

  """All values greater than or equal the given value."""
  headline_gte: String

  """All values containing the given string."""
  headline_contains: String

  """All values not containing the given string."""
  headline_not_contains: String

  """All values starting with the given string."""
  headline_starts_with: String

  """All values not starting with the given string."""
  headline_not_starts_with: String

  """All values ending with the given string."""
  headline_ends_with: String

  """All values not ending with the given string."""
  headline_not_ends_with: String
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  lowestRoomPrice: Float

  """All values that are not equal to given value."""
  lowestRoomPrice_not: Float

  """All values that are contained in given list."""
  lowestRoomPrice_in: [Float!]

  """All values that are not contained in given list."""
  lowestRoomPrice_not_in: [Float!]

  """All values less than the given value."""
  lowestRoomPrice_lt: Float

  """All values less than or equal the given value."""
  lowestRoomPrice_lte: Float

  """All values greater than the given value."""
  lowestRoomPrice_gt: Float

  """All values greater than or equal the given value."""
  lowestRoomPrice_gte: Float
  highestRoomPrice: Float

  """All values that are not equal to given value."""
  highestRoomPrice_not: Float

  """All values that are contained in given list."""
  highestRoomPrice_in: [Float!]

  """All values that are not contained in given list."""
  highestRoomPrice_not_in: [Float!]

  """All values less than the given value."""
  highestRoomPrice_lt: Float

  """All values less than or equal the given value."""
  highestRoomPrice_lte: Float

  """All values greater than the given value."""
  highestRoomPrice_gt: Float

  """All values greater than or equal the given value."""
  highestRoomPrice_gte: Float
  useAdvancedRent: Boolean

  """All values that are not equal to given value."""
  useAdvancedRent_not: Boolean
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  carportSpaces: Int

  """All values that are not equal to given value."""
  carportSpaces_not: Int

  """All values that are contained in given list."""
  carportSpaces_in: [Int!]

  """All values that are not contained in given list."""
  carportSpaces_not_in: [Int!]

  """All values less than the given value."""
  carportSpaces_lt: Int

  """All values less than or equal the given value."""
  carportSpaces_lte: Int

  """All values greater than the given value."""
  carportSpaces_gt: Int

  """All values greater than or equal the given value."""
  carportSpaces_gte: Int
  offStreetSpaces: Int

  """All values that are not equal to given value."""
  offStreetSpaces_not: Int

  """All values that are contained in given list."""
  offStreetSpaces_in: [Int!]

  """All values that are not contained in given list."""
  offStreetSpaces_not_in: [Int!]

  """All values less than the given value."""
  offStreetSpaces_lt: Int

  """All values less than or equal the given value."""
  offStreetSpaces_lte: Int

  """All values greater than the given value."""
  offStreetSpaces_gt: Int

  """All values greater than or equal the given value."""
  offStreetSpaces_gte: Int
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  moveInDate: DateTime

  """All values that are not equal to given value."""
  moveInDate_not: DateTime

  """All values that are contained in given list."""
  moveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  moveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  moveInDate_lt: DateTime

  """All values less than or equal the given value."""
  moveInDate_lte: DateTime

  """All values greater than the given value."""
  moveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  moveInDate_gte: DateTime
  expiryDate: DateTime

  """All values that are not equal to given value."""
  expiryDate_not: DateTime

  """All values that are contained in given list."""
  expiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  expiryDate_lt: DateTime

  """All values less than or equal the given value."""
  expiryDate_lte: DateTime

  """All values greater than the given value."""
  expiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  expiryDate_gte: DateTime
  onTheMarket: Boolean

  """All values that are not equal to given value."""
  onTheMarket_not: Boolean
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  acceptedTerms: Boolean

  """All values that are not equal to given value."""
  acceptedTerms_not: Boolean
  isLeased: Boolean

  """All values that are not equal to given value."""
  isLeased_not: Boolean
  lastLeaseId: String

  """All values that are not equal to given value."""
  lastLeaseId_not: String

  """All values that are contained in given list."""
  lastLeaseId_in: [String!]

  """All values that are not contained in given list."""
  lastLeaseId_not_in: [String!]

  """All values less than the given value."""
  lastLeaseId_lt: String

  """All values less than or equal the given value."""
  lastLeaseId_lte: String

  """All values greater than the given value."""
  lastLeaseId_gt: String

  """All values greater than or equal the given value."""
  lastLeaseId_gte: String

  """All values containing the given string."""
  lastLeaseId_contains: String

  """All values not containing the given string."""
  lastLeaseId_not_contains: String

  """All values starting with the given string."""
  lastLeaseId_starts_with: String

  """All values not starting with the given string."""
  lastLeaseId_not_starts_with: String

  """All values ending with the given string."""
  lastLeaseId_ends_with: String

  """All values not ending with the given string."""
  lastLeaseId_not_ends_with: String
  leaseExpiryDate: DateTime

  """All values that are not equal to given value."""
  leaseExpiryDate_not: DateTime

  """All values that are contained in given list."""
  leaseExpiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  leaseExpiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  leaseExpiryDate_lt: DateTime

  """All values less than or equal the given value."""
  leaseExpiryDate_lte: DateTime

  """All values greater than the given value."""
  leaseExpiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  leaseExpiryDate_gte: DateTime
  rehouserStamp: Boolean

  """All values that are not equal to given value."""
  rehouserStamp_not: Boolean
  tenancyType: TenancyType

  """All values that are not equal to given value."""
  tenancyType_not: TenancyType

  """All values that are contained in given list."""
  tenancyType_in: [TenancyType!]

  """All values that are not contained in given list."""
  tenancyType_not_in: [TenancyType!]
  petsAllowed: Boolean

  """All values that are not equal to given value."""
  petsAllowed_not: Boolean
  maximumOccupants: Int

  """All values that are not equal to given value."""
  maximumOccupants_not: Int

  """All values that are contained in given list."""
  maximumOccupants_in: [Int!]

  """All values that are not contained in given list."""
  maximumOccupants_not_in: [Int!]

  """All values less than the given value."""
  maximumOccupants_lt: Int

  """All values less than or equal the given value."""
  maximumOccupants_lte: Int

  """All values greater than the given value."""
  maximumOccupants_gt: Int

  """All values greater than or equal the given value."""
  maximumOccupants_gte: Int
  landlordProtectionCover: Boolean

  """All values that are not equal to given value."""
  landlordProtectionCover_not: Boolean
  freeGlassCover: Boolean

  """All values that are not equal to given value."""
  freeGlassCover_not: Boolean
  workingAlarms: Boolean

  """All values that are not equal to given value."""
  workingAlarms_not: Boolean
  inHallway3mOfEachBedroom: Boolean

  """All values that are not equal to given value."""
  inHallway3mOfEachBedroom_not: Boolean
  tenYearPhotoelectricAlarms: Boolean

  """All values that are not equal to given value."""
  tenYearPhotoelectricAlarms_not: Boolean
  alarmsEachLevel: Boolean

  """All values that are not equal to given value."""
  alarmsEachLevel_not: Boolean
}

type PropertySubscriptionPayload {
  mutation: MutationType!
  node: Property
  updatedFields: [String!]
  previousValues: PropertyPreviousValues
}

input PropertySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PropertyWhereInput
}

enum PropertyType {
  HOUSE
  APARTMENT
  UNIT
  TOWNHOUSE
  VILLA
  RETIREMENT_LIVING
  STUDIO
  FARM_LAND
  ACREAGE_SEMI_RURAL
  OTHER
}

input PropertyUpdateheatSourcesInput {
  set: [HeatSource!]
}

input PropertyUpdateindoorFeaturesInput {
  set: [IndoorFeature!]
}

input PropertyUpdateInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
  accommodation: AccommodationUpdateManyWithoutPropertyInput
  insulationForm: InsulationFormUpdateOneInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
  activity: ActivityUpdateManyWithoutPropertyInput
  appraisals: RentalAppraisalUpdateManyWithoutPropertyInput
}

input PropertyUpdateManyDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
}

input PropertyUpdateManyMutationInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
}

input PropertyUpdateManyWithoutCreatorInput {
  create: [PropertyCreateWithoutCreatorInput!]
  connect: [PropertyWhereUniqueInput!]
  set: [PropertyWhereUniqueInput!]
  disconnect: [PropertyWhereUniqueInput!]
  delete: [PropertyWhereUniqueInput!]
  update: [PropertyUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [PropertyUpdateManyWithWhereNestedInput!]
  deleteMany: [PropertyScalarWhereInput!]
  upsert: [PropertyUpsertWithWhereUniqueWithoutCreatorInput!]
}

input PropertyUpdateManyWithoutOwnersInput {
  create: [PropertyCreateWithoutOwnersInput!]
  connect: [PropertyWhereUniqueInput!]
  set: [PropertyWhereUniqueInput!]
  disconnect: [PropertyWhereUniqueInput!]
  delete: [PropertyWhereUniqueInput!]
  update: [PropertyUpdateWithWhereUniqueWithoutOwnersInput!]
  updateMany: [PropertyUpdateManyWithWhereNestedInput!]
  deleteMany: [PropertyScalarWhereInput!]
  upsert: [PropertyUpsertWithWhereUniqueWithoutOwnersInput!]
}

input PropertyUpdateManyWithWhereNestedInput {
  where: PropertyScalarWhereInput!
  data: PropertyUpdateManyDataInput!
}

input PropertyUpdateOneRequiredWithoutAccommodationInput {
  create: PropertyCreateWithoutAccommodationInput
  connect: PropertyWhereUniqueInput
  update: PropertyUpdateWithoutAccommodationDataInput
  upsert: PropertyUpsertWithoutAccommodationInput
}

input PropertyUpdateOneRequiredWithoutLeasesInput {
  create: PropertyCreateWithoutLeasesInput
  connect: PropertyWhereUniqueInput
  update: PropertyUpdateWithoutLeasesDataInput
  upsert: PropertyUpsertWithoutLeasesInput
}

input PropertyUpdateOneRequiredWithoutRentalApplicationsInput {
  create: PropertyCreateWithoutRentalApplicationsInput
  connect: PropertyWhereUniqueInput
  update: PropertyUpdateWithoutRentalApplicationsDataInput
  upsert: PropertyUpsertWithoutRentalApplicationsInput
}

input PropertyUpdateOneWithoutActivityInput {
  create: PropertyCreateWithoutActivityInput
  connect: PropertyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertyUpdateWithoutActivityDataInput
  upsert: PropertyUpsertWithoutActivityInput
}

input PropertyUpdateOneWithoutAppraisalsInput {
  create: PropertyCreateWithoutAppraisalsInput
  connect: PropertyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertyUpdateWithoutAppraisalsDataInput
  upsert: PropertyUpsertWithoutAppraisalsInput
}

input PropertyUpdateoutdoorFeaturesInput {
  set: [OutdoorFeature!]
}

input PropertyUpdatepetsInput {
  set: [Pet!]
}

input PropertyUpdateWithoutAccommodationDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
  insulationForm: InsulationFormUpdateOneInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
  activity: ActivityUpdateManyWithoutPropertyInput
  appraisals: RentalAppraisalUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutActivityDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
  accommodation: AccommodationUpdateManyWithoutPropertyInput
  insulationForm: InsulationFormUpdateOneInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
  appraisals: RentalAppraisalUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutAppraisalsDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
  accommodation: AccommodationUpdateManyWithoutPropertyInput
  insulationForm: InsulationFormUpdateOneInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
  activity: ActivityUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutCreatorDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
  accommodation: AccommodationUpdateManyWithoutPropertyInput
  insulationForm: InsulationFormUpdateOneInput
  owners: UserUpdateManyWithoutPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
  activity: ActivityUpdateManyWithoutPropertyInput
  appraisals: RentalAppraisalUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutLeasesDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
  accommodation: AccommodationUpdateManyWithoutPropertyInput
  insulationForm: InsulationFormUpdateOneInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  activity: ActivityUpdateManyWithoutPropertyInput
  appraisals: RentalAppraisalUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutOwnersDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
  accommodation: AccommodationUpdateManyWithoutPropertyInput
  insulationForm: InsulationFormUpdateOneInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
  activity: ActivityUpdateManyWithoutPropertyInput
  appraisals: RentalAppraisalUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutRentalApplicationsDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  lowestRoomPrice: Float
  highestRoomPrice: Float
  useAdvancedRent: Boolean
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  acceptedTerms: Boolean
  isLeased: Boolean
  lastLeaseId: String
  leaseExpiryDate: DateTime
  rehouserStamp: Boolean
  tenancyType: TenancyType
  petsAllowed: Boolean
  maximumOccupants: Int
  landlordProtectionCover: Boolean
  freeGlassCover: Boolean
  workingAlarms: Boolean
  inHallway3mOfEachBedroom: Boolean
  tenYearPhotoelectricAlarms: Boolean
  alarmsEachLevel: Boolean
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  heatSources: PropertyUpdateheatSourcesInput
  pets: PropertyUpdatepetsInput
  accommodation: AccommodationUpdateManyWithoutPropertyInput
  insulationForm: InsulationFormUpdateOneInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
  activity: ActivityUpdateManyWithoutPropertyInput
  appraisals: RentalAppraisalUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithWhereUniqueWithoutCreatorInput {
  where: PropertyWhereUniqueInput!
  data: PropertyUpdateWithoutCreatorDataInput!
}

input PropertyUpdateWithWhereUniqueWithoutOwnersInput {
  where: PropertyWhereUniqueInput!
  data: PropertyUpdateWithoutOwnersDataInput!
}

input PropertyUpsertWithoutAccommodationInput {
  update: PropertyUpdateWithoutAccommodationDataInput!
  create: PropertyCreateWithoutAccommodationInput!
}

input PropertyUpsertWithoutActivityInput {
  update: PropertyUpdateWithoutActivityDataInput!
  create: PropertyCreateWithoutActivityInput!
}

input PropertyUpsertWithoutAppraisalsInput {
  update: PropertyUpdateWithoutAppraisalsDataInput!
  create: PropertyCreateWithoutAppraisalsInput!
}

input PropertyUpsertWithoutLeasesInput {
  update: PropertyUpdateWithoutLeasesDataInput!
  create: PropertyCreateWithoutLeasesInput!
}

input PropertyUpsertWithoutRentalApplicationsInput {
  update: PropertyUpdateWithoutRentalApplicationsDataInput!
  create: PropertyCreateWithoutRentalApplicationsInput!
}

input PropertyUpsertWithWhereUniqueWithoutCreatorInput {
  where: PropertyWhereUniqueInput!
  update: PropertyUpdateWithoutCreatorDataInput!
  create: PropertyCreateWithoutCreatorInput!
}

input PropertyUpsertWithWhereUniqueWithoutOwnersInput {
  where: PropertyWhereUniqueInput!
  update: PropertyUpdateWithoutOwnersDataInput!
  create: PropertyCreateWithoutOwnersInput!
}

input PropertyWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: PropertyType

  """All values that are not equal to given value."""
  type_not: PropertyType

  """All values that are contained in given list."""
  type_in: [PropertyType!]

  """All values that are not contained in given list."""
  type_not_in: [PropertyType!]
  headline: String

  """All values that are not equal to given value."""
  headline_not: String

  """All values that are contained in given list."""
  headline_in: [String!]

  """All values that are not contained in given list."""
  headline_not_in: [String!]

  """All values less than the given value."""
  headline_lt: String

  """All values less than or equal the given value."""
  headline_lte: String

  """All values greater than the given value."""
  headline_gt: String

  """All values greater than or equal the given value."""
  headline_gte: String

  """All values containing the given string."""
  headline_contains: String

  """All values not containing the given string."""
  headline_not_contains: String

  """All values starting with the given string."""
  headline_starts_with: String

  """All values not starting with the given string."""
  headline_not_starts_with: String

  """All values ending with the given string."""
  headline_ends_with: String

  """All values not ending with the given string."""
  headline_not_ends_with: String
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  lowestRoomPrice: Float

  """All values that are not equal to given value."""
  lowestRoomPrice_not: Float

  """All values that are contained in given list."""
  lowestRoomPrice_in: [Float!]

  """All values that are not contained in given list."""
  lowestRoomPrice_not_in: [Float!]

  """All values less than the given value."""
  lowestRoomPrice_lt: Float

  """All values less than or equal the given value."""
  lowestRoomPrice_lte: Float

  """All values greater than the given value."""
  lowestRoomPrice_gt: Float

  """All values greater than or equal the given value."""
  lowestRoomPrice_gte: Float
  highestRoomPrice: Float

  """All values that are not equal to given value."""
  highestRoomPrice_not: Float

  """All values that are contained in given list."""
  highestRoomPrice_in: [Float!]

  """All values that are not contained in given list."""
  highestRoomPrice_not_in: [Float!]

  """All values less than the given value."""
  highestRoomPrice_lt: Float

  """All values less than or equal the given value."""
  highestRoomPrice_lte: Float

  """All values greater than the given value."""
  highestRoomPrice_gt: Float

  """All values greater than or equal the given value."""
  highestRoomPrice_gte: Float
  useAdvancedRent: Boolean

  """All values that are not equal to given value."""
  useAdvancedRent_not: Boolean
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  carportSpaces: Int

  """All values that are not equal to given value."""
  carportSpaces_not: Int

  """All values that are contained in given list."""
  carportSpaces_in: [Int!]

  """All values that are not contained in given list."""
  carportSpaces_not_in: [Int!]

  """All values less than the given value."""
  carportSpaces_lt: Int

  """All values less than or equal the given value."""
  carportSpaces_lte: Int

  """All values greater than the given value."""
  carportSpaces_gt: Int

  """All values greater than or equal the given value."""
  carportSpaces_gte: Int
  offStreetSpaces: Int

  """All values that are not equal to given value."""
  offStreetSpaces_not: Int

  """All values that are contained in given list."""
  offStreetSpaces_in: [Int!]

  """All values that are not contained in given list."""
  offStreetSpaces_not_in: [Int!]

  """All values less than the given value."""
  offStreetSpaces_lt: Int

  """All values less than or equal the given value."""
  offStreetSpaces_lte: Int

  """All values greater than the given value."""
  offStreetSpaces_gt: Int

  """All values greater than or equal the given value."""
  offStreetSpaces_gte: Int
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  moveInDate: DateTime

  """All values that are not equal to given value."""
  moveInDate_not: DateTime

  """All values that are contained in given list."""
  moveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  moveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  moveInDate_lt: DateTime

  """All values less than or equal the given value."""
  moveInDate_lte: DateTime

  """All values greater than the given value."""
  moveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  moveInDate_gte: DateTime
  expiryDate: DateTime

  """All values that are not equal to given value."""
  expiryDate_not: DateTime

  """All values that are contained in given list."""
  expiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  expiryDate_lt: DateTime

  """All values less than or equal the given value."""
  expiryDate_lte: DateTime

  """All values greater than the given value."""
  expiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  expiryDate_gte: DateTime
  onTheMarket: Boolean

  """All values that are not equal to given value."""
  onTheMarket_not: Boolean
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  acceptedTerms: Boolean

  """All values that are not equal to given value."""
  acceptedTerms_not: Boolean
  isLeased: Boolean

  """All values that are not equal to given value."""
  isLeased_not: Boolean
  lastLeaseId: String

  """All values that are not equal to given value."""
  lastLeaseId_not: String

  """All values that are contained in given list."""
  lastLeaseId_in: [String!]

  """All values that are not contained in given list."""
  lastLeaseId_not_in: [String!]

  """All values less than the given value."""
  lastLeaseId_lt: String

  """All values less than or equal the given value."""
  lastLeaseId_lte: String

  """All values greater than the given value."""
  lastLeaseId_gt: String

  """All values greater than or equal the given value."""
  lastLeaseId_gte: String

  """All values containing the given string."""
  lastLeaseId_contains: String

  """All values not containing the given string."""
  lastLeaseId_not_contains: String

  """All values starting with the given string."""
  lastLeaseId_starts_with: String

  """All values not starting with the given string."""
  lastLeaseId_not_starts_with: String

  """All values ending with the given string."""
  lastLeaseId_ends_with: String

  """All values not ending with the given string."""
  lastLeaseId_not_ends_with: String
  leaseExpiryDate: DateTime

  """All values that are not equal to given value."""
  leaseExpiryDate_not: DateTime

  """All values that are contained in given list."""
  leaseExpiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  leaseExpiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  leaseExpiryDate_lt: DateTime

  """All values less than or equal the given value."""
  leaseExpiryDate_lte: DateTime

  """All values greater than the given value."""
  leaseExpiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  leaseExpiryDate_gte: DateTime
  rehouserStamp: Boolean

  """All values that are not equal to given value."""
  rehouserStamp_not: Boolean
  tenancyType: TenancyType

  """All values that are not equal to given value."""
  tenancyType_not: TenancyType

  """All values that are contained in given list."""
  tenancyType_in: [TenancyType!]

  """All values that are not contained in given list."""
  tenancyType_not_in: [TenancyType!]
  petsAllowed: Boolean

  """All values that are not equal to given value."""
  petsAllowed_not: Boolean
  maximumOccupants: Int

  """All values that are not equal to given value."""
  maximumOccupants_not: Int

  """All values that are contained in given list."""
  maximumOccupants_in: [Int!]

  """All values that are not contained in given list."""
  maximumOccupants_not_in: [Int!]

  """All values less than the given value."""
  maximumOccupants_lt: Int

  """All values less than or equal the given value."""
  maximumOccupants_lte: Int

  """All values greater than the given value."""
  maximumOccupants_gt: Int

  """All values greater than or equal the given value."""
  maximumOccupants_gte: Int
  landlordProtectionCover: Boolean

  """All values that are not equal to given value."""
  landlordProtectionCover_not: Boolean
  freeGlassCover: Boolean

  """All values that are not equal to given value."""
  freeGlassCover_not: Boolean
  workingAlarms: Boolean

  """All values that are not equal to given value."""
  workingAlarms_not: Boolean
  inHallway3mOfEachBedroom: Boolean

  """All values that are not equal to given value."""
  inHallway3mOfEachBedroom_not: Boolean
  tenYearPhotoelectricAlarms: Boolean

  """All values that are not equal to given value."""
  tenYearPhotoelectricAlarms_not: Boolean
  alarmsEachLevel: Boolean

  """All values that are not equal to given value."""
  alarmsEachLevel_not: Boolean
  accommodation_every: AccommodationWhereInput
  accommodation_some: AccommodationWhereInput
  accommodation_none: AccommodationWhereInput
  insulationForm: InsulationFormWhereInput
  owners_every: UserWhereInput
  owners_some: UserWhereInput
  owners_none: UserWhereInput
  creator: UserWhereInput
  images_every: FileWhereInput
  images_some: FileWhereInput
  images_none: FileWhereInput
  rentalApplications_every: RentalApplicationWhereInput
  rentalApplications_some: RentalApplicationWhereInput
  rentalApplications_none: RentalApplicationWhereInput
  leases_every: PropertyLeaseWhereInput
  leases_some: PropertyLeaseWhereInput
  leases_none: PropertyLeaseWhereInput
  activity_every: ActivityWhereInput
  activity_some: ActivityWhereInput
  activity_none: ActivityWhereInput
  appraisals_every: RentalAppraisalWhereInput
  appraisals_some: RentalAppraisalWhereInput
  appraisals_none: RentalAppraisalWhereInput
}

input PropertyWhereUniqueInput {
  id: ID
}

type Query {
  bankDetails(where: BankDetailWhereInput, orderBy: BankDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BankDetail]!
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  seens(where: SeenWhereInput, orderBy: SeenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Seen]!
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat]!
  friendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest]!
  properties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property]!
  propertyLeases(where: PropertyLeaseWhereInput, orderBy: PropertyLeaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PropertyLease]!
  rentalAppraisals(where: RentalAppraisalWhereInput, orderBy: RentalAppraisalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalAppraisal]!
  accommodations(where: AccommodationWhereInput, orderBy: AccommodationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Accommodation]!
  rentalGroupApplicants(where: RentalGroupApplicantWhereInput, orderBy: RentalGroupApplicantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalGroupApplicant]!
  propertyAdvertisements(where: PropertyAdvertisementWhereInput, orderBy: PropertyAdvertisementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PropertyAdvertisement]!
  rentalApplications(where: RentalApplicationWhereInput, orderBy: RentalApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalApplication]!
  lessees(where: LesseeWhereInput, orderBy: LesseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessee]!
  lessors(where: LessorWhereInput, orderBy: LessorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessor]!
  wallets(where: WalletWhereInput, orderBy: WalletOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Wallet]!
  charges(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charge]!
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment]!
  preTenancyForms(where: PreTenancyFormWhereInput, orderBy: PreTenancyFormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PreTenancyForm]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  insulationForms(where: InsulationFormWhereInput, orderBy: InsulationFormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InsulationForm]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  creditCards(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CreditCard]!
  bankDetail(where: BankDetailWhereUniqueInput!): BankDetail
  activity(where: ActivityWhereUniqueInput!): Activity
  message(where: MessageWhereUniqueInput!): Message
  seen(where: SeenWhereUniqueInput!): Seen
  chat(where: ChatWhereUniqueInput!): Chat
  friendRequest(where: FriendRequestWhereUniqueInput!): FriendRequest
  property(where: PropertyWhereUniqueInput!): Property
  propertyLease(where: PropertyLeaseWhereUniqueInput!): PropertyLease
  rentalAppraisal(where: RentalAppraisalWhereUniqueInput!): RentalAppraisal
  accommodation(where: AccommodationWhereUniqueInput!): Accommodation
  rentalGroupApplicant(where: RentalGroupApplicantWhereUniqueInput!): RentalGroupApplicant
  propertyAdvertisement(where: PropertyAdvertisementWhereUniqueInput!): PropertyAdvertisement
  rentalApplication(where: RentalApplicationWhereUniqueInput!): RentalApplication
  lessee(where: LesseeWhereUniqueInput!): Lessee
  lessor(where: LessorWhereUniqueInput!): Lessor
  wallet(where: WalletWhereUniqueInput!): Wallet
  charge(where: ChargeWhereUniqueInput!): Charge
  payment(where: PaymentWhereUniqueInput!): Payment
  preTenancyForm(where: PreTenancyFormWhereUniqueInput!): PreTenancyForm
  file(where: FileWhereUniqueInput!): File
  insulationForm(where: InsulationFormWhereUniqueInput!): InsulationForm
  user(where: UserWhereUniqueInput!): User
  creditCard(where: CreditCardWhereUniqueInput!): CreditCard
  bankDetailsConnection(where: BankDetailWhereInput, orderBy: BankDetailOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BankDetailConnection!
  activitiesConnection(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  seensConnection(where: SeenWhereInput, orderBy: SeenOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SeenConnection!
  chatsConnection(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChatConnection!
  friendRequestsConnection(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FriendRequestConnection!
  propertiesConnection(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertyConnection!
  propertyLeasesConnection(where: PropertyLeaseWhereInput, orderBy: PropertyLeaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertyLeaseConnection!
  rentalAppraisalsConnection(where: RentalAppraisalWhereInput, orderBy: RentalAppraisalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RentalAppraisalConnection!
  accommodationsConnection(where: AccommodationWhereInput, orderBy: AccommodationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccommodationConnection!
  rentalGroupApplicantsConnection(where: RentalGroupApplicantWhereInput, orderBy: RentalGroupApplicantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RentalGroupApplicantConnection!
  propertyAdvertisementsConnection(where: PropertyAdvertisementWhereInput, orderBy: PropertyAdvertisementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertyAdvertisementConnection!
  rentalApplicationsConnection(where: RentalApplicationWhereInput, orderBy: RentalApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RentalApplicationConnection!
  lesseesConnection(where: LesseeWhereInput, orderBy: LesseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LesseeConnection!
  lessorsConnection(where: LessorWhereInput, orderBy: LessorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessorConnection!
  walletsConnection(where: WalletWhereInput, orderBy: WalletOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WalletConnection!
  chargesConnection(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChargeConnection!
  paymentsConnection(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentConnection!
  preTenancyFormsConnection(where: PreTenancyFormWhereInput, orderBy: PreTenancyFormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PreTenancyFormConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  insulationFormsConnection(where: InsulationFormWhereInput, orderBy: InsulationFormOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InsulationFormConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  creditCardsConnection(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CreditCardConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RentalApplication implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  owner: User!
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage!
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
  property: Property!
  applicants(where: RentalGroupApplicantWhereInput, orderBy: RentalGroupApplicantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalGroupApplicant!]
}

"""A connection to a list of items."""
type RentalApplicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RentalApplicationEdge]!
  aggregate: AggregateRentalApplication!
}

input RentalApplicationCreateInput {
  id: ID
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage!
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserCreateOneInput!
  property: PropertyCreateOneWithoutRentalApplicationsInput!
  applicants: RentalGroupApplicantCreateManyWithoutApplicationInput
}

input RentalApplicationCreateManyWithoutPropertyInput {
  create: [RentalApplicationCreateWithoutPropertyInput!]
  connect: [RentalApplicationWhereUniqueInput!]
}

input RentalApplicationCreateOneWithoutApplicantsInput {
  create: RentalApplicationCreateWithoutApplicantsInput
  connect: RentalApplicationWhereUniqueInput
}

input RentalApplicationCreateWithoutApplicantsInput {
  id: ID
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage!
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserCreateOneInput!
  property: PropertyCreateOneWithoutRentalApplicationsInput!
}

input RentalApplicationCreateWithoutPropertyInput {
  id: ID
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage!
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserCreateOneInput!
  applicants: RentalGroupApplicantCreateManyWithoutApplicationInput
}

"""An edge in a connection."""
type RentalApplicationEdge {
  """The item at the end of the edge."""
  node: RentalApplication!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RentalApplicationOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  detailsStepComplete_ASC
  detailsStepComplete_DESC
  stage_ASC
  stage_DESC
  leaseId_ASC
  leaseId_DESC
  visibility_ASC
  visibility_DESC
  finalised_ASC
  finalised_DESC
}

type RentalApplicationPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage!
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
}

input RentalApplicationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalApplicationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalApplicationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalApplicationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  detailsStepComplete: Boolean

  """All values that are not equal to given value."""
  detailsStepComplete_not: Boolean
  stage: ApplicationStage

  """All values that are not equal to given value."""
  stage_not: ApplicationStage

  """All values that are contained in given list."""
  stage_in: [ApplicationStage!]

  """All values that are not contained in given list."""
  stage_not_in: [ApplicationStage!]
  leaseId: String

  """All values that are not equal to given value."""
  leaseId_not: String

  """All values that are contained in given list."""
  leaseId_in: [String!]

  """All values that are not contained in given list."""
  leaseId_not_in: [String!]

  """All values less than the given value."""
  leaseId_lt: String

  """All values less than or equal the given value."""
  leaseId_lte: String

  """All values greater than the given value."""
  leaseId_gt: String

  """All values greater than or equal the given value."""
  leaseId_gte: String

  """All values containing the given string."""
  leaseId_contains: String

  """All values not containing the given string."""
  leaseId_not_contains: String

  """All values starting with the given string."""
  leaseId_starts_with: String

  """All values not starting with the given string."""
  leaseId_not_starts_with: String

  """All values ending with the given string."""
  leaseId_ends_with: String

  """All values not ending with the given string."""
  leaseId_not_ends_with: String
  visibility: VisibilityLevel

  """All values that are not equal to given value."""
  visibility_not: VisibilityLevel

  """All values that are contained in given list."""
  visibility_in: [VisibilityLevel!]

  """All values that are not contained in given list."""
  visibility_not_in: [VisibilityLevel!]
  finalised: Boolean

  """All values that are not equal to given value."""
  finalised_not: Boolean
}

type RentalApplicationSubscriptionPayload {
  mutation: MutationType!
  node: RentalApplication
  updatedFields: [String!]
  previousValues: RentalApplicationPreviousValues
}

input RentalApplicationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalApplicationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalApplicationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalApplicationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RentalApplicationWhereInput
}

input RentalApplicationUpdateInput {
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserUpdateOneRequiredInput
  property: PropertyUpdateOneRequiredWithoutRentalApplicationsInput
  applicants: RentalGroupApplicantUpdateManyWithoutApplicationInput
}

input RentalApplicationUpdateManyDataInput {
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
}

input RentalApplicationUpdateManyMutationInput {
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
}

input RentalApplicationUpdateManyWithoutPropertyInput {
  create: [RentalApplicationCreateWithoutPropertyInput!]
  connect: [RentalApplicationWhereUniqueInput!]
  set: [RentalApplicationWhereUniqueInput!]
  disconnect: [RentalApplicationWhereUniqueInput!]
  delete: [RentalApplicationWhereUniqueInput!]
  update: [RentalApplicationUpdateWithWhereUniqueWithoutPropertyInput!]
  updateMany: [RentalApplicationUpdateManyWithWhereNestedInput!]
  deleteMany: [RentalApplicationScalarWhereInput!]
  upsert: [RentalApplicationUpsertWithWhereUniqueWithoutPropertyInput!]
}

input RentalApplicationUpdateManyWithWhereNestedInput {
  where: RentalApplicationScalarWhereInput!
  data: RentalApplicationUpdateManyDataInput!
}

input RentalApplicationUpdateOneWithoutApplicantsInput {
  create: RentalApplicationCreateWithoutApplicantsInput
  connect: RentalApplicationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RentalApplicationUpdateWithoutApplicantsDataInput
  upsert: RentalApplicationUpsertWithoutApplicantsInput
}

input RentalApplicationUpdateWithoutApplicantsDataInput {
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserUpdateOneRequiredInput
  property: PropertyUpdateOneRequiredWithoutRentalApplicationsInput
}

input RentalApplicationUpdateWithoutPropertyDataInput {
  title: String
  detailsStepComplete: Boolean
  stage: ApplicationStage
  leaseId: String
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserUpdateOneRequiredInput
  applicants: RentalGroupApplicantUpdateManyWithoutApplicationInput
}

input RentalApplicationUpdateWithWhereUniqueWithoutPropertyInput {
  where: RentalApplicationWhereUniqueInput!
  data: RentalApplicationUpdateWithoutPropertyDataInput!
}

input RentalApplicationUpsertWithoutApplicantsInput {
  update: RentalApplicationUpdateWithoutApplicantsDataInput!
  create: RentalApplicationCreateWithoutApplicantsInput!
}

input RentalApplicationUpsertWithWhereUniqueWithoutPropertyInput {
  where: RentalApplicationWhereUniqueInput!
  update: RentalApplicationUpdateWithoutPropertyDataInput!
  create: RentalApplicationCreateWithoutPropertyInput!
}

input RentalApplicationWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalApplicationWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalApplicationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalApplicationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  detailsStepComplete: Boolean

  """All values that are not equal to given value."""
  detailsStepComplete_not: Boolean
  stage: ApplicationStage

  """All values that are not equal to given value."""
  stage_not: ApplicationStage

  """All values that are contained in given list."""
  stage_in: [ApplicationStage!]

  """All values that are not contained in given list."""
  stage_not_in: [ApplicationStage!]
  leaseId: String

  """All values that are not equal to given value."""
  leaseId_not: String

  """All values that are contained in given list."""
  leaseId_in: [String!]

  """All values that are not contained in given list."""
  leaseId_not_in: [String!]

  """All values less than the given value."""
  leaseId_lt: String

  """All values less than or equal the given value."""
  leaseId_lte: String

  """All values greater than the given value."""
  leaseId_gt: String

  """All values greater than or equal the given value."""
  leaseId_gte: String

  """All values containing the given string."""
  leaseId_contains: String

  """All values not containing the given string."""
  leaseId_not_contains: String

  """All values starting with the given string."""
  leaseId_starts_with: String

  """All values not starting with the given string."""
  leaseId_not_starts_with: String

  """All values ending with the given string."""
  leaseId_ends_with: String

  """All values not ending with the given string."""
  leaseId_not_ends_with: String
  visibility: VisibilityLevel

  """All values that are not equal to given value."""
  visibility_not: VisibilityLevel

  """All values that are contained in given list."""
  visibility_in: [VisibilityLevel!]

  """All values that are not contained in given list."""
  visibility_not_in: [VisibilityLevel!]
  finalised: Boolean

  """All values that are not equal to given value."""
  finalised_not: Boolean
  owner: UserWhereInput
  property: PropertyWhereInput
  applicants_every: RentalGroupApplicantWhereInput
  applicants_some: RentalGroupApplicantWhereInput
  applicants_none: RentalGroupApplicantWhereInput
}

input RentalApplicationWhereUniqueInput {
  id: ID
}

type RentalAppraisal implements Node {
  id: ID!
  requestedBy: User!
  location: String!
  locationLat: Float!
  locationLng: Float!
  rooms: Int!
  bathrooms: Int!
  garageSpaces: Int!
  heatSources: [HeatSource!]!
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  property: Property
}

"""A connection to a list of items."""
type RentalAppraisalConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RentalAppraisalEdge]!
  aggregate: AggregateRentalAppraisal!
}

input RentalAppraisalCreateheatSourcesInput {
  set: [HeatSource!]
}

input RentalAppraisalCreateInput {
  id: ID
  location: String!
  locationLat: Float!
  locationLng: Float!
  rooms: Int!
  bathrooms: Int!
  garageSpaces: Int!
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  heatSources: RentalAppraisalCreateheatSourcesInput
  requestedBy: UserCreateOneWithoutRentalAppraisalsInput!
  property: PropertyCreateOneWithoutAppraisalsInput
}

input RentalAppraisalCreateManyWithoutPropertyInput {
  create: [RentalAppraisalCreateWithoutPropertyInput!]
  connect: [RentalAppraisalWhereUniqueInput!]
}

input RentalAppraisalCreateManyWithoutRequestedByInput {
  create: [RentalAppraisalCreateWithoutRequestedByInput!]
  connect: [RentalAppraisalWhereUniqueInput!]
}

input RentalAppraisalCreateWithoutPropertyInput {
  id: ID
  location: String!
  locationLat: Float!
  locationLng: Float!
  rooms: Int!
  bathrooms: Int!
  garageSpaces: Int!
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  heatSources: RentalAppraisalCreateheatSourcesInput
  requestedBy: UserCreateOneWithoutRentalAppraisalsInput!
}

input RentalAppraisalCreateWithoutRequestedByInput {
  id: ID
  location: String!
  locationLat: Float!
  locationLng: Float!
  rooms: Int!
  bathrooms: Int!
  garageSpaces: Int!
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  heatSources: RentalAppraisalCreateheatSourcesInput
  property: PropertyCreateOneWithoutAppraisalsInput
}

"""An edge in a connection."""
type RentalAppraisalEdge {
  """The item at the end of the edge."""
  node: RentalAppraisal!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RentalAppraisalOrderByInput {
  id_ASC
  id_DESC
  location_ASC
  location_DESC
  locationLat_ASC
  locationLat_DESC
  locationLng_ASC
  locationLng_DESC
  rooms_ASC
  rooms_DESC
  bathrooms_ASC
  bathrooms_DESC
  garageSpaces_ASC
  garageSpaces_DESC
  lowRent_ASC
  lowRent_DESC
  highRent_ASC
  highRent_DESC
  rent_ASC
  rent_DESC
  rentValueAccepted_ASC
  rentValueAccepted_DESC
  acceptTerms_ASC
  acceptTerms_DESC
}

type RentalAppraisalPreviousValues {
  id: ID!
  location: String!
  locationLat: Float!
  locationLng: Float!
  rooms: Int!
  bathrooms: Int!
  garageSpaces: Int!
  heatSources: [HeatSource!]!
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
}

input RentalAppraisalScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalAppraisalScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalAppraisalScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalAppraisalScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  lowRent: Float

  """All values that are not equal to given value."""
  lowRent_not: Float

  """All values that are contained in given list."""
  lowRent_in: [Float!]

  """All values that are not contained in given list."""
  lowRent_not_in: [Float!]

  """All values less than the given value."""
  lowRent_lt: Float

  """All values less than or equal the given value."""
  lowRent_lte: Float

  """All values greater than the given value."""
  lowRent_gt: Float

  """All values greater than or equal the given value."""
  lowRent_gte: Float
  highRent: Float

  """All values that are not equal to given value."""
  highRent_not: Float

  """All values that are contained in given list."""
  highRent_in: [Float!]

  """All values that are not contained in given list."""
  highRent_not_in: [Float!]

  """All values less than the given value."""
  highRent_lt: Float

  """All values less than or equal the given value."""
  highRent_lte: Float

  """All values greater than the given value."""
  highRent_gt: Float

  """All values greater than or equal the given value."""
  highRent_gte: Float
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  rentValueAccepted: Boolean

  """All values that are not equal to given value."""
  rentValueAccepted_not: Boolean
  acceptTerms: Boolean

  """All values that are not equal to given value."""
  acceptTerms_not: Boolean
}

type RentalAppraisalSubscriptionPayload {
  mutation: MutationType!
  node: RentalAppraisal
  updatedFields: [String!]
  previousValues: RentalAppraisalPreviousValues
}

input RentalAppraisalSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalAppraisalSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalAppraisalSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalAppraisalSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RentalAppraisalWhereInput
}

input RentalAppraisalUpdateheatSourcesInput {
  set: [HeatSource!]
}

input RentalAppraisalUpdateInput {
  location: String
  locationLat: Float
  locationLng: Float
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  heatSources: RentalAppraisalUpdateheatSourcesInput
  requestedBy: UserUpdateOneRequiredWithoutRentalAppraisalsInput
  property: PropertyUpdateOneWithoutAppraisalsInput
}

input RentalAppraisalUpdateManyDataInput {
  location: String
  locationLat: Float
  locationLng: Float
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  heatSources: RentalAppraisalUpdateheatSourcesInput
}

input RentalAppraisalUpdateManyMutationInput {
  location: String
  locationLat: Float
  locationLng: Float
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  heatSources: RentalAppraisalUpdateheatSourcesInput
}

input RentalAppraisalUpdateManyWithoutPropertyInput {
  create: [RentalAppraisalCreateWithoutPropertyInput!]
  connect: [RentalAppraisalWhereUniqueInput!]
  set: [RentalAppraisalWhereUniqueInput!]
  disconnect: [RentalAppraisalWhereUniqueInput!]
  delete: [RentalAppraisalWhereUniqueInput!]
  update: [RentalAppraisalUpdateWithWhereUniqueWithoutPropertyInput!]
  updateMany: [RentalAppraisalUpdateManyWithWhereNestedInput!]
  deleteMany: [RentalAppraisalScalarWhereInput!]
  upsert: [RentalAppraisalUpsertWithWhereUniqueWithoutPropertyInput!]
}

input RentalAppraisalUpdateManyWithoutRequestedByInput {
  create: [RentalAppraisalCreateWithoutRequestedByInput!]
  connect: [RentalAppraisalWhereUniqueInput!]
  set: [RentalAppraisalWhereUniqueInput!]
  disconnect: [RentalAppraisalWhereUniqueInput!]
  delete: [RentalAppraisalWhereUniqueInput!]
  update: [RentalAppraisalUpdateWithWhereUniqueWithoutRequestedByInput!]
  updateMany: [RentalAppraisalUpdateManyWithWhereNestedInput!]
  deleteMany: [RentalAppraisalScalarWhereInput!]
  upsert: [RentalAppraisalUpsertWithWhereUniqueWithoutRequestedByInput!]
}

input RentalAppraisalUpdateManyWithWhereNestedInput {
  where: RentalAppraisalScalarWhereInput!
  data: RentalAppraisalUpdateManyDataInput!
}

input RentalAppraisalUpdateWithoutPropertyDataInput {
  location: String
  locationLat: Float
  locationLng: Float
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  heatSources: RentalAppraisalUpdateheatSourcesInput
  requestedBy: UserUpdateOneRequiredWithoutRentalAppraisalsInput
}

input RentalAppraisalUpdateWithoutRequestedByDataInput {
  location: String
  locationLat: Float
  locationLng: Float
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  lowRent: Float
  highRent: Float
  rent: Float
  rentValueAccepted: Boolean
  acceptTerms: Boolean
  heatSources: RentalAppraisalUpdateheatSourcesInput
  property: PropertyUpdateOneWithoutAppraisalsInput
}

input RentalAppraisalUpdateWithWhereUniqueWithoutPropertyInput {
  where: RentalAppraisalWhereUniqueInput!
  data: RentalAppraisalUpdateWithoutPropertyDataInput!
}

input RentalAppraisalUpdateWithWhereUniqueWithoutRequestedByInput {
  where: RentalAppraisalWhereUniqueInput!
  data: RentalAppraisalUpdateWithoutRequestedByDataInput!
}

input RentalAppraisalUpsertWithWhereUniqueWithoutPropertyInput {
  where: RentalAppraisalWhereUniqueInput!
  update: RentalAppraisalUpdateWithoutPropertyDataInput!
  create: RentalAppraisalCreateWithoutPropertyInput!
}

input RentalAppraisalUpsertWithWhereUniqueWithoutRequestedByInput {
  where: RentalAppraisalWhereUniqueInput!
  update: RentalAppraisalUpdateWithoutRequestedByDataInput!
  create: RentalAppraisalCreateWithoutRequestedByInput!
}

input RentalAppraisalWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalAppraisalWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalAppraisalWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalAppraisalWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  lowRent: Float

  """All values that are not equal to given value."""
  lowRent_not: Float

  """All values that are contained in given list."""
  lowRent_in: [Float!]

  """All values that are not contained in given list."""
  lowRent_not_in: [Float!]

  """All values less than the given value."""
  lowRent_lt: Float

  """All values less than or equal the given value."""
  lowRent_lte: Float

  """All values greater than the given value."""
  lowRent_gt: Float

  """All values greater than or equal the given value."""
  lowRent_gte: Float
  highRent: Float

  """All values that are not equal to given value."""
  highRent_not: Float

  """All values that are contained in given list."""
  highRent_in: [Float!]

  """All values that are not contained in given list."""
  highRent_not_in: [Float!]

  """All values less than the given value."""
  highRent_lt: Float

  """All values less than or equal the given value."""
  highRent_lte: Float

  """All values greater than the given value."""
  highRent_gt: Float

  """All values greater than or equal the given value."""
  highRent_gte: Float
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  rentValueAccepted: Boolean

  """All values that are not equal to given value."""
  rentValueAccepted_not: Boolean
  acceptTerms: Boolean

  """All values that are not equal to given value."""
  acceptTerms_not: Boolean
  requestedBy: UserWhereInput
  property: PropertyWhereInput
}

input RentalAppraisalWhereUniqueInput {
  id: ID
}

type RentalGroupApplicant implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  user: User!
  approved: Boolean!
  completed: Boolean
  application: RentalApplication
  preTenancyApplicationForm: PreTenancyForm
  firstName: String
  lastName: String
  email: String
}

"""A connection to a list of items."""
type RentalGroupApplicantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RentalGroupApplicantEdge]!
  aggregate: AggregateRentalGroupApplicant!
}

input RentalGroupApplicantCreateInput {
  id: ID
  approved: Boolean!
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserCreateOneInput!
  application: RentalApplicationCreateOneWithoutApplicantsInput
  preTenancyApplicationForm: PreTenancyFormCreateOneWithoutRentalApplicantInput
}

input RentalGroupApplicantCreateManyWithoutApplicationInput {
  create: [RentalGroupApplicantCreateWithoutApplicationInput!]
  connect: [RentalGroupApplicantWhereUniqueInput!]
}

input RentalGroupApplicantCreateOneWithoutPreTenancyApplicationFormInput {
  create: RentalGroupApplicantCreateWithoutPreTenancyApplicationFormInput
  connect: RentalGroupApplicantWhereUniqueInput
}

input RentalGroupApplicantCreateWithoutApplicationInput {
  id: ID
  approved: Boolean!
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserCreateOneInput!
  preTenancyApplicationForm: PreTenancyFormCreateOneWithoutRentalApplicantInput
}

input RentalGroupApplicantCreateWithoutPreTenancyApplicationFormInput {
  id: ID
  approved: Boolean!
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserCreateOneInput!
  application: RentalApplicationCreateOneWithoutApplicantsInput
}

"""An edge in a connection."""
type RentalGroupApplicantEdge {
  """The item at the end of the edge."""
  node: RentalGroupApplicant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RentalGroupApplicantOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  approved_ASC
  approved_DESC
  completed_ASC
  completed_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
}

type RentalGroupApplicantPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  approved: Boolean!
  completed: Boolean
  firstName: String
  lastName: String
  email: String
}

input RentalGroupApplicantScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalGroupApplicantScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalGroupApplicantScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalGroupApplicantScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
}

type RentalGroupApplicantSubscriptionPayload {
  mutation: MutationType!
  node: RentalGroupApplicant
  updatedFields: [String!]
  previousValues: RentalGroupApplicantPreviousValues
}

input RentalGroupApplicantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalGroupApplicantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalGroupApplicantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalGroupApplicantSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RentalGroupApplicantWhereInput
}

input RentalGroupApplicantUpdateInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserUpdateOneRequiredInput
  application: RentalApplicationUpdateOneWithoutApplicantsInput
  preTenancyApplicationForm: PreTenancyFormUpdateOneWithoutRentalApplicantInput
}

input RentalGroupApplicantUpdateManyDataInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
}

input RentalGroupApplicantUpdateManyMutationInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
}

input RentalGroupApplicantUpdateManyWithoutApplicationInput {
  create: [RentalGroupApplicantCreateWithoutApplicationInput!]
  connect: [RentalGroupApplicantWhereUniqueInput!]
  set: [RentalGroupApplicantWhereUniqueInput!]
  disconnect: [RentalGroupApplicantWhereUniqueInput!]
  delete: [RentalGroupApplicantWhereUniqueInput!]
  update: [RentalGroupApplicantUpdateWithWhereUniqueWithoutApplicationInput!]
  updateMany: [RentalGroupApplicantUpdateManyWithWhereNestedInput!]
  deleteMany: [RentalGroupApplicantScalarWhereInput!]
  upsert: [RentalGroupApplicantUpsertWithWhereUniqueWithoutApplicationInput!]
}

input RentalGroupApplicantUpdateManyWithWhereNestedInput {
  where: RentalGroupApplicantScalarWhereInput!
  data: RentalGroupApplicantUpdateManyDataInput!
}

input RentalGroupApplicantUpdateOneWithoutPreTenancyApplicationFormInput {
  create: RentalGroupApplicantCreateWithoutPreTenancyApplicationFormInput
  connect: RentalGroupApplicantWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RentalGroupApplicantUpdateWithoutPreTenancyApplicationFormDataInput
  upsert: RentalGroupApplicantUpsertWithoutPreTenancyApplicationFormInput
}

input RentalGroupApplicantUpdateWithoutApplicationDataInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserUpdateOneRequiredInput
  preTenancyApplicationForm: PreTenancyFormUpdateOneWithoutRentalApplicantInput
}

input RentalGroupApplicantUpdateWithoutPreTenancyApplicationFormDataInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserUpdateOneRequiredInput
  application: RentalApplicationUpdateOneWithoutApplicantsInput
}

input RentalGroupApplicantUpdateWithWhereUniqueWithoutApplicationInput {
  where: RentalGroupApplicantWhereUniqueInput!
  data: RentalGroupApplicantUpdateWithoutApplicationDataInput!
}

input RentalGroupApplicantUpsertWithoutPreTenancyApplicationFormInput {
  update: RentalGroupApplicantUpdateWithoutPreTenancyApplicationFormDataInput!
  create: RentalGroupApplicantCreateWithoutPreTenancyApplicationFormInput!
}

input RentalGroupApplicantUpsertWithWhereUniqueWithoutApplicationInput {
  where: RentalGroupApplicantWhereUniqueInput!
  update: RentalGroupApplicantUpdateWithoutApplicationDataInput!
  create: RentalGroupApplicantCreateWithoutApplicationInput!
}

input RentalGroupApplicantWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalGroupApplicantWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalGroupApplicantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalGroupApplicantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  user: UserWhereInput
  application: RentalApplicationWhereInput
  preTenancyApplicationForm: PreTenancyFormWhereInput
}

input RentalGroupApplicantWhereUniqueInput {
  id: ID
}

type Seen implements Node {
  id: ID!
  lastSeen: DateTime
  amountSeen: Int
  seenUserId: String!
  chat: Chat!
}

"""A connection to a list of items."""
type SeenConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SeenEdge]!
  aggregate: AggregateSeen!
}

input SeenCreateInput {
  id: ID
  lastSeen: DateTime
  amountSeen: Int
  seenUserId: String!
  chat: ChatCreateOneWithoutSeenInfoInput!
}

input SeenCreateManyWithoutChatInput {
  create: [SeenCreateWithoutChatInput!]
  connect: [SeenWhereUniqueInput!]
}

input SeenCreateWithoutChatInput {
  id: ID
  lastSeen: DateTime
  amountSeen: Int
  seenUserId: String!
}

"""An edge in a connection."""
type SeenEdge {
  """The item at the end of the edge."""
  node: Seen!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SeenOrderByInput {
  id_ASC
  id_DESC
  lastSeen_ASC
  lastSeen_DESC
  amountSeen_ASC
  amountSeen_DESC
  seenUserId_ASC
  seenUserId_DESC
}

type SeenPreviousValues {
  id: ID!
  lastSeen: DateTime
  amountSeen: Int
  seenUserId: String!
}

input SeenScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [SeenScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeenScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeenScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lastSeen: DateTime

  """All values that are not equal to given value."""
  lastSeen_not: DateTime

  """All values that are contained in given list."""
  lastSeen_in: [DateTime!]

  """All values that are not contained in given list."""
  lastSeen_not_in: [DateTime!]

  """All values less than the given value."""
  lastSeen_lt: DateTime

  """All values less than or equal the given value."""
  lastSeen_lte: DateTime

  """All values greater than the given value."""
  lastSeen_gt: DateTime

  """All values greater than or equal the given value."""
  lastSeen_gte: DateTime
  amountSeen: Int

  """All values that are not equal to given value."""
  amountSeen_not: Int

  """All values that are contained in given list."""
  amountSeen_in: [Int!]

  """All values that are not contained in given list."""
  amountSeen_not_in: [Int!]

  """All values less than the given value."""
  amountSeen_lt: Int

  """All values less than or equal the given value."""
  amountSeen_lte: Int

  """All values greater than the given value."""
  amountSeen_gt: Int

  """All values greater than or equal the given value."""
  amountSeen_gte: Int
  seenUserId: String

  """All values that are not equal to given value."""
  seenUserId_not: String

  """All values that are contained in given list."""
  seenUserId_in: [String!]

  """All values that are not contained in given list."""
  seenUserId_not_in: [String!]

  """All values less than the given value."""
  seenUserId_lt: String

  """All values less than or equal the given value."""
  seenUserId_lte: String

  """All values greater than the given value."""
  seenUserId_gt: String

  """All values greater than or equal the given value."""
  seenUserId_gte: String

  """All values containing the given string."""
  seenUserId_contains: String

  """All values not containing the given string."""
  seenUserId_not_contains: String

  """All values starting with the given string."""
  seenUserId_starts_with: String

  """All values not starting with the given string."""
  seenUserId_not_starts_with: String

  """All values ending with the given string."""
  seenUserId_ends_with: String

  """All values not ending with the given string."""
  seenUserId_not_ends_with: String
}

type SeenSubscriptionPayload {
  mutation: MutationType!
  node: Seen
  updatedFields: [String!]
  previousValues: SeenPreviousValues
}

input SeenSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SeenSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeenSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeenSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SeenWhereInput
}

input SeenUpdateInput {
  lastSeen: DateTime
  amountSeen: Int
  seenUserId: String
  chat: ChatUpdateOneRequiredWithoutSeenInfoInput
}

input SeenUpdateManyDataInput {
  lastSeen: DateTime
  amountSeen: Int
  seenUserId: String
}

input SeenUpdateManyMutationInput {
  lastSeen: DateTime
  amountSeen: Int
  seenUserId: String
}

input SeenUpdateManyWithoutChatInput {
  create: [SeenCreateWithoutChatInput!]
  connect: [SeenWhereUniqueInput!]
  set: [SeenWhereUniqueInput!]
  disconnect: [SeenWhereUniqueInput!]
  delete: [SeenWhereUniqueInput!]
  update: [SeenUpdateWithWhereUniqueWithoutChatInput!]
  updateMany: [SeenUpdateManyWithWhereNestedInput!]
  deleteMany: [SeenScalarWhereInput!]
  upsert: [SeenUpsertWithWhereUniqueWithoutChatInput!]
}

input SeenUpdateManyWithWhereNestedInput {
  where: SeenScalarWhereInput!
  data: SeenUpdateManyDataInput!
}

input SeenUpdateWithoutChatDataInput {
  lastSeen: DateTime
  amountSeen: Int
  seenUserId: String
}

input SeenUpdateWithWhereUniqueWithoutChatInput {
  where: SeenWhereUniqueInput!
  data: SeenUpdateWithoutChatDataInput!
}

input SeenUpsertWithWhereUniqueWithoutChatInput {
  where: SeenWhereUniqueInput!
  update: SeenUpdateWithoutChatDataInput!
  create: SeenCreateWithoutChatInput!
}

input SeenWhereInput {
  """Logical AND on all given filters."""
  AND: [SeenWhereInput!]

  """Logical OR on all given filters."""
  OR: [SeenWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SeenWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  lastSeen: DateTime

  """All values that are not equal to given value."""
  lastSeen_not: DateTime

  """All values that are contained in given list."""
  lastSeen_in: [DateTime!]

  """All values that are not contained in given list."""
  lastSeen_not_in: [DateTime!]

  """All values less than the given value."""
  lastSeen_lt: DateTime

  """All values less than or equal the given value."""
  lastSeen_lte: DateTime

  """All values greater than the given value."""
  lastSeen_gt: DateTime

  """All values greater than or equal the given value."""
  lastSeen_gte: DateTime
  amountSeen: Int

  """All values that are not equal to given value."""
  amountSeen_not: Int

  """All values that are contained in given list."""
  amountSeen_in: [Int!]

  """All values that are not contained in given list."""
  amountSeen_not_in: [Int!]

  """All values less than the given value."""
  amountSeen_lt: Int

  """All values less than or equal the given value."""
  amountSeen_lte: Int

  """All values greater than the given value."""
  amountSeen_gt: Int

  """All values greater than or equal the given value."""
  amountSeen_gte: Int
  seenUserId: String

  """All values that are not equal to given value."""
  seenUserId_not: String

  """All values that are contained in given list."""
  seenUserId_in: [String!]

  """All values that are not contained in given list."""
  seenUserId_not_in: [String!]

  """All values less than the given value."""
  seenUserId_lt: String

  """All values less than or equal the given value."""
  seenUserId_lte: String

  """All values greater than the given value."""
  seenUserId_gt: String

  """All values greater than or equal the given value."""
  seenUserId_gte: String

  """All values containing the given string."""
  seenUserId_contains: String

  """All values not containing the given string."""
  seenUserId_not_contains: String

  """All values starting with the given string."""
  seenUserId_starts_with: String

  """All values not starting with the given string."""
  seenUserId_not_starts_with: String

  """All values ending with the given string."""
  seenUserId_ends_with: String

  """All values not ending with the given string."""
  seenUserId_not_ends_with: String
  chat: ChatWhereInput
}

input SeenWhereUniqueInput {
  id: ID
}

type Subscription {
  bankDetail(where: BankDetailSubscriptionWhereInput): BankDetailSubscriptionPayload
  activity(where: ActivitySubscriptionWhereInput): ActivitySubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  seen(where: SeenSubscriptionWhereInput): SeenSubscriptionPayload
  chat(where: ChatSubscriptionWhereInput): ChatSubscriptionPayload
  friendRequest(where: FriendRequestSubscriptionWhereInput): FriendRequestSubscriptionPayload
  property(where: PropertySubscriptionWhereInput): PropertySubscriptionPayload
  propertyLease(where: PropertyLeaseSubscriptionWhereInput): PropertyLeaseSubscriptionPayload
  rentalAppraisal(where: RentalAppraisalSubscriptionWhereInput): RentalAppraisalSubscriptionPayload
  accommodation(where: AccommodationSubscriptionWhereInput): AccommodationSubscriptionPayload
  rentalGroupApplicant(where: RentalGroupApplicantSubscriptionWhereInput): RentalGroupApplicantSubscriptionPayload
  propertyAdvertisement(where: PropertyAdvertisementSubscriptionWhereInput): PropertyAdvertisementSubscriptionPayload
  rentalApplication(where: RentalApplicationSubscriptionWhereInput): RentalApplicationSubscriptionPayload
  lessee(where: LesseeSubscriptionWhereInput): LesseeSubscriptionPayload
  lessor(where: LessorSubscriptionWhereInput): LessorSubscriptionPayload
  wallet(where: WalletSubscriptionWhereInput): WalletSubscriptionPayload
  charge(where: ChargeSubscriptionWhereInput): ChargeSubscriptionPayload
  payment(where: PaymentSubscriptionWhereInput): PaymentSubscriptionPayload
  preTenancyForm(where: PreTenancyFormSubscriptionWhereInput): PreTenancyFormSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  insulationForm(where: InsulationFormSubscriptionWhereInput): InsulationFormSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  creditCard(where: CreditCardSubscriptionWhereInput): CreditCardSubscriptionPayload
}

enum TenancyType {
  PERIODIC
  FIXED
}

enum UnderfloorInsulationTypes {
  SEGMENTS_BLANKETS
  POLYSTYRENE
  FOIL
  BULK_WITH_FOIL_LINING
  OTHER
  NOT_ACCESSIBLE
}

type User implements Node {
  id: ID!
  friends(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  friendRequests(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest!]
  awaitingFriends(where: FriendRequestWhereInput, orderBy: FriendRequestOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FriendRequest!]
  updatedAt: DateTime!
  createdAt: DateTime!
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  properties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property!]
  lesseeLeases(where: LesseeWhereInput, orderBy: LesseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessee!]
  lessorLeases(where: LessorWhereInput, orderBy: LessorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessor!]
  createdProperties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property!]
  photoIdentification: File
  profilePhoto: File
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  creditCards(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CreditCard!]
  primaryCreditCard: CreditCard
  chats(where: ChatWhereInput, orderBy: ChatOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]
  sentMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  recievedMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  rehouserStamp: Boolean
  signature: File
  activity(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity!]
  involvedActivity(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity!]
  rentalAppraisals(where: RentalAppraisalWhereInput, orderBy: RentalAppraisalOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalAppraisal!]
  usedFreeAppraisal: Boolean
  physicalAddress: String
  proofOfAddress: File
  acceptedSignupTerms: Boolean!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutChatsInput {
  create: [UserCreateWithoutChatsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutInvolvedActivityInput {
  create: [UserCreateWithoutInvolvedActivityInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutPropertiesInput {
  create: [UserCreateWithoutPropertiesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutActivityInput {
  create: UserCreateWithoutActivityInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAwaitingFriendsInput {
  create: UserCreateWithoutAwaitingFriendsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedPropertiesInput {
  create: UserCreateWithoutCreatedPropertiesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreditCardsInput {
  create: UserCreateWithoutCreditCardsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFriendRequestsInput {
  create: UserCreateWithoutFriendRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLesseeLeasesInput {
  create: UserCreateWithoutLesseeLeasesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLessorLeasesInput {
  create: UserCreateWithoutLessorLeasesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPhotoIdentificationInput {
  create: UserCreateWithoutPhotoIdentificationInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProfilePhotoInput {
  create: UserCreateWithoutProfilePhotoInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutProofOfAddressInput {
  create: UserCreateWithoutProofOfAddressInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRecievedMessagesInput {
  create: UserCreateWithoutRecievedMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutRentalAppraisalsInput {
  create: UserCreateWithoutRentalAppraisalsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSignatureInput {
  create: UserCreateWithoutSignatureInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutActivityInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutAwaitingFriendsInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutChatsInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutCreatedPropertiesInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutCreditCardsInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutFriendRequestsInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutInvolvedActivityInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutLesseeLeasesInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutLessorLeasesInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutPhotoIdentificationInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutProfilePhotoInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutProofOfAddressInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
}

input UserCreateWithoutPropertiesInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutRecievedMessagesInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutRentalAppraisalsInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutSentMessagesInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  signature: FileCreateOneWithoutUserSignatureInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

input UserCreateWithoutSignatureInput {
  id: ID
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
  permissions: UserCreatepermissionsInput
  friends: UserCreateManyInput
  friendRequests: FriendRequestCreateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestCreateManyWithoutRequestUserInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneWithoutUserPhotoIdInput
  profilePhoto: FileCreateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
  chats: ChatCreateManyWithoutParticipantsInput
  sentMessages: MessageCreateManyWithoutSenderInput
  recievedMessages: MessageCreateManyWithoutRecipientInput
  activity: ActivityCreateManyWithoutUserInput
  involvedActivity: ActivityCreateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalCreateManyWithoutRequestedByInput
  proofOfAddress: FileCreateOneWithoutUserProofOfAddressInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  dob_ASC
  dob_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  identificationNumber_ASC
  identificationNumber_DESC
  emergencyContactName_ASC
  emergencyContactName_DESC
  emergencyContactNumber_ASC
  emergencyContactNumber_DESC
  emergencyContactEmail_ASC
  emergencyContactEmail_DESC
  referee1Name_ASC
  referee1Name_DESC
  referee1Phone_ASC
  referee1Phone_DESC
  referee1Email_ASC
  referee1Email_DESC
  referee2Name_ASC
  referee2Name_DESC
  referee2Phone_ASC
  referee2Phone_DESC
  referee2Email_ASC
  referee2Email_DESC
  rehouserStamp_ASC
  rehouserStamp_DESC
  usedFreeAppraisal_ASC
  usedFreeAppraisal_DESC
  physicalAddress_ASC
  physicalAddress_DESC
  acceptedSignupTerms_ASC
  acceptedSignupTerms_DESC
}

type UserPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  dob: DateTime
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean!
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  dob: DateTime

  """All values that are not equal to given value."""
  dob_not: DateTime

  """All values that are contained in given list."""
  dob_in: [DateTime!]

  """All values that are not contained in given list."""
  dob_not_in: [DateTime!]

  """All values less than the given value."""
  dob_lt: DateTime

  """All values less than or equal the given value."""
  dob_lte: DateTime

  """All values greater than the given value."""
  dob_gt: DateTime

  """All values greater than or equal the given value."""
  dob_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  identificationNumber: String

  """All values that are not equal to given value."""
  identificationNumber_not: String

  """All values that are contained in given list."""
  identificationNumber_in: [String!]

  """All values that are not contained in given list."""
  identificationNumber_not_in: [String!]

  """All values less than the given value."""
  identificationNumber_lt: String

  """All values less than or equal the given value."""
  identificationNumber_lte: String

  """All values greater than the given value."""
  identificationNumber_gt: String

  """All values greater than or equal the given value."""
  identificationNumber_gte: String

  """All values containing the given string."""
  identificationNumber_contains: String

  """All values not containing the given string."""
  identificationNumber_not_contains: String

  """All values starting with the given string."""
  identificationNumber_starts_with: String

  """All values not starting with the given string."""
  identificationNumber_not_starts_with: String

  """All values ending with the given string."""
  identificationNumber_ends_with: String

  """All values not ending with the given string."""
  identificationNumber_not_ends_with: String
  emergencyContactName: String

  """All values that are not equal to given value."""
  emergencyContactName_not: String

  """All values that are contained in given list."""
  emergencyContactName_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactName_not_in: [String!]

  """All values less than the given value."""
  emergencyContactName_lt: String

  """All values less than or equal the given value."""
  emergencyContactName_lte: String

  """All values greater than the given value."""
  emergencyContactName_gt: String

  """All values greater than or equal the given value."""
  emergencyContactName_gte: String

  """All values containing the given string."""
  emergencyContactName_contains: String

  """All values not containing the given string."""
  emergencyContactName_not_contains: String

  """All values starting with the given string."""
  emergencyContactName_starts_with: String

  """All values not starting with the given string."""
  emergencyContactName_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactName_ends_with: String

  """All values not ending with the given string."""
  emergencyContactName_not_ends_with: String
  emergencyContactNumber: String

  """All values that are not equal to given value."""
  emergencyContactNumber_not: String

  """All values that are contained in given list."""
  emergencyContactNumber_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactNumber_not_in: [String!]

  """All values less than the given value."""
  emergencyContactNumber_lt: String

  """All values less than or equal the given value."""
  emergencyContactNumber_lte: String

  """All values greater than the given value."""
  emergencyContactNumber_gt: String

  """All values greater than or equal the given value."""
  emergencyContactNumber_gte: String

  """All values containing the given string."""
  emergencyContactNumber_contains: String

  """All values not containing the given string."""
  emergencyContactNumber_not_contains: String

  """All values starting with the given string."""
  emergencyContactNumber_starts_with: String

  """All values not starting with the given string."""
  emergencyContactNumber_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactNumber_ends_with: String

  """All values not ending with the given string."""
  emergencyContactNumber_not_ends_with: String
  emergencyContactEmail: String

  """All values that are not equal to given value."""
  emergencyContactEmail_not: String

  """All values that are contained in given list."""
  emergencyContactEmail_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactEmail_not_in: [String!]

  """All values less than the given value."""
  emergencyContactEmail_lt: String

  """All values less than or equal the given value."""
  emergencyContactEmail_lte: String

  """All values greater than the given value."""
  emergencyContactEmail_gt: String

  """All values greater than or equal the given value."""
  emergencyContactEmail_gte: String

  """All values containing the given string."""
  emergencyContactEmail_contains: String

  """All values not containing the given string."""
  emergencyContactEmail_not_contains: String

  """All values starting with the given string."""
  emergencyContactEmail_starts_with: String

  """All values not starting with the given string."""
  emergencyContactEmail_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactEmail_ends_with: String

  """All values not ending with the given string."""
  emergencyContactEmail_not_ends_with: String
  referee1Name: String

  """All values that are not equal to given value."""
  referee1Name_not: String

  """All values that are contained in given list."""
  referee1Name_in: [String!]

  """All values that are not contained in given list."""
  referee1Name_not_in: [String!]

  """All values less than the given value."""
  referee1Name_lt: String

  """All values less than or equal the given value."""
  referee1Name_lte: String

  """All values greater than the given value."""
  referee1Name_gt: String

  """All values greater than or equal the given value."""
  referee1Name_gte: String

  """All values containing the given string."""
  referee1Name_contains: String

  """All values not containing the given string."""
  referee1Name_not_contains: String

  """All values starting with the given string."""
  referee1Name_starts_with: String

  """All values not starting with the given string."""
  referee1Name_not_starts_with: String

  """All values ending with the given string."""
  referee1Name_ends_with: String

  """All values not ending with the given string."""
  referee1Name_not_ends_with: String
  referee1Phone: String

  """All values that are not equal to given value."""
  referee1Phone_not: String

  """All values that are contained in given list."""
  referee1Phone_in: [String!]

  """All values that are not contained in given list."""
  referee1Phone_not_in: [String!]

  """All values less than the given value."""
  referee1Phone_lt: String

  """All values less than or equal the given value."""
  referee1Phone_lte: String

  """All values greater than the given value."""
  referee1Phone_gt: String

  """All values greater than or equal the given value."""
  referee1Phone_gte: String

  """All values containing the given string."""
  referee1Phone_contains: String

  """All values not containing the given string."""
  referee1Phone_not_contains: String

  """All values starting with the given string."""
  referee1Phone_starts_with: String

  """All values not starting with the given string."""
  referee1Phone_not_starts_with: String

  """All values ending with the given string."""
  referee1Phone_ends_with: String

  """All values not ending with the given string."""
  referee1Phone_not_ends_with: String
  referee1Email: String

  """All values that are not equal to given value."""
  referee1Email_not: String

  """All values that are contained in given list."""
  referee1Email_in: [String!]

  """All values that are not contained in given list."""
  referee1Email_not_in: [String!]

  """All values less than the given value."""
  referee1Email_lt: String

  """All values less than or equal the given value."""
  referee1Email_lte: String

  """All values greater than the given value."""
  referee1Email_gt: String

  """All values greater than or equal the given value."""
  referee1Email_gte: String

  """All values containing the given string."""
  referee1Email_contains: String

  """All values not containing the given string."""
  referee1Email_not_contains: String

  """All values starting with the given string."""
  referee1Email_starts_with: String

  """All values not starting with the given string."""
  referee1Email_not_starts_with: String

  """All values ending with the given string."""
  referee1Email_ends_with: String

  """All values not ending with the given string."""
  referee1Email_not_ends_with: String
  referee2Name: String

  """All values that are not equal to given value."""
  referee2Name_not: String

  """All values that are contained in given list."""
  referee2Name_in: [String!]

  """All values that are not contained in given list."""
  referee2Name_not_in: [String!]

  """All values less than the given value."""
  referee2Name_lt: String

  """All values less than or equal the given value."""
  referee2Name_lte: String

  """All values greater than the given value."""
  referee2Name_gt: String

  """All values greater than or equal the given value."""
  referee2Name_gte: String

  """All values containing the given string."""
  referee2Name_contains: String

  """All values not containing the given string."""
  referee2Name_not_contains: String

  """All values starting with the given string."""
  referee2Name_starts_with: String

  """All values not starting with the given string."""
  referee2Name_not_starts_with: String

  """All values ending with the given string."""
  referee2Name_ends_with: String

  """All values not ending with the given string."""
  referee2Name_not_ends_with: String
  referee2Phone: String

  """All values that are not equal to given value."""
  referee2Phone_not: String

  """All values that are contained in given list."""
  referee2Phone_in: [String!]

  """All values that are not contained in given list."""
  referee2Phone_not_in: [String!]

  """All values less than the given value."""
  referee2Phone_lt: String

  """All values less than or equal the given value."""
  referee2Phone_lte: String

  """All values greater than the given value."""
  referee2Phone_gt: String

  """All values greater than or equal the given value."""
  referee2Phone_gte: String

  """All values containing the given string."""
  referee2Phone_contains: String

  """All values not containing the given string."""
  referee2Phone_not_contains: String

  """All values starting with the given string."""
  referee2Phone_starts_with: String

  """All values not starting with the given string."""
  referee2Phone_not_starts_with: String

  """All values ending with the given string."""
  referee2Phone_ends_with: String

  """All values not ending with the given string."""
  referee2Phone_not_ends_with: String
  referee2Email: String

  """All values that are not equal to given value."""
  referee2Email_not: String

  """All values that are contained in given list."""
  referee2Email_in: [String!]

  """All values that are not contained in given list."""
  referee2Email_not_in: [String!]

  """All values less than the given value."""
  referee2Email_lt: String

  """All values less than or equal the given value."""
  referee2Email_lte: String

  """All values greater than the given value."""
  referee2Email_gt: String

  """All values greater than or equal the given value."""
  referee2Email_gte: String

  """All values containing the given string."""
  referee2Email_contains: String

  """All values not containing the given string."""
  referee2Email_not_contains: String

  """All values starting with the given string."""
  referee2Email_starts_with: String

  """All values not starting with the given string."""
  referee2Email_not_starts_with: String

  """All values ending with the given string."""
  referee2Email_ends_with: String

  """All values not ending with the given string."""
  referee2Email_not_ends_with: String
  rehouserStamp: Boolean

  """All values that are not equal to given value."""
  rehouserStamp_not: Boolean
  usedFreeAppraisal: Boolean

  """All values that are not equal to given value."""
  usedFreeAppraisal_not: Boolean
  physicalAddress: String

  """All values that are not equal to given value."""
  physicalAddress_not: String

  """All values that are contained in given list."""
  physicalAddress_in: [String!]

  """All values that are not contained in given list."""
  physicalAddress_not_in: [String!]

  """All values less than the given value."""
  physicalAddress_lt: String

  """All values less than or equal the given value."""
  physicalAddress_lte: String

  """All values greater than the given value."""
  physicalAddress_gt: String

  """All values greater than or equal the given value."""
  physicalAddress_gte: String

  """All values containing the given string."""
  physicalAddress_contains: String

  """All values not containing the given string."""
  physicalAddress_not_contains: String

  """All values starting with the given string."""
  physicalAddress_starts_with: String

  """All values not starting with the given string."""
  physicalAddress_not_starts_with: String

  """All values ending with the given string."""
  physicalAddress_ends_with: String

  """All values not ending with the given string."""
  physicalAddress_not_ends_with: String
  acceptedSignupTerms: Boolean

  """All values that are not equal to given value."""
  acceptedSignupTerms_not: Boolean
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateManyDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyMutationInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyWithoutChatsInput {
  create: [UserCreateWithoutChatsInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutChatsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutChatsInput!]
}

input UserUpdateManyWithoutInvolvedActivityInput {
  create: [UserCreateWithoutInvolvedActivityInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutInvolvedActivityInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutInvolvedActivityInput!]
}

input UserUpdateManyWithoutPropertiesInput {
  create: [UserCreateWithoutPropertiesInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPropertiesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPropertiesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutAwaitingFriendsInput {
  create: UserCreateWithoutAwaitingFriendsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutAwaitingFriendsDataInput
  upsert: UserUpsertWithoutAwaitingFriendsInput
}

input UserUpdateOneRequiredWithoutCreatedPropertiesInput {
  create: UserCreateWithoutCreatedPropertiesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCreatedPropertiesDataInput
  upsert: UserUpsertWithoutCreatedPropertiesInput
}

input UserUpdateOneRequiredWithoutCreditCardsInput {
  create: UserCreateWithoutCreditCardsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCreditCardsDataInput
  upsert: UserUpsertWithoutCreditCardsInput
}

input UserUpdateOneRequiredWithoutFriendRequestsInput {
  create: UserCreateWithoutFriendRequestsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFriendRequestsDataInput
  upsert: UserUpsertWithoutFriendRequestsInput
}

input UserUpdateOneRequiredWithoutRentalAppraisalsInput {
  create: UserCreateWithoutRentalAppraisalsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRentalAppraisalsDataInput
  upsert: UserUpsertWithoutRentalAppraisalsInput
}

input UserUpdateOneWithoutActivityInput {
  create: UserCreateWithoutActivityInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutActivityDataInput
  upsert: UserUpsertWithoutActivityInput
}

input UserUpdateOneWithoutLesseeLeasesInput {
  create: UserCreateWithoutLesseeLeasesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLesseeLeasesDataInput
  upsert: UserUpsertWithoutLesseeLeasesInput
}

input UserUpdateOneWithoutLessorLeasesInput {
  create: UserCreateWithoutLessorLeasesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLessorLeasesDataInput
  upsert: UserUpsertWithoutLessorLeasesInput
}

input UserUpdateOneWithoutPhotoIdentificationInput {
  create: UserCreateWithoutPhotoIdentificationInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPhotoIdentificationDataInput
  upsert: UserUpsertWithoutPhotoIdentificationInput
}

input UserUpdateOneWithoutProfilePhotoInput {
  create: UserCreateWithoutProfilePhotoInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutProfilePhotoDataInput
  upsert: UserUpsertWithoutProfilePhotoInput
}

input UserUpdateOneWithoutProofOfAddressInput {
  create: UserCreateWithoutProofOfAddressInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutProofOfAddressDataInput
  upsert: UserUpsertWithoutProofOfAddressInput
}

input UserUpdateOneWithoutRecievedMessagesInput {
  create: UserCreateWithoutRecievedMessagesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutRecievedMessagesDataInput
  upsert: UserUpsertWithoutRecievedMessagesInput
}

input UserUpdateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutSentMessagesDataInput
  upsert: UserUpsertWithoutSentMessagesInput
}

input UserUpdateOneWithoutSignatureInput {
  create: UserCreateWithoutSignatureInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutSignatureDataInput
  upsert: UserUpsertWithoutSignatureInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutActivityDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutAwaitingFriendsDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutChatsDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutCreatedPropertiesDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutCreditCardsDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutFriendRequestsDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutInvolvedActivityDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutLesseeLeasesDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutLessorLeasesDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutPhotoIdentificationDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutProfilePhotoDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutProofOfAddressDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
}

input UserUpdateWithoutPropertiesDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutRecievedMessagesDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutRentalAppraisalsDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutSentMessagesDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  signature: FileUpdateOneWithoutUserSignatureInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithoutSignatureDataInput {
  dob: DateTime
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  rehouserStamp: Boolean
  usedFreeAppraisal: Boolean
  physicalAddress: String
  acceptedSignupTerms: Boolean
  permissions: UserUpdatepermissionsInput
  friends: UserUpdateManyInput
  friendRequests: FriendRequestUpdateManyWithoutAcceptingUserInput
  awaitingFriends: FriendRequestUpdateManyWithoutRequestUserInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneWithoutUserPhotoIdInput
  profilePhoto: FileUpdateOneWithoutUserProfilePhotoInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
  chats: ChatUpdateManyWithoutParticipantsInput
  sentMessages: MessageUpdateManyWithoutSenderInput
  recievedMessages: MessageUpdateManyWithoutRecipientInput
  activity: ActivityUpdateManyWithoutUserInput
  involvedActivity: ActivityUpdateManyWithoutInvolvedInput
  rentalAppraisals: RentalAppraisalUpdateManyWithoutRequestedByInput
  proofOfAddress: FileUpdateOneWithoutUserProofOfAddressInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChatsDataInput!
}

input UserUpdateWithWhereUniqueWithoutInvolvedActivityInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutInvolvedActivityDataInput!
}

input UserUpdateWithWhereUniqueWithoutPropertiesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPropertiesDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutActivityInput {
  update: UserUpdateWithoutActivityDataInput!
  create: UserCreateWithoutActivityInput!
}

input UserUpsertWithoutAwaitingFriendsInput {
  update: UserUpdateWithoutAwaitingFriendsDataInput!
  create: UserCreateWithoutAwaitingFriendsInput!
}

input UserUpsertWithoutCreatedPropertiesInput {
  update: UserUpdateWithoutCreatedPropertiesDataInput!
  create: UserCreateWithoutCreatedPropertiesInput!
}

input UserUpsertWithoutCreditCardsInput {
  update: UserUpdateWithoutCreditCardsDataInput!
  create: UserCreateWithoutCreditCardsInput!
}

input UserUpsertWithoutFriendRequestsInput {
  update: UserUpdateWithoutFriendRequestsDataInput!
  create: UserCreateWithoutFriendRequestsInput!
}

input UserUpsertWithoutLesseeLeasesInput {
  update: UserUpdateWithoutLesseeLeasesDataInput!
  create: UserCreateWithoutLesseeLeasesInput!
}

input UserUpsertWithoutLessorLeasesInput {
  update: UserUpdateWithoutLessorLeasesDataInput!
  create: UserCreateWithoutLessorLeasesInput!
}

input UserUpsertWithoutPhotoIdentificationInput {
  update: UserUpdateWithoutPhotoIdentificationDataInput!
  create: UserCreateWithoutPhotoIdentificationInput!
}

input UserUpsertWithoutProfilePhotoInput {
  update: UserUpdateWithoutProfilePhotoDataInput!
  create: UserCreateWithoutProfilePhotoInput!
}

input UserUpsertWithoutProofOfAddressInput {
  update: UserUpdateWithoutProofOfAddressDataInput!
  create: UserCreateWithoutProofOfAddressInput!
}

input UserUpsertWithoutRecievedMessagesInput {
  update: UserUpdateWithoutRecievedMessagesDataInput!
  create: UserCreateWithoutRecievedMessagesInput!
}

input UserUpsertWithoutRentalAppraisalsInput {
  update: UserUpdateWithoutRentalAppraisalsDataInput!
  create: UserCreateWithoutRentalAppraisalsInput!
}

input UserUpsertWithoutSentMessagesInput {
  update: UserUpdateWithoutSentMessagesDataInput!
  create: UserCreateWithoutSentMessagesInput!
}

input UserUpsertWithoutSignatureInput {
  update: UserUpdateWithoutSignatureDataInput!
  create: UserCreateWithoutSignatureInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutChatsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChatsDataInput!
  create: UserCreateWithoutChatsInput!
}

input UserUpsertWithWhereUniqueWithoutInvolvedActivityInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutInvolvedActivityDataInput!
  create: UserCreateWithoutInvolvedActivityInput!
}

input UserUpsertWithWhereUniqueWithoutPropertiesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPropertiesDataInput!
  create: UserCreateWithoutPropertiesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  dob: DateTime

  """All values that are not equal to given value."""
  dob_not: DateTime

  """All values that are contained in given list."""
  dob_in: [DateTime!]

  """All values that are not contained in given list."""
  dob_not_in: [DateTime!]

  """All values less than the given value."""
  dob_lt: DateTime

  """All values less than or equal the given value."""
  dob_lte: DateTime

  """All values greater than the given value."""
  dob_gt: DateTime

  """All values greater than or equal the given value."""
  dob_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  identificationNumber: String

  """All values that are not equal to given value."""
  identificationNumber_not: String

  """All values that are contained in given list."""
  identificationNumber_in: [String!]

  """All values that are not contained in given list."""
  identificationNumber_not_in: [String!]

  """All values less than the given value."""
  identificationNumber_lt: String

  """All values less than or equal the given value."""
  identificationNumber_lte: String

  """All values greater than the given value."""
  identificationNumber_gt: String

  """All values greater than or equal the given value."""
  identificationNumber_gte: String

  """All values containing the given string."""
  identificationNumber_contains: String

  """All values not containing the given string."""
  identificationNumber_not_contains: String

  """All values starting with the given string."""
  identificationNumber_starts_with: String

  """All values not starting with the given string."""
  identificationNumber_not_starts_with: String

  """All values ending with the given string."""
  identificationNumber_ends_with: String

  """All values not ending with the given string."""
  identificationNumber_not_ends_with: String
  emergencyContactName: String

  """All values that are not equal to given value."""
  emergencyContactName_not: String

  """All values that are contained in given list."""
  emergencyContactName_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactName_not_in: [String!]

  """All values less than the given value."""
  emergencyContactName_lt: String

  """All values less than or equal the given value."""
  emergencyContactName_lte: String

  """All values greater than the given value."""
  emergencyContactName_gt: String

  """All values greater than or equal the given value."""
  emergencyContactName_gte: String

  """All values containing the given string."""
  emergencyContactName_contains: String

  """All values not containing the given string."""
  emergencyContactName_not_contains: String

  """All values starting with the given string."""
  emergencyContactName_starts_with: String

  """All values not starting with the given string."""
  emergencyContactName_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactName_ends_with: String

  """All values not ending with the given string."""
  emergencyContactName_not_ends_with: String
  emergencyContactNumber: String

  """All values that are not equal to given value."""
  emergencyContactNumber_not: String

  """All values that are contained in given list."""
  emergencyContactNumber_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactNumber_not_in: [String!]

  """All values less than the given value."""
  emergencyContactNumber_lt: String

  """All values less than or equal the given value."""
  emergencyContactNumber_lte: String

  """All values greater than the given value."""
  emergencyContactNumber_gt: String

  """All values greater than or equal the given value."""
  emergencyContactNumber_gte: String

  """All values containing the given string."""
  emergencyContactNumber_contains: String

  """All values not containing the given string."""
  emergencyContactNumber_not_contains: String

  """All values starting with the given string."""
  emergencyContactNumber_starts_with: String

  """All values not starting with the given string."""
  emergencyContactNumber_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactNumber_ends_with: String

  """All values not ending with the given string."""
  emergencyContactNumber_not_ends_with: String
  emergencyContactEmail: String

  """All values that are not equal to given value."""
  emergencyContactEmail_not: String

  """All values that are contained in given list."""
  emergencyContactEmail_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactEmail_not_in: [String!]

  """All values less than the given value."""
  emergencyContactEmail_lt: String

  """All values less than or equal the given value."""
  emergencyContactEmail_lte: String

  """All values greater than the given value."""
  emergencyContactEmail_gt: String

  """All values greater than or equal the given value."""
  emergencyContactEmail_gte: String

  """All values containing the given string."""
  emergencyContactEmail_contains: String

  """All values not containing the given string."""
  emergencyContactEmail_not_contains: String

  """All values starting with the given string."""
  emergencyContactEmail_starts_with: String

  """All values not starting with the given string."""
  emergencyContactEmail_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactEmail_ends_with: String

  """All values not ending with the given string."""
  emergencyContactEmail_not_ends_with: String
  referee1Name: String

  """All values that are not equal to given value."""
  referee1Name_not: String

  """All values that are contained in given list."""
  referee1Name_in: [String!]

  """All values that are not contained in given list."""
  referee1Name_not_in: [String!]

  """All values less than the given value."""
  referee1Name_lt: String

  """All values less than or equal the given value."""
  referee1Name_lte: String

  """All values greater than the given value."""
  referee1Name_gt: String

  """All values greater than or equal the given value."""
  referee1Name_gte: String

  """All values containing the given string."""
  referee1Name_contains: String

  """All values not containing the given string."""
  referee1Name_not_contains: String

  """All values starting with the given string."""
  referee1Name_starts_with: String

  """All values not starting with the given string."""
  referee1Name_not_starts_with: String

  """All values ending with the given string."""
  referee1Name_ends_with: String

  """All values not ending with the given string."""
  referee1Name_not_ends_with: String
  referee1Phone: String

  """All values that are not equal to given value."""
  referee1Phone_not: String

  """All values that are contained in given list."""
  referee1Phone_in: [String!]

  """All values that are not contained in given list."""
  referee1Phone_not_in: [String!]

  """All values less than the given value."""
  referee1Phone_lt: String

  """All values less than or equal the given value."""
  referee1Phone_lte: String

  """All values greater than the given value."""
  referee1Phone_gt: String

  """All values greater than or equal the given value."""
  referee1Phone_gte: String

  """All values containing the given string."""
  referee1Phone_contains: String

  """All values not containing the given string."""
  referee1Phone_not_contains: String

  """All values starting with the given string."""
  referee1Phone_starts_with: String

  """All values not starting with the given string."""
  referee1Phone_not_starts_with: String

  """All values ending with the given string."""
  referee1Phone_ends_with: String

  """All values not ending with the given string."""
  referee1Phone_not_ends_with: String
  referee1Email: String

  """All values that are not equal to given value."""
  referee1Email_not: String

  """All values that are contained in given list."""
  referee1Email_in: [String!]

  """All values that are not contained in given list."""
  referee1Email_not_in: [String!]

  """All values less than the given value."""
  referee1Email_lt: String

  """All values less than or equal the given value."""
  referee1Email_lte: String

  """All values greater than the given value."""
  referee1Email_gt: String

  """All values greater than or equal the given value."""
  referee1Email_gte: String

  """All values containing the given string."""
  referee1Email_contains: String

  """All values not containing the given string."""
  referee1Email_not_contains: String

  """All values starting with the given string."""
  referee1Email_starts_with: String

  """All values not starting with the given string."""
  referee1Email_not_starts_with: String

  """All values ending with the given string."""
  referee1Email_ends_with: String

  """All values not ending with the given string."""
  referee1Email_not_ends_with: String
  referee2Name: String

  """All values that are not equal to given value."""
  referee2Name_not: String

  """All values that are contained in given list."""
  referee2Name_in: [String!]

  """All values that are not contained in given list."""
  referee2Name_not_in: [String!]

  """All values less than the given value."""
  referee2Name_lt: String

  """All values less than or equal the given value."""
  referee2Name_lte: String

  """All values greater than the given value."""
  referee2Name_gt: String

  """All values greater than or equal the given value."""
  referee2Name_gte: String

  """All values containing the given string."""
  referee2Name_contains: String

  """All values not containing the given string."""
  referee2Name_not_contains: String

  """All values starting with the given string."""
  referee2Name_starts_with: String

  """All values not starting with the given string."""
  referee2Name_not_starts_with: String

  """All values ending with the given string."""
  referee2Name_ends_with: String

  """All values not ending with the given string."""
  referee2Name_not_ends_with: String
  referee2Phone: String

  """All values that are not equal to given value."""
  referee2Phone_not: String

  """All values that are contained in given list."""
  referee2Phone_in: [String!]

  """All values that are not contained in given list."""
  referee2Phone_not_in: [String!]

  """All values less than the given value."""
  referee2Phone_lt: String

  """All values less than or equal the given value."""
  referee2Phone_lte: String

  """All values greater than the given value."""
  referee2Phone_gt: String

  """All values greater than or equal the given value."""
  referee2Phone_gte: String

  """All values containing the given string."""
  referee2Phone_contains: String

  """All values not containing the given string."""
  referee2Phone_not_contains: String

  """All values starting with the given string."""
  referee2Phone_starts_with: String

  """All values not starting with the given string."""
  referee2Phone_not_starts_with: String

  """All values ending with the given string."""
  referee2Phone_ends_with: String

  """All values not ending with the given string."""
  referee2Phone_not_ends_with: String
  referee2Email: String

  """All values that are not equal to given value."""
  referee2Email_not: String

  """All values that are contained in given list."""
  referee2Email_in: [String!]

  """All values that are not contained in given list."""
  referee2Email_not_in: [String!]

  """All values less than the given value."""
  referee2Email_lt: String

  """All values less than or equal the given value."""
  referee2Email_lte: String

  """All values greater than the given value."""
  referee2Email_gt: String

  """All values greater than or equal the given value."""
  referee2Email_gte: String

  """All values containing the given string."""
  referee2Email_contains: String

  """All values not containing the given string."""
  referee2Email_not_contains: String

  """All values starting with the given string."""
  referee2Email_starts_with: String

  """All values not starting with the given string."""
  referee2Email_not_starts_with: String

  """All values ending with the given string."""
  referee2Email_ends_with: String

  """All values not ending with the given string."""
  referee2Email_not_ends_with: String
  rehouserStamp: Boolean

  """All values that are not equal to given value."""
  rehouserStamp_not: Boolean
  usedFreeAppraisal: Boolean

  """All values that are not equal to given value."""
  usedFreeAppraisal_not: Boolean
  physicalAddress: String

  """All values that are not equal to given value."""
  physicalAddress_not: String

  """All values that are contained in given list."""
  physicalAddress_in: [String!]

  """All values that are not contained in given list."""
  physicalAddress_not_in: [String!]

  """All values less than the given value."""
  physicalAddress_lt: String

  """All values less than or equal the given value."""
  physicalAddress_lte: String

  """All values greater than the given value."""
  physicalAddress_gt: String

  """All values greater than or equal the given value."""
  physicalAddress_gte: String

  """All values containing the given string."""
  physicalAddress_contains: String

  """All values not containing the given string."""
  physicalAddress_not_contains: String

  """All values starting with the given string."""
  physicalAddress_starts_with: String

  """All values not starting with the given string."""
  physicalAddress_not_starts_with: String

  """All values ending with the given string."""
  physicalAddress_ends_with: String

  """All values not ending with the given string."""
  physicalAddress_not_ends_with: String
  acceptedSignupTerms: Boolean

  """All values that are not equal to given value."""
  acceptedSignupTerms_not: Boolean
  friends_every: UserWhereInput
  friends_some: UserWhereInput
  friends_none: UserWhereInput
  friendRequests_every: FriendRequestWhereInput
  friendRequests_some: FriendRequestWhereInput
  friendRequests_none: FriendRequestWhereInput
  awaitingFriends_every: FriendRequestWhereInput
  awaitingFriends_some: FriendRequestWhereInput
  awaitingFriends_none: FriendRequestWhereInput
  properties_every: PropertyWhereInput
  properties_some: PropertyWhereInput
  properties_none: PropertyWhereInput
  lesseeLeases_every: LesseeWhereInput
  lesseeLeases_some: LesseeWhereInput
  lesseeLeases_none: LesseeWhereInput
  lessorLeases_every: LessorWhereInput
  lessorLeases_some: LessorWhereInput
  lessorLeases_none: LessorWhereInput
  createdProperties_every: PropertyWhereInput
  createdProperties_some: PropertyWhereInput
  createdProperties_none: PropertyWhereInput
  photoIdentification: FileWhereInput
  profilePhoto: FileWhereInput
  creditCards_every: CreditCardWhereInput
  creditCards_some: CreditCardWhereInput
  creditCards_none: CreditCardWhereInput
  primaryCreditCard: CreditCardWhereInput
  chats_every: ChatWhereInput
  chats_some: ChatWhereInput
  chats_none: ChatWhereInput
  sentMessages_every: MessageWhereInput
  sentMessages_some: MessageWhereInput
  sentMessages_none: MessageWhereInput
  recievedMessages_every: MessageWhereInput
  recievedMessages_some: MessageWhereInput
  recievedMessages_none: MessageWhereInput
  signature: FileWhereInput
  activity_every: ActivityWhereInput
  activity_some: ActivityWhereInput
  activity_none: ActivityWhereInput
  involvedActivity_every: ActivityWhereInput
  involvedActivity_some: ActivityWhereInput
  involvedActivity_none: ActivityWhereInput
  rentalAppraisals_every: RentalAppraisalWhereInput
  rentalAppraisals_some: RentalAppraisalWhereInput
  rentalAppraisals_none: RentalAppraisalWhereInput
  proofOfAddress: FileWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum VisibilityLevel {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}

type Wallet implements Node {
  id: ID!
  lease: PropertyLease
  amount: Float
  charges(where: ChargeWhereInput, orderBy: ChargeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Charge!]
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
}

"""A connection to a list of items."""
type WalletConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WalletEdge]!
  aggregate: AggregateWallet!
}

input WalletCreateInput {
  id: ID
  amount: Float
  lease: PropertyLeaseCreateOneWithoutWalletInput
  charges: ChargeCreateManyWithoutWalletInput
  payments: PaymentCreateManyWithoutWalletInput
}

input WalletCreateOneWithoutChargesInput {
  create: WalletCreateWithoutChargesInput
  connect: WalletWhereUniqueInput
}

input WalletCreateOneWithoutLeaseInput {
  create: WalletCreateWithoutLeaseInput
  connect: WalletWhereUniqueInput
}

input WalletCreateOneWithoutPaymentsInput {
  create: WalletCreateWithoutPaymentsInput
  connect: WalletWhereUniqueInput
}

input WalletCreateWithoutChargesInput {
  id: ID
  amount: Float
  lease: PropertyLeaseCreateOneWithoutWalletInput
  payments: PaymentCreateManyWithoutWalletInput
}

input WalletCreateWithoutLeaseInput {
  id: ID
  amount: Float
  charges: ChargeCreateManyWithoutWalletInput
  payments: PaymentCreateManyWithoutWalletInput
}

input WalletCreateWithoutPaymentsInput {
  id: ID
  amount: Float
  lease: PropertyLeaseCreateOneWithoutWalletInput
  charges: ChargeCreateManyWithoutWalletInput
}

"""An edge in a connection."""
type WalletEdge {
  """The item at the end of the edge."""
  node: Wallet!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WalletOrderByInput {
  id_ASC
  id_DESC
  amount_ASC
  amount_DESC
}

type WalletPreviousValues {
  id: ID!
  amount: Float
}

type WalletSubscriptionPayload {
  mutation: MutationType!
  node: Wallet
  updatedFields: [String!]
  previousValues: WalletPreviousValues
}

input WalletSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WalletSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WalletSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WalletSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WalletWhereInput
}

input WalletUpdateInput {
  amount: Float
  lease: PropertyLeaseUpdateOneWithoutWalletInput
  charges: ChargeUpdateManyWithoutWalletInput
  payments: PaymentUpdateManyWithoutWalletInput
}

input WalletUpdateManyMutationInput {
  amount: Float
}

input WalletUpdateOneWithoutChargesInput {
  create: WalletCreateWithoutChargesInput
  connect: WalletWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WalletUpdateWithoutChargesDataInput
  upsert: WalletUpsertWithoutChargesInput
}

input WalletUpdateOneWithoutLeaseInput {
  create: WalletCreateWithoutLeaseInput
  connect: WalletWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WalletUpdateWithoutLeaseDataInput
  upsert: WalletUpsertWithoutLeaseInput
}

input WalletUpdateOneWithoutPaymentsInput {
  create: WalletCreateWithoutPaymentsInput
  connect: WalletWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: WalletUpdateWithoutPaymentsDataInput
  upsert: WalletUpsertWithoutPaymentsInput
}

input WalletUpdateWithoutChargesDataInput {
  amount: Float
  lease: PropertyLeaseUpdateOneWithoutWalletInput
  payments: PaymentUpdateManyWithoutWalletInput
}

input WalletUpdateWithoutLeaseDataInput {
  amount: Float
  charges: ChargeUpdateManyWithoutWalletInput
  payments: PaymentUpdateManyWithoutWalletInput
}

input WalletUpdateWithoutPaymentsDataInput {
  amount: Float
  lease: PropertyLeaseUpdateOneWithoutWalletInput
  charges: ChargeUpdateManyWithoutWalletInput
}

input WalletUpsertWithoutChargesInput {
  update: WalletUpdateWithoutChargesDataInput!
  create: WalletCreateWithoutChargesInput!
}

input WalletUpsertWithoutLeaseInput {
  update: WalletUpdateWithoutLeaseDataInput!
  create: WalletCreateWithoutLeaseInput!
}

input WalletUpsertWithoutPaymentsInput {
  update: WalletUpdateWithoutPaymentsDataInput!
  create: WalletCreateWithoutPaymentsInput!
}

input WalletWhereInput {
  """Logical AND on all given filters."""
  AND: [WalletWhereInput!]

  """Logical OR on all given filters."""
  OR: [WalletWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WalletWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amount: Float

  """All values that are not equal to given value."""
  amount_not: Float

  """All values that are contained in given list."""
  amount_in: [Float!]

  """All values that are not contained in given list."""
  amount_not_in: [Float!]

  """All values less than the given value."""
  amount_lt: Float

  """All values less than or equal the given value."""
  amount_lte: Float

  """All values greater than the given value."""
  amount_gt: Float

  """All values greater than or equal the given value."""
  amount_gte: Float
  lease: PropertyLeaseWhereInput
  charges_every: ChargeWhereInput
  charges_some: ChargeWhereInput
  charges_none: ChargeWhereInput
  payments_every: PaymentWhereInput
  payments_some: PaymentWhereInput
  payments_none: PaymentWhereInput
}

input WalletWhereUniqueInput {
  id: ID
}
