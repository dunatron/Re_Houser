# source: https://us1.prisma.sh/heath-dunlop-37e897/rehouser-service/dev
# timestamp: Tue Jun 18 2019 16:41:33 GMT+1200 (New Zealand Standard Time)

type AggregateCreditCard {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateLessee {
  count: Int!
}

type AggregateLessor {
  count: Int!
}

type AggregateProperty {
  count: Int!
}

type AggregatePropertyAdvertisement {
  count: Int!
}

type AggregatePropertyLease {
  count: Int!
}

type AggregateRentalApplication {
  count: Int!
}

type AggregateRentalGroupApplicant {
  count: Int!
}

type AggregateUser {
  count: Int!
}

enum ApplicationStage {
  INITIALIZING
  PENDING
  DENIED
  ACCEPTED
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type CreditCard implements Node {
  id: ID!
  cardOwner: User!
  createdAt: DateTime!
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
}

"""A connection to a list of items."""
type CreditCardConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [CreditCardEdge]!
  aggregate: AggregateCreditCard!
}

input CreditCardCreateInput {
  id: ID
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
  cardOwner: UserCreateOneWithoutCreditCardsInput!
}

input CreditCardCreateManyWithoutCardOwnerInput {
  create: [CreditCardCreateWithoutCardOwnerInput!]
  connect: [CreditCardWhereUniqueInput!]
}

input CreditCardCreateOneInput {
  create: CreditCardCreateInput
  connect: CreditCardWhereUniqueInput
}

input CreditCardCreateWithoutCardOwnerInput {
  id: ID
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
}

"""An edge in a connection."""
type CreditCardEdge {
  """The item at the end of the edge."""
  node: CreditCard!

  """A cursor for use in pagination."""
  cursor: String!
}

enum CreditCardOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  stripeCardId_ASC
  stripeCardId_DESC
  brand_ASC
  brand_DESC
  country_ASC
  country_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
  exp_month_ASC
  exp_month_DESC
  exp_year_ASC
  exp_year_DESC
  fingerprint_ASC
  fingerprint_DESC
  last4_ASC
  last4_DESC
  name_ASC
  name_DESC
  tron_ASC
  tron_DESC
}

type CreditCardPreviousValues {
  id: ID!
  createdAt: DateTime!
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
}

input CreditCardScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [CreditCardScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreditCardScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreditCardScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  stripeCardId: String

  """All values that are not equal to given value."""
  stripeCardId_not: String

  """All values that are contained in given list."""
  stripeCardId_in: [String!]

  """All values that are not contained in given list."""
  stripeCardId_not_in: [String!]

  """All values less than the given value."""
  stripeCardId_lt: String

  """All values less than or equal the given value."""
  stripeCardId_lte: String

  """All values greater than the given value."""
  stripeCardId_gt: String

  """All values greater than or equal the given value."""
  stripeCardId_gte: String

  """All values containing the given string."""
  stripeCardId_contains: String

  """All values not containing the given string."""
  stripeCardId_not_contains: String

  """All values starting with the given string."""
  stripeCardId_starts_with: String

  """All values not starting with the given string."""
  stripeCardId_not_starts_with: String

  """All values ending with the given string."""
  stripeCardId_ends_with: String

  """All values not ending with the given string."""
  stripeCardId_not_ends_with: String
  brand: String

  """All values that are not equal to given value."""
  brand_not: String

  """All values that are contained in given list."""
  brand_in: [String!]

  """All values that are not contained in given list."""
  brand_not_in: [String!]

  """All values less than the given value."""
  brand_lt: String

  """All values less than or equal the given value."""
  brand_lte: String

  """All values greater than the given value."""
  brand_gt: String

  """All values greater than or equal the given value."""
  brand_gte: String

  """All values containing the given string."""
  brand_contains: String

  """All values not containing the given string."""
  brand_not_contains: String

  """All values starting with the given string."""
  brand_starts_with: String

  """All values not starting with the given string."""
  brand_not_starts_with: String

  """All values ending with the given string."""
  brand_ends_with: String

  """All values not ending with the given string."""
  brand_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  exp_month: Int

  """All values that are not equal to given value."""
  exp_month_not: Int

  """All values that are contained in given list."""
  exp_month_in: [Int!]

  """All values that are not contained in given list."""
  exp_month_not_in: [Int!]

  """All values less than the given value."""
  exp_month_lt: Int

  """All values less than or equal the given value."""
  exp_month_lte: Int

  """All values greater than the given value."""
  exp_month_gt: Int

  """All values greater than or equal the given value."""
  exp_month_gte: Int
  exp_year: Int

  """All values that are not equal to given value."""
  exp_year_not: Int

  """All values that are contained in given list."""
  exp_year_in: [Int!]

  """All values that are not contained in given list."""
  exp_year_not_in: [Int!]

  """All values less than the given value."""
  exp_year_lt: Int

  """All values less than or equal the given value."""
  exp_year_lte: Int

  """All values greater than the given value."""
  exp_year_gt: Int

  """All values greater than or equal the given value."""
  exp_year_gte: Int
  fingerprint: String

  """All values that are not equal to given value."""
  fingerprint_not: String

  """All values that are contained in given list."""
  fingerprint_in: [String!]

  """All values that are not contained in given list."""
  fingerprint_not_in: [String!]

  """All values less than the given value."""
  fingerprint_lt: String

  """All values less than or equal the given value."""
  fingerprint_lte: String

  """All values greater than the given value."""
  fingerprint_gt: String

  """All values greater than or equal the given value."""
  fingerprint_gte: String

  """All values containing the given string."""
  fingerprint_contains: String

  """All values not containing the given string."""
  fingerprint_not_contains: String

  """All values starting with the given string."""
  fingerprint_starts_with: String

  """All values not starting with the given string."""
  fingerprint_not_starts_with: String

  """All values ending with the given string."""
  fingerprint_ends_with: String

  """All values not ending with the given string."""
  fingerprint_not_ends_with: String
  last4: String

  """All values that are not equal to given value."""
  last4_not: String

  """All values that are contained in given list."""
  last4_in: [String!]

  """All values that are not contained in given list."""
  last4_not_in: [String!]

  """All values less than the given value."""
  last4_lt: String

  """All values less than or equal the given value."""
  last4_lte: String

  """All values greater than the given value."""
  last4_gt: String

  """All values greater than or equal the given value."""
  last4_gte: String

  """All values containing the given string."""
  last4_contains: String

  """All values not containing the given string."""
  last4_not_contains: String

  """All values starting with the given string."""
  last4_starts_with: String

  """All values not starting with the given string."""
  last4_not_starts_with: String

  """All values ending with the given string."""
  last4_ends_with: String

  """All values not ending with the given string."""
  last4_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  tron: String

  """All values that are not equal to given value."""
  tron_not: String

  """All values that are contained in given list."""
  tron_in: [String!]

  """All values that are not contained in given list."""
  tron_not_in: [String!]

  """All values less than the given value."""
  tron_lt: String

  """All values less than or equal the given value."""
  tron_lte: String

  """All values greater than the given value."""
  tron_gt: String

  """All values greater than or equal the given value."""
  tron_gte: String

  """All values containing the given string."""
  tron_contains: String

  """All values not containing the given string."""
  tron_not_contains: String

  """All values starting with the given string."""
  tron_starts_with: String

  """All values not starting with the given string."""
  tron_not_starts_with: String

  """All values ending with the given string."""
  tron_ends_with: String

  """All values not ending with the given string."""
  tron_not_ends_with: String
}

type CreditCardSubscriptionPayload {
  mutation: MutationType!
  node: CreditCard
  updatedFields: [String!]
  previousValues: CreditCardPreviousValues
}

input CreditCardSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [CreditCardSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreditCardSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreditCardSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: CreditCardWhereInput
}

input CreditCardUpdateDataInput {
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
  cardOwner: UserUpdateOneRequiredWithoutCreditCardsInput
}

input CreditCardUpdateInput {
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
  cardOwner: UserUpdateOneRequiredWithoutCreditCardsInput
}

input CreditCardUpdateManyDataInput {
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
}

input CreditCardUpdateManyMutationInput {
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
}

input CreditCardUpdateManyWithoutCardOwnerInput {
  create: [CreditCardCreateWithoutCardOwnerInput!]
  connect: [CreditCardWhereUniqueInput!]
  set: [CreditCardWhereUniqueInput!]
  disconnect: [CreditCardWhereUniqueInput!]
  delete: [CreditCardWhereUniqueInput!]
  update: [CreditCardUpdateWithWhereUniqueWithoutCardOwnerInput!]
  updateMany: [CreditCardUpdateManyWithWhereNestedInput!]
  deleteMany: [CreditCardScalarWhereInput!]
  upsert: [CreditCardUpsertWithWhereUniqueWithoutCardOwnerInput!]
}

input CreditCardUpdateManyWithWhereNestedInput {
  where: CreditCardScalarWhereInput!
  data: CreditCardUpdateManyDataInput!
}

input CreditCardUpdateOneInput {
  create: CreditCardCreateInput
  connect: CreditCardWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CreditCardUpdateDataInput
  upsert: CreditCardUpsertNestedInput
}

input CreditCardUpdateWithoutCardOwnerDataInput {
  stripeCardId: String
  brand: String
  country: String
  stripeCustomerId: String
  exp_month: Int
  exp_year: Int
  fingerprint: String
  last4: String
  name: String
  tron: String
}

input CreditCardUpdateWithWhereUniqueWithoutCardOwnerInput {
  where: CreditCardWhereUniqueInput!
  data: CreditCardUpdateWithoutCardOwnerDataInput!
}

input CreditCardUpsertNestedInput {
  update: CreditCardUpdateDataInput!
  create: CreditCardCreateInput!
}

input CreditCardUpsertWithWhereUniqueWithoutCardOwnerInput {
  where: CreditCardWhereUniqueInput!
  update: CreditCardUpdateWithoutCardOwnerDataInput!
  create: CreditCardCreateWithoutCardOwnerInput!
}

input CreditCardWhereInput {
  """Logical AND on all given filters."""
  AND: [CreditCardWhereInput!]

  """Logical OR on all given filters."""
  OR: [CreditCardWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [CreditCardWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  stripeCardId: String

  """All values that are not equal to given value."""
  stripeCardId_not: String

  """All values that are contained in given list."""
  stripeCardId_in: [String!]

  """All values that are not contained in given list."""
  stripeCardId_not_in: [String!]

  """All values less than the given value."""
  stripeCardId_lt: String

  """All values less than or equal the given value."""
  stripeCardId_lte: String

  """All values greater than the given value."""
  stripeCardId_gt: String

  """All values greater than or equal the given value."""
  stripeCardId_gte: String

  """All values containing the given string."""
  stripeCardId_contains: String

  """All values not containing the given string."""
  stripeCardId_not_contains: String

  """All values starting with the given string."""
  stripeCardId_starts_with: String

  """All values not starting with the given string."""
  stripeCardId_not_starts_with: String

  """All values ending with the given string."""
  stripeCardId_ends_with: String

  """All values not ending with the given string."""
  stripeCardId_not_ends_with: String
  brand: String

  """All values that are not equal to given value."""
  brand_not: String

  """All values that are contained in given list."""
  brand_in: [String!]

  """All values that are not contained in given list."""
  brand_not_in: [String!]

  """All values less than the given value."""
  brand_lt: String

  """All values less than or equal the given value."""
  brand_lte: String

  """All values greater than the given value."""
  brand_gt: String

  """All values greater than or equal the given value."""
  brand_gte: String

  """All values containing the given string."""
  brand_contains: String

  """All values not containing the given string."""
  brand_not_contains: String

  """All values starting with the given string."""
  brand_starts_with: String

  """All values not starting with the given string."""
  brand_not_starts_with: String

  """All values ending with the given string."""
  brand_ends_with: String

  """All values not ending with the given string."""
  brand_not_ends_with: String
  country: String

  """All values that are not equal to given value."""
  country_not: String

  """All values that are contained in given list."""
  country_in: [String!]

  """All values that are not contained in given list."""
  country_not_in: [String!]

  """All values less than the given value."""
  country_lt: String

  """All values less than or equal the given value."""
  country_lte: String

  """All values greater than the given value."""
  country_gt: String

  """All values greater than or equal the given value."""
  country_gte: String

  """All values containing the given string."""
  country_contains: String

  """All values not containing the given string."""
  country_not_contains: String

  """All values starting with the given string."""
  country_starts_with: String

  """All values not starting with the given string."""
  country_not_starts_with: String

  """All values ending with the given string."""
  country_ends_with: String

  """All values not ending with the given string."""
  country_not_ends_with: String
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  exp_month: Int

  """All values that are not equal to given value."""
  exp_month_not: Int

  """All values that are contained in given list."""
  exp_month_in: [Int!]

  """All values that are not contained in given list."""
  exp_month_not_in: [Int!]

  """All values less than the given value."""
  exp_month_lt: Int

  """All values less than or equal the given value."""
  exp_month_lte: Int

  """All values greater than the given value."""
  exp_month_gt: Int

  """All values greater than or equal the given value."""
  exp_month_gte: Int
  exp_year: Int

  """All values that are not equal to given value."""
  exp_year_not: Int

  """All values that are contained in given list."""
  exp_year_in: [Int!]

  """All values that are not contained in given list."""
  exp_year_not_in: [Int!]

  """All values less than the given value."""
  exp_year_lt: Int

  """All values less than or equal the given value."""
  exp_year_lte: Int

  """All values greater than the given value."""
  exp_year_gt: Int

  """All values greater than or equal the given value."""
  exp_year_gte: Int
  fingerprint: String

  """All values that are not equal to given value."""
  fingerprint_not: String

  """All values that are contained in given list."""
  fingerprint_in: [String!]

  """All values that are not contained in given list."""
  fingerprint_not_in: [String!]

  """All values less than the given value."""
  fingerprint_lt: String

  """All values less than or equal the given value."""
  fingerprint_lte: String

  """All values greater than the given value."""
  fingerprint_gt: String

  """All values greater than or equal the given value."""
  fingerprint_gte: String

  """All values containing the given string."""
  fingerprint_contains: String

  """All values not containing the given string."""
  fingerprint_not_contains: String

  """All values starting with the given string."""
  fingerprint_starts_with: String

  """All values not starting with the given string."""
  fingerprint_not_starts_with: String

  """All values ending with the given string."""
  fingerprint_ends_with: String

  """All values not ending with the given string."""
  fingerprint_not_ends_with: String
  last4: String

  """All values that are not equal to given value."""
  last4_not: String

  """All values that are contained in given list."""
  last4_in: [String!]

  """All values that are not contained in given list."""
  last4_not_in: [String!]

  """All values less than the given value."""
  last4_lt: String

  """All values less than or equal the given value."""
  last4_lte: String

  """All values greater than the given value."""
  last4_gt: String

  """All values greater than or equal the given value."""
  last4_gte: String

  """All values containing the given string."""
  last4_contains: String

  """All values not containing the given string."""
  last4_not_contains: String

  """All values starting with the given string."""
  last4_starts_with: String

  """All values not starting with the given string."""
  last4_not_starts_with: String

  """All values ending with the given string."""
  last4_ends_with: String

  """All values not ending with the given string."""
  last4_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  tron: String

  """All values that are not equal to given value."""
  tron_not: String

  """All values that are contained in given list."""
  tron_in: [String!]

  """All values that are not contained in given list."""
  tron_not_in: [String!]

  """All values less than the given value."""
  tron_lt: String

  """All values less than or equal the given value."""
  tron_lte: String

  """All values greater than the given value."""
  tron_gt: String

  """All values greater than or equal the given value."""
  tron_gte: String

  """All values containing the given string."""
  tron_contains: String

  """All values not containing the given string."""
  tron_not_contains: String

  """All values starting with the given string."""
  tron_starts_with: String

  """All values not starting with the given string."""
  tron_not_starts_with: String

  """All values ending with the given string."""
  tron_ends_with: String

  """All values not ending with the given string."""
  tron_not_ends_with: String
  cardOwner: UserWhereInput
}

input CreditCardWhereUniqueInput {
  id: ID
  stripeCardId: String
}

scalar DateTime

type File implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
}

"""A connection to a list of items."""
type FileConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
}

"""An edge in a connection."""
type FileEdge {
  """The item at the end of the edge."""
  node: File!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  filename_ASC
  filename_DESC
  mimetype_ASC
  mimetype_DESC
  encoding_ASC
  encoding_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  filename: String!
  mimetype: String!
  encoding: String!
  url: String
}

input FileScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [FileScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FileSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FileWhereInput
}

input FileUpdateDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyDataInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  delete: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
  deleteMany: [FileScalarWhereInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
}

input FileUpdateManyMutationInput {
  filename: String
  mimetype: String
  encoding: String
  url: String
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateOneInput {
  create: FileCreateInput
  connect: FileWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: FileUpdateDataInput
  upsert: FileUpsertNestedInput
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpsertNestedInput {
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileWhereInput {
  """Logical AND on all given filters."""
  AND: [FileWhereInput!]

  """Logical OR on all given filters."""
  OR: [FileWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FileWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  filename: String

  """All values that are not equal to given value."""
  filename_not: String

  """All values that are contained in given list."""
  filename_in: [String!]

  """All values that are not contained in given list."""
  filename_not_in: [String!]

  """All values less than the given value."""
  filename_lt: String

  """All values less than or equal the given value."""
  filename_lte: String

  """All values greater than the given value."""
  filename_gt: String

  """All values greater than or equal the given value."""
  filename_gte: String

  """All values containing the given string."""
  filename_contains: String

  """All values not containing the given string."""
  filename_not_contains: String

  """All values starting with the given string."""
  filename_starts_with: String

  """All values not starting with the given string."""
  filename_not_starts_with: String

  """All values ending with the given string."""
  filename_ends_with: String

  """All values not ending with the given string."""
  filename_not_ends_with: String
  mimetype: String

  """All values that are not equal to given value."""
  mimetype_not: String

  """All values that are contained in given list."""
  mimetype_in: [String!]

  """All values that are not contained in given list."""
  mimetype_not_in: [String!]

  """All values less than the given value."""
  mimetype_lt: String

  """All values less than or equal the given value."""
  mimetype_lte: String

  """All values greater than the given value."""
  mimetype_gt: String

  """All values greater than or equal the given value."""
  mimetype_gte: String

  """All values containing the given string."""
  mimetype_contains: String

  """All values not containing the given string."""
  mimetype_not_contains: String

  """All values starting with the given string."""
  mimetype_starts_with: String

  """All values not starting with the given string."""
  mimetype_not_starts_with: String

  """All values ending with the given string."""
  mimetype_ends_with: String

  """All values not ending with the given string."""
  mimetype_not_ends_with: String
  encoding: String

  """All values that are not equal to given value."""
  encoding_not: String

  """All values that are contained in given list."""
  encoding_in: [String!]

  """All values that are not contained in given list."""
  encoding_not_in: [String!]

  """All values less than the given value."""
  encoding_lt: String

  """All values less than or equal the given value."""
  encoding_lte: String

  """All values greater than the given value."""
  encoding_gt: String

  """All values greater than or equal the given value."""
  encoding_gte: String

  """All values containing the given string."""
  encoding_contains: String

  """All values not containing the given string."""
  encoding_not_contains: String

  """All values starting with the given string."""
  encoding_starts_with: String

  """All values not starting with the given string."""
  encoding_not_starts_with: String

  """All values ending with the given string."""
  encoding_ends_with: String

  """All values not ending with the given string."""
  encoding_not_ends_with: String
  url: String

  """All values that are not equal to given value."""
  url_not: String

  """All values that are contained in given list."""
  url_in: [String!]

  """All values that are not contained in given list."""
  url_not_in: [String!]

  """All values less than the given value."""
  url_lt: String

  """All values less than or equal the given value."""
  url_lte: String

  """All values greater than the given value."""
  url_gt: String

  """All values greater than or equal the given value."""
  url_gte: String

  """All values containing the given string."""
  url_contains: String

  """All values not containing the given string."""
  url_not_contains: String

  """All values starting with the given string."""
  url_starts_with: String

  """All values not starting with the given string."""
  url_not_starts_with: String

  """All values ending with the given string."""
  url_ends_with: String

  """All values not ending with the given string."""
  url_not_ends_with: String
}

input FileWhereUniqueInput {
  id: ID
}

enum IndoorFeature {
  AIR_CONDITIONING
  FURNISHED
  INTERNAL_LAUNDRY
  DISHWASHER
  BUILT_IN_WARDROBES
  BALCONY
  ALARM_SYSTEM
  HEATING
}

type Lessee implements Node {
  id: ID!
  lease: PropertyLease
  user: User
  signed: Boolean!
  signedAt: DateTime
}

"""A connection to a list of items."""
type LesseeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LesseeEdge]!
  aggregate: AggregateLessee!
}

input LesseeCreateInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  lease: PropertyLeaseCreateOneWithoutLesseesInput
  user: UserCreateOneWithoutLesseeLeasesInput
}

input LesseeCreateManyWithoutLeaseInput {
  create: [LesseeCreateWithoutLeaseInput!]
  connect: [LesseeWhereUniqueInput!]
}

input LesseeCreateManyWithoutUserInput {
  create: [LesseeCreateWithoutUserInput!]
  connect: [LesseeWhereUniqueInput!]
}

input LesseeCreateWithoutLeaseInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  user: UserCreateOneWithoutLesseeLeasesInput
}

input LesseeCreateWithoutUserInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  lease: PropertyLeaseCreateOneWithoutLesseesInput
}

"""An edge in a connection."""
type LesseeEdge {
  """The item at the end of the edge."""
  node: Lessee!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LesseeOrderByInput {
  id_ASC
  id_DESC
  signed_ASC
  signed_DESC
  signedAt_ASC
  signedAt_DESC
}

type LesseePreviousValues {
  id: ID!
  signed: Boolean!
  signedAt: DateTime
}

input LesseeScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LesseeScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LesseeScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LesseeScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  signed: Boolean

  """All values that are not equal to given value."""
  signed_not: Boolean
  signedAt: DateTime

  """All values that are not equal to given value."""
  signedAt_not: DateTime

  """All values that are contained in given list."""
  signedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  signedAt_not_in: [DateTime!]

  """All values less than the given value."""
  signedAt_lt: DateTime

  """All values less than or equal the given value."""
  signedAt_lte: DateTime

  """All values greater than the given value."""
  signedAt_gt: DateTime

  """All values greater than or equal the given value."""
  signedAt_gte: DateTime
}

type LesseeSubscriptionPayload {
  mutation: MutationType!
  node: Lessee
  updatedFields: [String!]
  previousValues: LesseePreviousValues
}

input LesseeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LesseeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LesseeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LesseeSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LesseeWhereInput
}

input LesseeUpdateInput {
  signed: Boolean
  signedAt: DateTime
  lease: PropertyLeaseUpdateOneWithoutLesseesInput
  user: UserUpdateOneWithoutLesseeLeasesInput
}

input LesseeUpdateManyDataInput {
  signed: Boolean
  signedAt: DateTime
}

input LesseeUpdateManyMutationInput {
  signed: Boolean
  signedAt: DateTime
}

input LesseeUpdateManyWithoutLeaseInput {
  create: [LesseeCreateWithoutLeaseInput!]
  connect: [LesseeWhereUniqueInput!]
  set: [LesseeWhereUniqueInput!]
  disconnect: [LesseeWhereUniqueInput!]
  delete: [LesseeWhereUniqueInput!]
  update: [LesseeUpdateWithWhereUniqueWithoutLeaseInput!]
  updateMany: [LesseeUpdateManyWithWhereNestedInput!]
  deleteMany: [LesseeScalarWhereInput!]
  upsert: [LesseeUpsertWithWhereUniqueWithoutLeaseInput!]
}

input LesseeUpdateManyWithoutUserInput {
  create: [LesseeCreateWithoutUserInput!]
  connect: [LesseeWhereUniqueInput!]
  set: [LesseeWhereUniqueInput!]
  disconnect: [LesseeWhereUniqueInput!]
  delete: [LesseeWhereUniqueInput!]
  update: [LesseeUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LesseeUpdateManyWithWhereNestedInput!]
  deleteMany: [LesseeScalarWhereInput!]
  upsert: [LesseeUpsertWithWhereUniqueWithoutUserInput!]
}

input LesseeUpdateManyWithWhereNestedInput {
  where: LesseeScalarWhereInput!
  data: LesseeUpdateManyDataInput!
}

input LesseeUpdateWithoutLeaseDataInput {
  signed: Boolean
  signedAt: DateTime
  user: UserUpdateOneWithoutLesseeLeasesInput
}

input LesseeUpdateWithoutUserDataInput {
  signed: Boolean
  signedAt: DateTime
  lease: PropertyLeaseUpdateOneWithoutLesseesInput
}

input LesseeUpdateWithWhereUniqueWithoutLeaseInput {
  where: LesseeWhereUniqueInput!
  data: LesseeUpdateWithoutLeaseDataInput!
}

input LesseeUpdateWithWhereUniqueWithoutUserInput {
  where: LesseeWhereUniqueInput!
  data: LesseeUpdateWithoutUserDataInput!
}

input LesseeUpsertWithWhereUniqueWithoutLeaseInput {
  where: LesseeWhereUniqueInput!
  update: LesseeUpdateWithoutLeaseDataInput!
  create: LesseeCreateWithoutLeaseInput!
}

input LesseeUpsertWithWhereUniqueWithoutUserInput {
  where: LesseeWhereUniqueInput!
  update: LesseeUpdateWithoutUserDataInput!
  create: LesseeCreateWithoutUserInput!
}

input LesseeWhereInput {
  """Logical AND on all given filters."""
  AND: [LesseeWhereInput!]

  """Logical OR on all given filters."""
  OR: [LesseeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LesseeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  signed: Boolean

  """All values that are not equal to given value."""
  signed_not: Boolean
  signedAt: DateTime

  """All values that are not equal to given value."""
  signedAt_not: DateTime

  """All values that are contained in given list."""
  signedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  signedAt_not_in: [DateTime!]

  """All values less than the given value."""
  signedAt_lt: DateTime

  """All values less than or equal the given value."""
  signedAt_lte: DateTime

  """All values greater than the given value."""
  signedAt_gt: DateTime

  """All values greater than or equal the given value."""
  signedAt_gte: DateTime
  lease: PropertyLeaseWhereInput
  user: UserWhereInput
}

input LesseeWhereUniqueInput {
  id: ID
}

type Lessor implements Node {
  id: ID!
  lease: PropertyLease
  user: User
  signed: Boolean!
  signedAt: DateTime
}

"""A connection to a list of items."""
type LessorConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [LessorEdge]!
  aggregate: AggregateLessor!
}

input LessorCreateInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  lease: PropertyLeaseCreateOneWithoutLessorsInput
  user: UserCreateOneWithoutLessorLeasesInput
}

input LessorCreateManyWithoutLeaseInput {
  create: [LessorCreateWithoutLeaseInput!]
  connect: [LessorWhereUniqueInput!]
}

input LessorCreateManyWithoutUserInput {
  create: [LessorCreateWithoutUserInput!]
  connect: [LessorWhereUniqueInput!]
}

input LessorCreateWithoutLeaseInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  user: UserCreateOneWithoutLessorLeasesInput
}

input LessorCreateWithoutUserInput {
  id: ID
  signed: Boolean!
  signedAt: DateTime
  lease: PropertyLeaseCreateOneWithoutLessorsInput
}

"""An edge in a connection."""
type LessorEdge {
  """The item at the end of the edge."""
  node: Lessor!

  """A cursor for use in pagination."""
  cursor: String!
}

enum LessorOrderByInput {
  id_ASC
  id_DESC
  signed_ASC
  signed_DESC
  signedAt_ASC
  signedAt_DESC
}

type LessorPreviousValues {
  id: ID!
  signed: Boolean!
  signedAt: DateTime
}

input LessorScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [LessorScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessorScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessorScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  signed: Boolean

  """All values that are not equal to given value."""
  signed_not: Boolean
  signedAt: DateTime

  """All values that are not equal to given value."""
  signedAt_not: DateTime

  """All values that are contained in given list."""
  signedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  signedAt_not_in: [DateTime!]

  """All values less than the given value."""
  signedAt_lt: DateTime

  """All values less than or equal the given value."""
  signedAt_lte: DateTime

  """All values greater than the given value."""
  signedAt_gt: DateTime

  """All values greater than or equal the given value."""
  signedAt_gte: DateTime
}

type LessorSubscriptionPayload {
  mutation: MutationType!
  node: Lessor
  updatedFields: [String!]
  previousValues: LessorPreviousValues
}

input LessorSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [LessorSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessorSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessorSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: LessorWhereInput
}

input LessorUpdateInput {
  signed: Boolean
  signedAt: DateTime
  lease: PropertyLeaseUpdateOneWithoutLessorsInput
  user: UserUpdateOneWithoutLessorLeasesInput
}

input LessorUpdateManyDataInput {
  signed: Boolean
  signedAt: DateTime
}

input LessorUpdateManyMutationInput {
  signed: Boolean
  signedAt: DateTime
}

input LessorUpdateManyWithoutLeaseInput {
  create: [LessorCreateWithoutLeaseInput!]
  connect: [LessorWhereUniqueInput!]
  set: [LessorWhereUniqueInput!]
  disconnect: [LessorWhereUniqueInput!]
  delete: [LessorWhereUniqueInput!]
  update: [LessorUpdateWithWhereUniqueWithoutLeaseInput!]
  updateMany: [LessorUpdateManyWithWhereNestedInput!]
  deleteMany: [LessorScalarWhereInput!]
  upsert: [LessorUpsertWithWhereUniqueWithoutLeaseInput!]
}

input LessorUpdateManyWithoutUserInput {
  create: [LessorCreateWithoutUserInput!]
  connect: [LessorWhereUniqueInput!]
  set: [LessorWhereUniqueInput!]
  disconnect: [LessorWhereUniqueInput!]
  delete: [LessorWhereUniqueInput!]
  update: [LessorUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [LessorUpdateManyWithWhereNestedInput!]
  deleteMany: [LessorScalarWhereInput!]
  upsert: [LessorUpsertWithWhereUniqueWithoutUserInput!]
}

input LessorUpdateManyWithWhereNestedInput {
  where: LessorScalarWhereInput!
  data: LessorUpdateManyDataInput!
}

input LessorUpdateWithoutLeaseDataInput {
  signed: Boolean
  signedAt: DateTime
  user: UserUpdateOneWithoutLessorLeasesInput
}

input LessorUpdateWithoutUserDataInput {
  signed: Boolean
  signedAt: DateTime
  lease: PropertyLeaseUpdateOneWithoutLessorsInput
}

input LessorUpdateWithWhereUniqueWithoutLeaseInput {
  where: LessorWhereUniqueInput!
  data: LessorUpdateWithoutLeaseDataInput!
}

input LessorUpdateWithWhereUniqueWithoutUserInput {
  where: LessorWhereUniqueInput!
  data: LessorUpdateWithoutUserDataInput!
}

input LessorUpsertWithWhereUniqueWithoutLeaseInput {
  where: LessorWhereUniqueInput!
  update: LessorUpdateWithoutLeaseDataInput!
  create: LessorCreateWithoutLeaseInput!
}

input LessorUpsertWithWhereUniqueWithoutUserInput {
  where: LessorWhereUniqueInput!
  update: LessorUpdateWithoutUserDataInput!
  create: LessorCreateWithoutUserInput!
}

input LessorWhereInput {
  """Logical AND on all given filters."""
  AND: [LessorWhereInput!]

  """Logical OR on all given filters."""
  OR: [LessorWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [LessorWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  signed: Boolean

  """All values that are not equal to given value."""
  signed_not: Boolean
  signedAt: DateTime

  """All values that are not equal to given value."""
  signedAt_not: DateTime

  """All values that are contained in given list."""
  signedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  signedAt_not_in: [DateTime!]

  """All values less than the given value."""
  signedAt_lt: DateTime

  """All values less than or equal the given value."""
  signedAt_lte: DateTime

  """All values greater than the given value."""
  signedAt_gt: DateTime

  """All values greater than or equal the given value."""
  signedAt_gte: DateTime
  lease: PropertyLeaseWhereInput
  user: UserWhereInput
}

input LessorWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createProperty(data: PropertyCreateInput!): Property!
  createRentalGroupApplicant(data: RentalGroupApplicantCreateInput!): RentalGroupApplicant!
  createPropertyAdvertisement(data: PropertyAdvertisementCreateInput!): PropertyAdvertisement!
  createRentalApplication(data: RentalApplicationCreateInput!): RentalApplication!
  createLessee(data: LesseeCreateInput!): Lessee!
  createLessor(data: LessorCreateInput!): Lessor!
  createPropertyLease(data: PropertyLeaseCreateInput!): PropertyLease!
  createUser(data: UserCreateInput!): User!
  createFile(data: FileCreateInput!): File!
  createCreditCard(data: CreditCardCreateInput!): CreditCard!
  updateProperty(data: PropertyUpdateInput!, where: PropertyWhereUniqueInput!): Property
  updateRentalGroupApplicant(data: RentalGroupApplicantUpdateInput!, where: RentalGroupApplicantWhereUniqueInput!): RentalGroupApplicant
  updateRentalApplication(data: RentalApplicationUpdateInput!, where: RentalApplicationWhereUniqueInput!): RentalApplication
  updateLessee(data: LesseeUpdateInput!, where: LesseeWhereUniqueInput!): Lessee
  updateLessor(data: LessorUpdateInput!, where: LessorWhereUniqueInput!): Lessor
  updatePropertyLease(data: PropertyLeaseUpdateInput!, where: PropertyLeaseWhereUniqueInput!): PropertyLease
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateCreditCard(data: CreditCardUpdateInput!, where: CreditCardWhereUniqueInput!): CreditCard
  deleteProperty(where: PropertyWhereUniqueInput!): Property
  deleteRentalGroupApplicant(where: RentalGroupApplicantWhereUniqueInput!): RentalGroupApplicant
  deletePropertyAdvertisement(where: PropertyAdvertisementWhereUniqueInput!): PropertyAdvertisement
  deleteRentalApplication(where: RentalApplicationWhereUniqueInput!): RentalApplication
  deleteLessee(where: LesseeWhereUniqueInput!): Lessee
  deleteLessor(where: LessorWhereUniqueInput!): Lessor
  deletePropertyLease(where: PropertyLeaseWhereUniqueInput!): PropertyLease
  deleteUser(where: UserWhereUniqueInput!): User
  deleteFile(where: FileWhereUniqueInput!): File
  deleteCreditCard(where: CreditCardWhereUniqueInput!): CreditCard
  upsertProperty(where: PropertyWhereUniqueInput!, create: PropertyCreateInput!, update: PropertyUpdateInput!): Property!
  upsertRentalGroupApplicant(where: RentalGroupApplicantWhereUniqueInput!, create: RentalGroupApplicantCreateInput!, update: RentalGroupApplicantUpdateInput!): RentalGroupApplicant!
  upsertRentalApplication(where: RentalApplicationWhereUniqueInput!, create: RentalApplicationCreateInput!, update: RentalApplicationUpdateInput!): RentalApplication!
  upsertLessee(where: LesseeWhereUniqueInput!, create: LesseeCreateInput!, update: LesseeUpdateInput!): Lessee!
  upsertLessor(where: LessorWhereUniqueInput!, create: LessorCreateInput!, update: LessorUpdateInput!): Lessor!
  upsertPropertyLease(where: PropertyLeaseWhereUniqueInput!, create: PropertyLeaseCreateInput!, update: PropertyLeaseUpdateInput!): PropertyLease!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  upsertCreditCard(where: CreditCardWhereUniqueInput!, create: CreditCardCreateInput!, update: CreditCardUpdateInput!): CreditCard!
  updateManyProperties(data: PropertyUpdateManyMutationInput!, where: PropertyWhereInput): BatchPayload!
  updateManyRentalGroupApplicants(data: RentalGroupApplicantUpdateManyMutationInput!, where: RentalGroupApplicantWhereInput): BatchPayload!
  updateManyRentalApplications(data: RentalApplicationUpdateManyMutationInput!, where: RentalApplicationWhereInput): BatchPayload!
  updateManyLessees(data: LesseeUpdateManyMutationInput!, where: LesseeWhereInput): BatchPayload!
  updateManyLessors(data: LessorUpdateManyMutationInput!, where: LessorWhereInput): BatchPayload!
  updateManyPropertyLeases(data: PropertyLeaseUpdateManyMutationInput!, where: PropertyLeaseWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  updateManyCreditCards(data: CreditCardUpdateManyMutationInput!, where: CreditCardWhereInput): BatchPayload!
  deleteManyProperties(where: PropertyWhereInput): BatchPayload!
  deleteManyRentalGroupApplicants(where: RentalGroupApplicantWhereInput): BatchPayload!
  deleteManyPropertyAdvertisements(where: PropertyAdvertisementWhereInput): BatchPayload!
  deleteManyRentalApplications(where: RentalApplicationWhereInput): BatchPayload!
  deleteManyLessees(where: LesseeWhereInput): BatchPayload!
  deleteManyLessors(where: LessorWhereInput): BatchPayload!
  deleteManyPropertyLeases(where: PropertyLeaseWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  deleteManyCreditCards(where: CreditCardWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

enum OutdoorFeature {
  OUTDOOR_SPA
  OUTDOOR_ENTERTAINMENT
  SWIMMING_POOL
  PET_FRIENDLY
  FULLY_FENCED
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum Permission {
  ADMIN
  USER
  PERMISSIONUPDATE
}

type Property implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  type: PropertyType
  headline: String
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  indoorFeatures: [IndoorFeature!]!
  outdoorFeatures: [OutdoorFeature!]!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  owners(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  creator: User!
  images(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  rentalApplications(where: RentalApplicationWhereInput, orderBy: RentalApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalApplication!]
  leases(where: PropertyLeaseWhereInput, orderBy: PropertyLeaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PropertyLease!]
  isLeased: Boolean
  leaseExpiryDate: DateTime
}

type PropertyAdvertisement implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

"""A connection to a list of items."""
type PropertyAdvertisementConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PropertyAdvertisementEdge]!
  aggregate: AggregatePropertyAdvertisement!
}

input PropertyAdvertisementCreateInput {
  id: ID
}

"""An edge in a connection."""
type PropertyAdvertisementEdge {
  """The item at the end of the edge."""
  node: PropertyAdvertisement!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PropertyAdvertisementOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PropertyAdvertisementPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
}

type PropertyAdvertisementSubscriptionPayload {
  mutation: MutationType!
  node: PropertyAdvertisement
  updatedFields: [String!]
  previousValues: PropertyAdvertisementPreviousValues
}

input PropertyAdvertisementSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyAdvertisementSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyAdvertisementSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyAdvertisementSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PropertyAdvertisementWhereInput
}

input PropertyAdvertisementWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyAdvertisementWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyAdvertisementWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyAdvertisementWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
}

input PropertyAdvertisementWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type PropertyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PropertyEdge]!
  aggregate: AggregateProperty!
}

input PropertyCreateindoorFeaturesInput {
  set: [IndoorFeature!]
}

input PropertyCreateInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
}

input PropertyCreateManyWithoutCreatorInput {
  create: [PropertyCreateWithoutCreatorInput!]
  connect: [PropertyWhereUniqueInput!]
}

input PropertyCreateManyWithoutOwnersInput {
  create: [PropertyCreateWithoutOwnersInput!]
  connect: [PropertyWhereUniqueInput!]
}

input PropertyCreateOneWithoutLeasesInput {
  create: PropertyCreateWithoutLeasesInput
  connect: PropertyWhereUniqueInput
}

input PropertyCreateOneWithoutRentalApplicationsInput {
  create: PropertyCreateWithoutRentalApplicationsInput
  connect: PropertyWhereUniqueInput
}

input PropertyCreateoutdoorFeaturesInput {
  set: [OutdoorFeature!]
}

input PropertyCreateWithoutCreatorInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  owners: UserCreateManyWithoutPropertiesInput
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutLeasesInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutOwnersInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  rentalApplications: RentalApplicationCreateManyWithoutPropertyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
}

input PropertyCreateWithoutRentalApplicationsInput {
  id: ID
  type: PropertyType
  headline: String
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyCreateindoorFeaturesInput
  outdoorFeatures: PropertyCreateoutdoorFeaturesInput
  owners: UserCreateManyWithoutPropertiesInput
  creator: UserCreateOneWithoutCreatedPropertiesInput!
  images: FileCreateManyInput
  leases: PropertyLeaseCreateManyWithoutPropertyInput
}

"""An edge in a connection."""
type PropertyEdge {
  """The item at the end of the edge."""
  node: Property!

  """A cursor for use in pagination."""
  cursor: String!
}

type PropertyLease implements Node {
  id: ID!
  property: Property!
  updatedAt: DateTime!
  createdAt: DateTime!
  lessees(where: LesseeWhereInput, orderBy: LesseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessee!]
  lessors(where: LessorWhereInput, orderBy: LessorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessor!]
  finalised: Boolean!
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  indoorFeatures: [IndoorFeature!]!
  outdoorFeatures: [OutdoorFeature!]!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
}

"""A connection to a list of items."""
type PropertyLeaseConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PropertyLeaseEdge]!
  aggregate: AggregatePropertyLease!
}

input PropertyLeaseCreateindoorFeaturesInput {
  set: [IndoorFeature!]
}

input PropertyLeaseCreateInput {
  id: ID
  finalised: Boolean!
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  property: PropertyCreateOneWithoutLeasesInput!
  lessees: LesseeCreateManyWithoutLeaseInput
  lessors: LessorCreateManyWithoutLeaseInput
}

input PropertyLeaseCreateManyWithoutPropertyInput {
  create: [PropertyLeaseCreateWithoutPropertyInput!]
  connect: [PropertyLeaseWhereUniqueInput!]
}

input PropertyLeaseCreateOneWithoutLesseesInput {
  create: PropertyLeaseCreateWithoutLesseesInput
  connect: PropertyLeaseWhereUniqueInput
}

input PropertyLeaseCreateOneWithoutLessorsInput {
  create: PropertyLeaseCreateWithoutLessorsInput
  connect: PropertyLeaseWhereUniqueInput
}

input PropertyLeaseCreateoutdoorFeaturesInput {
  set: [OutdoorFeature!]
}

input PropertyLeaseCreateWithoutLesseesInput {
  id: ID
  finalised: Boolean!
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  property: PropertyCreateOneWithoutLeasesInput!
  lessors: LessorCreateManyWithoutLeaseInput
}

input PropertyLeaseCreateWithoutLessorsInput {
  id: ID
  finalised: Boolean!
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  property: PropertyCreateOneWithoutLeasesInput!
  lessees: LesseeCreateManyWithoutLeaseInput
}

input PropertyLeaseCreateWithoutPropertyInput {
  id: ID
  finalised: Boolean!
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
  indoorFeatures: PropertyLeaseCreateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseCreateoutdoorFeaturesInput
  lessees: LesseeCreateManyWithoutLeaseInput
  lessors: LessorCreateManyWithoutLeaseInput
}

"""An edge in a connection."""
type PropertyLeaseEdge {
  """The item at the end of the edge."""
  node: PropertyLease!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PropertyLeaseOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  finalised_ASC
  finalised_DESC
  rooms_ASC
  rooms_DESC
  bathrooms_ASC
  bathrooms_DESC
  garageSpaces_ASC
  garageSpaces_DESC
  carportSpaces_ASC
  carportSpaces_DESC
  offStreetSpaces_ASC
  offStreetSpaces_DESC
  rent_ASC
  rent_DESC
  moveInDate_ASC
  moveInDate_DESC
  expiryDate_ASC
  expiryDate_DESC
  location_ASC
  location_DESC
  locationLat_ASC
  locationLat_DESC
  locationLng_ASC
  locationLng_DESC
}

type PropertyLeasePreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  finalised: Boolean!
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  indoorFeatures: [IndoorFeature!]!
  outdoorFeatures: [OutdoorFeature!]!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  location: String!
  locationLat: Float!
  locationLng: Float!
}

input PropertyLeaseScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyLeaseScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyLeaseScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyLeaseScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  finalised: Boolean

  """All values that are not equal to given value."""
  finalised_not: Boolean
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  carportSpaces: Int

  """All values that are not equal to given value."""
  carportSpaces_not: Int

  """All values that are contained in given list."""
  carportSpaces_in: [Int!]

  """All values that are not contained in given list."""
  carportSpaces_not_in: [Int!]

  """All values less than the given value."""
  carportSpaces_lt: Int

  """All values less than or equal the given value."""
  carportSpaces_lte: Int

  """All values greater than the given value."""
  carportSpaces_gt: Int

  """All values greater than or equal the given value."""
  carportSpaces_gte: Int
  offStreetSpaces: Int

  """All values that are not equal to given value."""
  offStreetSpaces_not: Int

  """All values that are contained in given list."""
  offStreetSpaces_in: [Int!]

  """All values that are not contained in given list."""
  offStreetSpaces_not_in: [Int!]

  """All values less than the given value."""
  offStreetSpaces_lt: Int

  """All values less than or equal the given value."""
  offStreetSpaces_lte: Int

  """All values greater than the given value."""
  offStreetSpaces_gt: Int

  """All values greater than or equal the given value."""
  offStreetSpaces_gte: Int
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  moveInDate: DateTime

  """All values that are not equal to given value."""
  moveInDate_not: DateTime

  """All values that are contained in given list."""
  moveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  moveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  moveInDate_lt: DateTime

  """All values less than or equal the given value."""
  moveInDate_lte: DateTime

  """All values greater than the given value."""
  moveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  moveInDate_gte: DateTime
  expiryDate: DateTime

  """All values that are not equal to given value."""
  expiryDate_not: DateTime

  """All values that are contained in given list."""
  expiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  expiryDate_lt: DateTime

  """All values less than or equal the given value."""
  expiryDate_lte: DateTime

  """All values greater than the given value."""
  expiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  expiryDate_gte: DateTime
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
}

type PropertyLeaseSubscriptionPayload {
  mutation: MutationType!
  node: PropertyLease
  updatedFields: [String!]
  previousValues: PropertyLeasePreviousValues
}

input PropertyLeaseSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyLeaseSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyLeaseSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyLeaseSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PropertyLeaseWhereInput
}

input PropertyLeaseUpdateindoorFeaturesInput {
  set: [IndoorFeature!]
}

input PropertyLeaseUpdateInput {
  finalised: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  property: PropertyUpdateOneRequiredWithoutLeasesInput
  lessees: LesseeUpdateManyWithoutLeaseInput
  lessors: LessorUpdateManyWithoutLeaseInput
}

input PropertyLeaseUpdateManyDataInput {
  finalised: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
}

input PropertyLeaseUpdateManyMutationInput {
  finalised: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
}

input PropertyLeaseUpdateManyWithoutPropertyInput {
  create: [PropertyLeaseCreateWithoutPropertyInput!]
  connect: [PropertyLeaseWhereUniqueInput!]
  set: [PropertyLeaseWhereUniqueInput!]
  disconnect: [PropertyLeaseWhereUniqueInput!]
  delete: [PropertyLeaseWhereUniqueInput!]
  update: [PropertyLeaseUpdateWithWhereUniqueWithoutPropertyInput!]
  updateMany: [PropertyLeaseUpdateManyWithWhereNestedInput!]
  deleteMany: [PropertyLeaseScalarWhereInput!]
  upsert: [PropertyLeaseUpsertWithWhereUniqueWithoutPropertyInput!]
}

input PropertyLeaseUpdateManyWithWhereNestedInput {
  where: PropertyLeaseScalarWhereInput!
  data: PropertyLeaseUpdateManyDataInput!
}

input PropertyLeaseUpdateOneWithoutLesseesInput {
  create: PropertyLeaseCreateWithoutLesseesInput
  connect: PropertyLeaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertyLeaseUpdateWithoutLesseesDataInput
  upsert: PropertyLeaseUpsertWithoutLesseesInput
}

input PropertyLeaseUpdateOneWithoutLessorsInput {
  create: PropertyLeaseCreateWithoutLessorsInput
  connect: PropertyLeaseWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PropertyLeaseUpdateWithoutLessorsDataInput
  upsert: PropertyLeaseUpsertWithoutLessorsInput
}

input PropertyLeaseUpdateoutdoorFeaturesInput {
  set: [OutdoorFeature!]
}

input PropertyLeaseUpdateWithoutLesseesDataInput {
  finalised: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  property: PropertyUpdateOneRequiredWithoutLeasesInput
  lessors: LessorUpdateManyWithoutLeaseInput
}

input PropertyLeaseUpdateWithoutLessorsDataInput {
  finalised: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  property: PropertyUpdateOneRequiredWithoutLeasesInput
  lessees: LesseeUpdateManyWithoutLeaseInput
}

input PropertyLeaseUpdateWithoutPropertyDataInput {
  finalised: Boolean
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  location: String
  locationLat: Float
  locationLng: Float
  indoorFeatures: PropertyLeaseUpdateindoorFeaturesInput
  outdoorFeatures: PropertyLeaseUpdateoutdoorFeaturesInput
  lessees: LesseeUpdateManyWithoutLeaseInput
  lessors: LessorUpdateManyWithoutLeaseInput
}

input PropertyLeaseUpdateWithWhereUniqueWithoutPropertyInput {
  where: PropertyLeaseWhereUniqueInput!
  data: PropertyLeaseUpdateWithoutPropertyDataInput!
}

input PropertyLeaseUpsertWithoutLesseesInput {
  update: PropertyLeaseUpdateWithoutLesseesDataInput!
  create: PropertyLeaseCreateWithoutLesseesInput!
}

input PropertyLeaseUpsertWithoutLessorsInput {
  update: PropertyLeaseUpdateWithoutLessorsDataInput!
  create: PropertyLeaseCreateWithoutLessorsInput!
}

input PropertyLeaseUpsertWithWhereUniqueWithoutPropertyInput {
  where: PropertyLeaseWhereUniqueInput!
  update: PropertyLeaseUpdateWithoutPropertyDataInput!
  create: PropertyLeaseCreateWithoutPropertyInput!
}

input PropertyLeaseWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyLeaseWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyLeaseWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyLeaseWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  finalised: Boolean

  """All values that are not equal to given value."""
  finalised_not: Boolean
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  carportSpaces: Int

  """All values that are not equal to given value."""
  carportSpaces_not: Int

  """All values that are contained in given list."""
  carportSpaces_in: [Int!]

  """All values that are not contained in given list."""
  carportSpaces_not_in: [Int!]

  """All values less than the given value."""
  carportSpaces_lt: Int

  """All values less than or equal the given value."""
  carportSpaces_lte: Int

  """All values greater than the given value."""
  carportSpaces_gt: Int

  """All values greater than or equal the given value."""
  carportSpaces_gte: Int
  offStreetSpaces: Int

  """All values that are not equal to given value."""
  offStreetSpaces_not: Int

  """All values that are contained in given list."""
  offStreetSpaces_in: [Int!]

  """All values that are not contained in given list."""
  offStreetSpaces_not_in: [Int!]

  """All values less than the given value."""
  offStreetSpaces_lt: Int

  """All values less than or equal the given value."""
  offStreetSpaces_lte: Int

  """All values greater than the given value."""
  offStreetSpaces_gt: Int

  """All values greater than or equal the given value."""
  offStreetSpaces_gte: Int
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  moveInDate: DateTime

  """All values that are not equal to given value."""
  moveInDate_not: DateTime

  """All values that are contained in given list."""
  moveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  moveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  moveInDate_lt: DateTime

  """All values less than or equal the given value."""
  moveInDate_lte: DateTime

  """All values greater than the given value."""
  moveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  moveInDate_gte: DateTime
  expiryDate: DateTime

  """All values that are not equal to given value."""
  expiryDate_not: DateTime

  """All values that are contained in given list."""
  expiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  expiryDate_lt: DateTime

  """All values less than or equal the given value."""
  expiryDate_lte: DateTime

  """All values greater than the given value."""
  expiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  expiryDate_gte: DateTime
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  property: PropertyWhereInput
  lessees_every: LesseeWhereInput
  lessees_some: LesseeWhereInput
  lessees_none: LesseeWhereInput
  lessors_every: LessorWhereInput
  lessors_some: LessorWhereInput
  lessors_none: LessorWhereInput
}

input PropertyLeaseWhereUniqueInput {
  id: ID
}

enum PropertyOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  headline_ASC
  headline_DESC
  rooms_ASC
  rooms_DESC
  bathrooms_ASC
  bathrooms_DESC
  garageSpaces_ASC
  garageSpaces_DESC
  carportSpaces_ASC
  carportSpaces_DESC
  offStreetSpaces_ASC
  offStreetSpaces_DESC
  rent_ASC
  rent_DESC
  moveInDate_ASC
  moveInDate_DESC
  expiryDate_ASC
  expiryDate_DESC
  onTheMarket_ASC
  onTheMarket_DESC
  location_ASC
  location_DESC
  locationLat_ASC
  locationLat_DESC
  locationLng_ASC
  locationLng_DESC
  isLeased_ASC
  isLeased_DESC
  leaseExpiryDate_ASC
  leaseExpiryDate_DESC
}

type PropertyPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  type: PropertyType
  headline: String
  rooms: Int!
  bathrooms: Int
  garageSpaces: Int!
  carportSpaces: Int!
  offStreetSpaces: Int!
  indoorFeatures: [IndoorFeature!]!
  outdoorFeatures: [OutdoorFeature!]!
  rent: Float!
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean!
  location: String!
  locationLat: Float!
  locationLng: Float!
  isLeased: Boolean
  leaseExpiryDate: DateTime
}

input PropertyScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: PropertyType

  """All values that are not equal to given value."""
  type_not: PropertyType

  """All values that are contained in given list."""
  type_in: [PropertyType!]

  """All values that are not contained in given list."""
  type_not_in: [PropertyType!]
  headline: String

  """All values that are not equal to given value."""
  headline_not: String

  """All values that are contained in given list."""
  headline_in: [String!]

  """All values that are not contained in given list."""
  headline_not_in: [String!]

  """All values less than the given value."""
  headline_lt: String

  """All values less than or equal the given value."""
  headline_lte: String

  """All values greater than the given value."""
  headline_gt: String

  """All values greater than or equal the given value."""
  headline_gte: String

  """All values containing the given string."""
  headline_contains: String

  """All values not containing the given string."""
  headline_not_contains: String

  """All values starting with the given string."""
  headline_starts_with: String

  """All values not starting with the given string."""
  headline_not_starts_with: String

  """All values ending with the given string."""
  headline_ends_with: String

  """All values not ending with the given string."""
  headline_not_ends_with: String
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  carportSpaces: Int

  """All values that are not equal to given value."""
  carportSpaces_not: Int

  """All values that are contained in given list."""
  carportSpaces_in: [Int!]

  """All values that are not contained in given list."""
  carportSpaces_not_in: [Int!]

  """All values less than the given value."""
  carportSpaces_lt: Int

  """All values less than or equal the given value."""
  carportSpaces_lte: Int

  """All values greater than the given value."""
  carportSpaces_gt: Int

  """All values greater than or equal the given value."""
  carportSpaces_gte: Int
  offStreetSpaces: Int

  """All values that are not equal to given value."""
  offStreetSpaces_not: Int

  """All values that are contained in given list."""
  offStreetSpaces_in: [Int!]

  """All values that are not contained in given list."""
  offStreetSpaces_not_in: [Int!]

  """All values less than the given value."""
  offStreetSpaces_lt: Int

  """All values less than or equal the given value."""
  offStreetSpaces_lte: Int

  """All values greater than the given value."""
  offStreetSpaces_gt: Int

  """All values greater than or equal the given value."""
  offStreetSpaces_gte: Int
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  moveInDate: DateTime

  """All values that are not equal to given value."""
  moveInDate_not: DateTime

  """All values that are contained in given list."""
  moveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  moveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  moveInDate_lt: DateTime

  """All values less than or equal the given value."""
  moveInDate_lte: DateTime

  """All values greater than the given value."""
  moveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  moveInDate_gte: DateTime
  expiryDate: DateTime

  """All values that are not equal to given value."""
  expiryDate_not: DateTime

  """All values that are contained in given list."""
  expiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  expiryDate_lt: DateTime

  """All values less than or equal the given value."""
  expiryDate_lte: DateTime

  """All values greater than the given value."""
  expiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  expiryDate_gte: DateTime
  onTheMarket: Boolean

  """All values that are not equal to given value."""
  onTheMarket_not: Boolean
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  isLeased: Boolean

  """All values that are not equal to given value."""
  isLeased_not: Boolean
  leaseExpiryDate: DateTime

  """All values that are not equal to given value."""
  leaseExpiryDate_not: DateTime

  """All values that are contained in given list."""
  leaseExpiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  leaseExpiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  leaseExpiryDate_lt: DateTime

  """All values less than or equal the given value."""
  leaseExpiryDate_lte: DateTime

  """All values greater than the given value."""
  leaseExpiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  leaseExpiryDate_gte: DateTime
}

type PropertySubscriptionPayload {
  mutation: MutationType!
  node: Property
  updatedFields: [String!]
  previousValues: PropertyPreviousValues
}

input PropertySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertySubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PropertyWhereInput
}

enum PropertyType {
  HOUSE
  APARTMENT
  UNIT
  TOWNHOUSE
  VILLA
  RETIREMENT_LIVING
  STUDIO
  FARM_LAND
  ACREAGE_SEMI_RURAL
  OTHER
}

input PropertyUpdateindoorFeaturesInput {
  set: [IndoorFeature!]
}

input PropertyUpdateInput {
  type: PropertyType
  headline: String
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
}

input PropertyUpdateManyDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
}

input PropertyUpdateManyMutationInput {
  type: PropertyType
  headline: String
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
}

input PropertyUpdateManyWithoutCreatorInput {
  create: [PropertyCreateWithoutCreatorInput!]
  connect: [PropertyWhereUniqueInput!]
  set: [PropertyWhereUniqueInput!]
  disconnect: [PropertyWhereUniqueInput!]
  delete: [PropertyWhereUniqueInput!]
  update: [PropertyUpdateWithWhereUniqueWithoutCreatorInput!]
  updateMany: [PropertyUpdateManyWithWhereNestedInput!]
  deleteMany: [PropertyScalarWhereInput!]
  upsert: [PropertyUpsertWithWhereUniqueWithoutCreatorInput!]
}

input PropertyUpdateManyWithoutOwnersInput {
  create: [PropertyCreateWithoutOwnersInput!]
  connect: [PropertyWhereUniqueInput!]
  set: [PropertyWhereUniqueInput!]
  disconnect: [PropertyWhereUniqueInput!]
  delete: [PropertyWhereUniqueInput!]
  update: [PropertyUpdateWithWhereUniqueWithoutOwnersInput!]
  updateMany: [PropertyUpdateManyWithWhereNestedInput!]
  deleteMany: [PropertyScalarWhereInput!]
  upsert: [PropertyUpsertWithWhereUniqueWithoutOwnersInput!]
}

input PropertyUpdateManyWithWhereNestedInput {
  where: PropertyScalarWhereInput!
  data: PropertyUpdateManyDataInput!
}

input PropertyUpdateOneRequiredWithoutLeasesInput {
  create: PropertyCreateWithoutLeasesInput
  connect: PropertyWhereUniqueInput
  update: PropertyUpdateWithoutLeasesDataInput
  upsert: PropertyUpsertWithoutLeasesInput
}

input PropertyUpdateOneRequiredWithoutRentalApplicationsInput {
  create: PropertyCreateWithoutRentalApplicationsInput
  connect: PropertyWhereUniqueInput
  update: PropertyUpdateWithoutRentalApplicationsDataInput
  upsert: PropertyUpsertWithoutRentalApplicationsInput
}

input PropertyUpdateoutdoorFeaturesInput {
  set: [OutdoorFeature!]
}

input PropertyUpdateWithoutCreatorDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  owners: UserUpdateManyWithoutPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutLeasesDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutOwnersDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  rentalApplications: RentalApplicationUpdateManyWithoutPropertyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithoutRentalApplicationsDataInput {
  type: PropertyType
  headline: String
  rooms: Int
  bathrooms: Int
  garageSpaces: Int
  carportSpaces: Int
  offStreetSpaces: Int
  rent: Float
  moveInDate: DateTime
  expiryDate: DateTime
  onTheMarket: Boolean
  location: String
  locationLat: Float
  locationLng: Float
  isLeased: Boolean
  leaseExpiryDate: DateTime
  indoorFeatures: PropertyUpdateindoorFeaturesInput
  outdoorFeatures: PropertyUpdateoutdoorFeaturesInput
  owners: UserUpdateManyWithoutPropertiesInput
  creator: UserUpdateOneRequiredWithoutCreatedPropertiesInput
  images: FileUpdateManyInput
  leases: PropertyLeaseUpdateManyWithoutPropertyInput
}

input PropertyUpdateWithWhereUniqueWithoutCreatorInput {
  where: PropertyWhereUniqueInput!
  data: PropertyUpdateWithoutCreatorDataInput!
}

input PropertyUpdateWithWhereUniqueWithoutOwnersInput {
  where: PropertyWhereUniqueInput!
  data: PropertyUpdateWithoutOwnersDataInput!
}

input PropertyUpsertWithoutLeasesInput {
  update: PropertyUpdateWithoutLeasesDataInput!
  create: PropertyCreateWithoutLeasesInput!
}

input PropertyUpsertWithoutRentalApplicationsInput {
  update: PropertyUpdateWithoutRentalApplicationsDataInput!
  create: PropertyCreateWithoutRentalApplicationsInput!
}

input PropertyUpsertWithWhereUniqueWithoutCreatorInput {
  where: PropertyWhereUniqueInput!
  update: PropertyUpdateWithoutCreatorDataInput!
  create: PropertyCreateWithoutCreatorInput!
}

input PropertyUpsertWithWhereUniqueWithoutOwnersInput {
  where: PropertyWhereUniqueInput!
  update: PropertyUpdateWithoutOwnersDataInput!
  create: PropertyCreateWithoutOwnersInput!
}

input PropertyWhereInput {
  """Logical AND on all given filters."""
  AND: [PropertyWhereInput!]

  """Logical OR on all given filters."""
  OR: [PropertyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PropertyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  type: PropertyType

  """All values that are not equal to given value."""
  type_not: PropertyType

  """All values that are contained in given list."""
  type_in: [PropertyType!]

  """All values that are not contained in given list."""
  type_not_in: [PropertyType!]
  headline: String

  """All values that are not equal to given value."""
  headline_not: String

  """All values that are contained in given list."""
  headline_in: [String!]

  """All values that are not contained in given list."""
  headline_not_in: [String!]

  """All values less than the given value."""
  headline_lt: String

  """All values less than or equal the given value."""
  headline_lte: String

  """All values greater than the given value."""
  headline_gt: String

  """All values greater than or equal the given value."""
  headline_gte: String

  """All values containing the given string."""
  headline_contains: String

  """All values not containing the given string."""
  headline_not_contains: String

  """All values starting with the given string."""
  headline_starts_with: String

  """All values not starting with the given string."""
  headline_not_starts_with: String

  """All values ending with the given string."""
  headline_ends_with: String

  """All values not ending with the given string."""
  headline_not_ends_with: String
  rooms: Int

  """All values that are not equal to given value."""
  rooms_not: Int

  """All values that are contained in given list."""
  rooms_in: [Int!]

  """All values that are not contained in given list."""
  rooms_not_in: [Int!]

  """All values less than the given value."""
  rooms_lt: Int

  """All values less than or equal the given value."""
  rooms_lte: Int

  """All values greater than the given value."""
  rooms_gt: Int

  """All values greater than or equal the given value."""
  rooms_gte: Int
  bathrooms: Int

  """All values that are not equal to given value."""
  bathrooms_not: Int

  """All values that are contained in given list."""
  bathrooms_in: [Int!]

  """All values that are not contained in given list."""
  bathrooms_not_in: [Int!]

  """All values less than the given value."""
  bathrooms_lt: Int

  """All values less than or equal the given value."""
  bathrooms_lte: Int

  """All values greater than the given value."""
  bathrooms_gt: Int

  """All values greater than or equal the given value."""
  bathrooms_gte: Int
  garageSpaces: Int

  """All values that are not equal to given value."""
  garageSpaces_not: Int

  """All values that are contained in given list."""
  garageSpaces_in: [Int!]

  """All values that are not contained in given list."""
  garageSpaces_not_in: [Int!]

  """All values less than the given value."""
  garageSpaces_lt: Int

  """All values less than or equal the given value."""
  garageSpaces_lte: Int

  """All values greater than the given value."""
  garageSpaces_gt: Int

  """All values greater than or equal the given value."""
  garageSpaces_gte: Int
  carportSpaces: Int

  """All values that are not equal to given value."""
  carportSpaces_not: Int

  """All values that are contained in given list."""
  carportSpaces_in: [Int!]

  """All values that are not contained in given list."""
  carportSpaces_not_in: [Int!]

  """All values less than the given value."""
  carportSpaces_lt: Int

  """All values less than or equal the given value."""
  carportSpaces_lte: Int

  """All values greater than the given value."""
  carportSpaces_gt: Int

  """All values greater than or equal the given value."""
  carportSpaces_gte: Int
  offStreetSpaces: Int

  """All values that are not equal to given value."""
  offStreetSpaces_not: Int

  """All values that are contained in given list."""
  offStreetSpaces_in: [Int!]

  """All values that are not contained in given list."""
  offStreetSpaces_not_in: [Int!]

  """All values less than the given value."""
  offStreetSpaces_lt: Int

  """All values less than or equal the given value."""
  offStreetSpaces_lte: Int

  """All values greater than the given value."""
  offStreetSpaces_gt: Int

  """All values greater than or equal the given value."""
  offStreetSpaces_gte: Int
  rent: Float

  """All values that are not equal to given value."""
  rent_not: Float

  """All values that are contained in given list."""
  rent_in: [Float!]

  """All values that are not contained in given list."""
  rent_not_in: [Float!]

  """All values less than the given value."""
  rent_lt: Float

  """All values less than or equal the given value."""
  rent_lte: Float

  """All values greater than the given value."""
  rent_gt: Float

  """All values greater than or equal the given value."""
  rent_gte: Float
  moveInDate: DateTime

  """All values that are not equal to given value."""
  moveInDate_not: DateTime

  """All values that are contained in given list."""
  moveInDate_in: [DateTime!]

  """All values that are not contained in given list."""
  moveInDate_not_in: [DateTime!]

  """All values less than the given value."""
  moveInDate_lt: DateTime

  """All values less than or equal the given value."""
  moveInDate_lte: DateTime

  """All values greater than the given value."""
  moveInDate_gt: DateTime

  """All values greater than or equal the given value."""
  moveInDate_gte: DateTime
  expiryDate: DateTime

  """All values that are not equal to given value."""
  expiryDate_not: DateTime

  """All values that are contained in given list."""
  expiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  expiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  expiryDate_lt: DateTime

  """All values less than or equal the given value."""
  expiryDate_lte: DateTime

  """All values greater than the given value."""
  expiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  expiryDate_gte: DateTime
  onTheMarket: Boolean

  """All values that are not equal to given value."""
  onTheMarket_not: Boolean
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  locationLat: Float

  """All values that are not equal to given value."""
  locationLat_not: Float

  """All values that are contained in given list."""
  locationLat_in: [Float!]

  """All values that are not contained in given list."""
  locationLat_not_in: [Float!]

  """All values less than the given value."""
  locationLat_lt: Float

  """All values less than or equal the given value."""
  locationLat_lte: Float

  """All values greater than the given value."""
  locationLat_gt: Float

  """All values greater than or equal the given value."""
  locationLat_gte: Float
  locationLng: Float

  """All values that are not equal to given value."""
  locationLng_not: Float

  """All values that are contained in given list."""
  locationLng_in: [Float!]

  """All values that are not contained in given list."""
  locationLng_not_in: [Float!]

  """All values less than the given value."""
  locationLng_lt: Float

  """All values less than or equal the given value."""
  locationLng_lte: Float

  """All values greater than the given value."""
  locationLng_gt: Float

  """All values greater than or equal the given value."""
  locationLng_gte: Float
  isLeased: Boolean

  """All values that are not equal to given value."""
  isLeased_not: Boolean
  leaseExpiryDate: DateTime

  """All values that are not equal to given value."""
  leaseExpiryDate_not: DateTime

  """All values that are contained in given list."""
  leaseExpiryDate_in: [DateTime!]

  """All values that are not contained in given list."""
  leaseExpiryDate_not_in: [DateTime!]

  """All values less than the given value."""
  leaseExpiryDate_lt: DateTime

  """All values less than or equal the given value."""
  leaseExpiryDate_lte: DateTime

  """All values greater than the given value."""
  leaseExpiryDate_gt: DateTime

  """All values greater than or equal the given value."""
  leaseExpiryDate_gte: DateTime
  owners_every: UserWhereInput
  owners_some: UserWhereInput
  owners_none: UserWhereInput
  creator: UserWhereInput
  images_every: FileWhereInput
  images_some: FileWhereInput
  images_none: FileWhereInput
  rentalApplications_every: RentalApplicationWhereInput
  rentalApplications_some: RentalApplicationWhereInput
  rentalApplications_none: RentalApplicationWhereInput
  leases_every: PropertyLeaseWhereInput
  leases_some: PropertyLeaseWhereInput
  leases_none: PropertyLeaseWhereInput
}

input PropertyWhereUniqueInput {
  id: ID
}

type Query {
  properties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property]!
  rentalGroupApplicants(where: RentalGroupApplicantWhereInput, orderBy: RentalGroupApplicantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalGroupApplicant]!
  propertyAdvertisements(where: PropertyAdvertisementWhereInput, orderBy: PropertyAdvertisementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PropertyAdvertisement]!
  rentalApplications(where: RentalApplicationWhereInput, orderBy: RentalApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalApplication]!
  lessees(where: LesseeWhereInput, orderBy: LesseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessee]!
  lessors(where: LessorWhereInput, orderBy: LessorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessor]!
  propertyLeases(where: PropertyLeaseWhereInput, orderBy: PropertyLeaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PropertyLease]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  creditCards(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CreditCard]!
  property(where: PropertyWhereUniqueInput!): Property
  rentalGroupApplicant(where: RentalGroupApplicantWhereUniqueInput!): RentalGroupApplicant
  propertyAdvertisement(where: PropertyAdvertisementWhereUniqueInput!): PropertyAdvertisement
  rentalApplication(where: RentalApplicationWhereUniqueInput!): RentalApplication
  lessee(where: LesseeWhereUniqueInput!): Lessee
  lessor(where: LessorWhereUniqueInput!): Lessor
  propertyLease(where: PropertyLeaseWhereUniqueInput!): PropertyLease
  user(where: UserWhereUniqueInput!): User
  file(where: FileWhereUniqueInput!): File
  creditCard(where: CreditCardWhereUniqueInput!): CreditCard
  propertiesConnection(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertyConnection!
  rentalGroupApplicantsConnection(where: RentalGroupApplicantWhereInput, orderBy: RentalGroupApplicantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RentalGroupApplicantConnection!
  propertyAdvertisementsConnection(where: PropertyAdvertisementWhereInput, orderBy: PropertyAdvertisementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertyAdvertisementConnection!
  rentalApplicationsConnection(where: RentalApplicationWhereInput, orderBy: RentalApplicationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RentalApplicationConnection!
  lesseesConnection(where: LesseeWhereInput, orderBy: LesseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LesseeConnection!
  lessorsConnection(where: LessorWhereInput, orderBy: LessorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LessorConnection!
  propertyLeasesConnection(where: PropertyLeaseWhereInput, orderBy: PropertyLeaseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PropertyLeaseConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  creditCardsConnection(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CreditCardConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RentalApplication implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  owner: User!
  title: String
  stage: ApplicationStage!
  visibility: VisibilityLevel
  finalised: Boolean
  property: Property!
  applicants(where: RentalGroupApplicantWhereInput, orderBy: RentalGroupApplicantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RentalGroupApplicant!]
}

"""A connection to a list of items."""
type RentalApplicationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RentalApplicationEdge]!
  aggregate: AggregateRentalApplication!
}

input RentalApplicationCreateInput {
  id: ID
  title: String
  stage: ApplicationStage!
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserCreateOneInput!
  property: PropertyCreateOneWithoutRentalApplicationsInput!
  applicants: RentalGroupApplicantCreateManyWithoutApplicationInput
}

input RentalApplicationCreateManyWithoutPropertyInput {
  create: [RentalApplicationCreateWithoutPropertyInput!]
  connect: [RentalApplicationWhereUniqueInput!]
}

input RentalApplicationCreateOneWithoutApplicantsInput {
  create: RentalApplicationCreateWithoutApplicantsInput
  connect: RentalApplicationWhereUniqueInput
}

input RentalApplicationCreateWithoutApplicantsInput {
  id: ID
  title: String
  stage: ApplicationStage!
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserCreateOneInput!
  property: PropertyCreateOneWithoutRentalApplicationsInput!
}

input RentalApplicationCreateWithoutPropertyInput {
  id: ID
  title: String
  stage: ApplicationStage!
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserCreateOneInput!
  applicants: RentalGroupApplicantCreateManyWithoutApplicationInput
}

"""An edge in a connection."""
type RentalApplicationEdge {
  """The item at the end of the edge."""
  node: RentalApplication!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RentalApplicationOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  stage_ASC
  stage_DESC
  visibility_ASC
  visibility_DESC
  finalised_ASC
  finalised_DESC
}

type RentalApplicationPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  title: String
  stage: ApplicationStage!
  visibility: VisibilityLevel
  finalised: Boolean
}

input RentalApplicationScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalApplicationScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalApplicationScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalApplicationScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  stage: ApplicationStage

  """All values that are not equal to given value."""
  stage_not: ApplicationStage

  """All values that are contained in given list."""
  stage_in: [ApplicationStage!]

  """All values that are not contained in given list."""
  stage_not_in: [ApplicationStage!]
  visibility: VisibilityLevel

  """All values that are not equal to given value."""
  visibility_not: VisibilityLevel

  """All values that are contained in given list."""
  visibility_in: [VisibilityLevel!]

  """All values that are not contained in given list."""
  visibility_not_in: [VisibilityLevel!]
  finalised: Boolean

  """All values that are not equal to given value."""
  finalised_not: Boolean
}

type RentalApplicationSubscriptionPayload {
  mutation: MutationType!
  node: RentalApplication
  updatedFields: [String!]
  previousValues: RentalApplicationPreviousValues
}

input RentalApplicationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalApplicationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalApplicationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalApplicationSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RentalApplicationWhereInput
}

input RentalApplicationUpdateInput {
  title: String
  stage: ApplicationStage
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserUpdateOneRequiredInput
  property: PropertyUpdateOneRequiredWithoutRentalApplicationsInput
  applicants: RentalGroupApplicantUpdateManyWithoutApplicationInput
}

input RentalApplicationUpdateManyDataInput {
  title: String
  stage: ApplicationStage
  visibility: VisibilityLevel
  finalised: Boolean
}

input RentalApplicationUpdateManyMutationInput {
  title: String
  stage: ApplicationStage
  visibility: VisibilityLevel
  finalised: Boolean
}

input RentalApplicationUpdateManyWithoutPropertyInput {
  create: [RentalApplicationCreateWithoutPropertyInput!]
  connect: [RentalApplicationWhereUniqueInput!]
  set: [RentalApplicationWhereUniqueInput!]
  disconnect: [RentalApplicationWhereUniqueInput!]
  delete: [RentalApplicationWhereUniqueInput!]
  update: [RentalApplicationUpdateWithWhereUniqueWithoutPropertyInput!]
  updateMany: [RentalApplicationUpdateManyWithWhereNestedInput!]
  deleteMany: [RentalApplicationScalarWhereInput!]
  upsert: [RentalApplicationUpsertWithWhereUniqueWithoutPropertyInput!]
}

input RentalApplicationUpdateManyWithWhereNestedInput {
  where: RentalApplicationScalarWhereInput!
  data: RentalApplicationUpdateManyDataInput!
}

input RentalApplicationUpdateOneWithoutApplicantsInput {
  create: RentalApplicationCreateWithoutApplicantsInput
  connect: RentalApplicationWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RentalApplicationUpdateWithoutApplicantsDataInput
  upsert: RentalApplicationUpsertWithoutApplicantsInput
}

input RentalApplicationUpdateWithoutApplicantsDataInput {
  title: String
  stage: ApplicationStage
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserUpdateOneRequiredInput
  property: PropertyUpdateOneRequiredWithoutRentalApplicationsInput
}

input RentalApplicationUpdateWithoutPropertyDataInput {
  title: String
  stage: ApplicationStage
  visibility: VisibilityLevel
  finalised: Boolean
  owner: UserUpdateOneRequiredInput
  applicants: RentalGroupApplicantUpdateManyWithoutApplicationInput
}

input RentalApplicationUpdateWithWhereUniqueWithoutPropertyInput {
  where: RentalApplicationWhereUniqueInput!
  data: RentalApplicationUpdateWithoutPropertyDataInput!
}

input RentalApplicationUpsertWithoutApplicantsInput {
  update: RentalApplicationUpdateWithoutApplicantsDataInput!
  create: RentalApplicationCreateWithoutApplicantsInput!
}

input RentalApplicationUpsertWithWhereUniqueWithoutPropertyInput {
  where: RentalApplicationWhereUniqueInput!
  update: RentalApplicationUpdateWithoutPropertyDataInput!
  create: RentalApplicationCreateWithoutPropertyInput!
}

input RentalApplicationWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalApplicationWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalApplicationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalApplicationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  stage: ApplicationStage

  """All values that are not equal to given value."""
  stage_not: ApplicationStage

  """All values that are contained in given list."""
  stage_in: [ApplicationStage!]

  """All values that are not contained in given list."""
  stage_not_in: [ApplicationStage!]
  visibility: VisibilityLevel

  """All values that are not equal to given value."""
  visibility_not: VisibilityLevel

  """All values that are contained in given list."""
  visibility_in: [VisibilityLevel!]

  """All values that are not contained in given list."""
  visibility_not_in: [VisibilityLevel!]
  finalised: Boolean

  """All values that are not equal to given value."""
  finalised_not: Boolean
  owner: UserWhereInput
  property: PropertyWhereInput
  applicants_every: RentalGroupApplicantWhereInput
  applicants_some: RentalGroupApplicantWhereInput
  applicants_none: RentalGroupApplicantWhereInput
}

input RentalApplicationWhereUniqueInput {
  id: ID
}

type RentalGroupApplicant implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  user: User!
  approved: Boolean!
  completed: Boolean
  application: RentalApplication
  preTenancyApplicationForm: File
  firstName: String
  lastName: String
  email: String
}

"""A connection to a list of items."""
type RentalGroupApplicantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RentalGroupApplicantEdge]!
  aggregate: AggregateRentalGroupApplicant!
}

input RentalGroupApplicantCreateInput {
  id: ID
  approved: Boolean!
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserCreateOneInput!
  application: RentalApplicationCreateOneWithoutApplicantsInput
  preTenancyApplicationForm: FileCreateOneInput
}

input RentalGroupApplicantCreateManyWithoutApplicationInput {
  create: [RentalGroupApplicantCreateWithoutApplicationInput!]
  connect: [RentalGroupApplicantWhereUniqueInput!]
}

input RentalGroupApplicantCreateWithoutApplicationInput {
  id: ID
  approved: Boolean!
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserCreateOneInput!
  preTenancyApplicationForm: FileCreateOneInput
}

"""An edge in a connection."""
type RentalGroupApplicantEdge {
  """The item at the end of the edge."""
  node: RentalGroupApplicant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RentalGroupApplicantOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  approved_ASC
  approved_DESC
  completed_ASC
  completed_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
}

type RentalGroupApplicantPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  approved: Boolean!
  completed: Boolean
  firstName: String
  lastName: String
  email: String
}

input RentalGroupApplicantScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalGroupApplicantScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalGroupApplicantScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalGroupApplicantScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
}

type RentalGroupApplicantSubscriptionPayload {
  mutation: MutationType!
  node: RentalGroupApplicant
  updatedFields: [String!]
  previousValues: RentalGroupApplicantPreviousValues
}

input RentalGroupApplicantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalGroupApplicantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalGroupApplicantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalGroupApplicantSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RentalGroupApplicantWhereInput
}

input RentalGroupApplicantUpdateInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserUpdateOneRequiredInput
  application: RentalApplicationUpdateOneWithoutApplicantsInput
  preTenancyApplicationForm: FileUpdateOneInput
}

input RentalGroupApplicantUpdateManyDataInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
}

input RentalGroupApplicantUpdateManyMutationInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
}

input RentalGroupApplicantUpdateManyWithoutApplicationInput {
  create: [RentalGroupApplicantCreateWithoutApplicationInput!]
  connect: [RentalGroupApplicantWhereUniqueInput!]
  set: [RentalGroupApplicantWhereUniqueInput!]
  disconnect: [RentalGroupApplicantWhereUniqueInput!]
  delete: [RentalGroupApplicantWhereUniqueInput!]
  update: [RentalGroupApplicantUpdateWithWhereUniqueWithoutApplicationInput!]
  updateMany: [RentalGroupApplicantUpdateManyWithWhereNestedInput!]
  deleteMany: [RentalGroupApplicantScalarWhereInput!]
  upsert: [RentalGroupApplicantUpsertWithWhereUniqueWithoutApplicationInput!]
}

input RentalGroupApplicantUpdateManyWithWhereNestedInput {
  where: RentalGroupApplicantScalarWhereInput!
  data: RentalGroupApplicantUpdateManyDataInput!
}

input RentalGroupApplicantUpdateWithoutApplicationDataInput {
  approved: Boolean
  completed: Boolean
  firstName: String
  lastName: String
  email: String
  user: UserUpdateOneRequiredInput
  preTenancyApplicationForm: FileUpdateOneInput
}

input RentalGroupApplicantUpdateWithWhereUniqueWithoutApplicationInput {
  where: RentalGroupApplicantWhereUniqueInput!
  data: RentalGroupApplicantUpdateWithoutApplicationDataInput!
}

input RentalGroupApplicantUpsertWithWhereUniqueWithoutApplicationInput {
  where: RentalGroupApplicantWhereUniqueInput!
  update: RentalGroupApplicantUpdateWithoutApplicationDataInput!
  create: RentalGroupApplicantCreateWithoutApplicationInput!
}

input RentalGroupApplicantWhereInput {
  """Logical AND on all given filters."""
  AND: [RentalGroupApplicantWhereInput!]

  """Logical OR on all given filters."""
  OR: [RentalGroupApplicantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RentalGroupApplicantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  approved: Boolean

  """All values that are not equal to given value."""
  approved_not: Boolean
  completed: Boolean

  """All values that are not equal to given value."""
  completed_not: Boolean
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  user: UserWhereInput
  application: RentalApplicationWhereInput
  preTenancyApplicationForm: FileWhereInput
}

input RentalGroupApplicantWhereUniqueInput {
  id: ID
}

type Subscription {
  property(where: PropertySubscriptionWhereInput): PropertySubscriptionPayload
  rentalGroupApplicant(where: RentalGroupApplicantSubscriptionWhereInput): RentalGroupApplicantSubscriptionPayload
  propertyAdvertisement(where: PropertyAdvertisementSubscriptionWhereInput): PropertyAdvertisementSubscriptionPayload
  rentalApplication(where: RentalApplicationSubscriptionWhereInput): RentalApplicationSubscriptionPayload
  lessee(where: LesseeSubscriptionWhereInput): LesseeSubscriptionPayload
  lessor(where: LessorSubscriptionWhereInput): LessorSubscriptionPayload
  propertyLease(where: PropertyLeaseSubscriptionWhereInput): PropertyLeaseSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  creditCard(where: CreditCardSubscriptionWhereInput): CreditCardSubscriptionPayload
}

type User implements Node {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  properties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property!]
  lesseeLeases(where: LesseeWhereInput, orderBy: LesseeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessee!]
  lessorLeases(where: LessorWhereInput, orderBy: LessorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Lessor!]
  createdProperties(where: PropertyWhereInput, orderBy: PropertyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Property!]
  photoIdentification: File
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  creditCards(where: CreditCardWhereInput, orderBy: CreditCardOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CreditCard!]
  primaryCreditCard: CreditCard
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserCreatepermissionsInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
}

input UserCreateManyWithoutPropertiesInput {
  create: [UserCreateWithoutPropertiesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreatedPropertiesInput {
  create: UserCreateWithoutCreatedPropertiesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutCreditCardsInput {
  create: UserCreateWithoutCreditCardsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLesseeLeasesInput {
  create: UserCreateWithoutLesseeLeasesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLessorLeasesInput {
  create: UserCreateWithoutLessorLeasesInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

input UserCreateWithoutCreatedPropertiesInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserCreatepermissionsInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  photoIdentification: FileCreateOneInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
}

input UserCreateWithoutCreditCardsInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserCreatepermissionsInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneInput
  primaryCreditCard: CreditCardCreateOneInput
}

input UserCreateWithoutLesseeLeasesInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserCreatepermissionsInput
  properties: PropertyCreateManyWithoutOwnersInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
}

input UserCreateWithoutLessorLeasesInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserCreatepermissionsInput
  properties: PropertyCreateManyWithoutOwnersInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
}

input UserCreateWithoutPropertiesInput {
  id: ID
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserCreatepermissionsInput
  lesseeLeases: LesseeCreateManyWithoutUserInput
  lessorLeases: LessorCreateManyWithoutUserInput
  createdProperties: PropertyCreateManyWithoutCreatorInput
  photoIdentification: FileCreateOneInput
  creditCards: CreditCardCreateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardCreateOneInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
  identificationNumber_ASC
  identificationNumber_DESC
  emergencyContactName_ASC
  emergencyContactName_DESC
  emergencyContactNumber_ASC
  emergencyContactNumber_DESC
  emergencyContactEmail_ASC
  emergencyContactEmail_DESC
  referee1Name_ASC
  referee1Name_DESC
  referee1Phone_ASC
  referee1Phone_DESC
  referee1Email_ASC
  referee1Email_DESC
  referee2Name_ASC
  referee2Name_DESC
  referee2Phone_ASC
  referee2Phone_DESC
  referee2Email_ASC
  referee2Email_DESC
}

type UserPreviousValues {
  id: ID!
  updatedAt: DateTime!
  createdAt: DateTime!
  firstName: String!
  lastName: String!
  phone: String!
  email: String!
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
}

input UserScalarWhereInput {
  """Logical AND on all given filters."""
  AND: [UserScalarWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserScalarWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserScalarWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  identificationNumber: String

  """All values that are not equal to given value."""
  identificationNumber_not: String

  """All values that are contained in given list."""
  identificationNumber_in: [String!]

  """All values that are not contained in given list."""
  identificationNumber_not_in: [String!]

  """All values less than the given value."""
  identificationNumber_lt: String

  """All values less than or equal the given value."""
  identificationNumber_lte: String

  """All values greater than the given value."""
  identificationNumber_gt: String

  """All values greater than or equal the given value."""
  identificationNumber_gte: String

  """All values containing the given string."""
  identificationNumber_contains: String

  """All values not containing the given string."""
  identificationNumber_not_contains: String

  """All values starting with the given string."""
  identificationNumber_starts_with: String

  """All values not starting with the given string."""
  identificationNumber_not_starts_with: String

  """All values ending with the given string."""
  identificationNumber_ends_with: String

  """All values not ending with the given string."""
  identificationNumber_not_ends_with: String
  emergencyContactName: String

  """All values that are not equal to given value."""
  emergencyContactName_not: String

  """All values that are contained in given list."""
  emergencyContactName_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactName_not_in: [String!]

  """All values less than the given value."""
  emergencyContactName_lt: String

  """All values less than or equal the given value."""
  emergencyContactName_lte: String

  """All values greater than the given value."""
  emergencyContactName_gt: String

  """All values greater than or equal the given value."""
  emergencyContactName_gte: String

  """All values containing the given string."""
  emergencyContactName_contains: String

  """All values not containing the given string."""
  emergencyContactName_not_contains: String

  """All values starting with the given string."""
  emergencyContactName_starts_with: String

  """All values not starting with the given string."""
  emergencyContactName_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactName_ends_with: String

  """All values not ending with the given string."""
  emergencyContactName_not_ends_with: String
  emergencyContactNumber: String

  """All values that are not equal to given value."""
  emergencyContactNumber_not: String

  """All values that are contained in given list."""
  emergencyContactNumber_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactNumber_not_in: [String!]

  """All values less than the given value."""
  emergencyContactNumber_lt: String

  """All values less than or equal the given value."""
  emergencyContactNumber_lte: String

  """All values greater than the given value."""
  emergencyContactNumber_gt: String

  """All values greater than or equal the given value."""
  emergencyContactNumber_gte: String

  """All values containing the given string."""
  emergencyContactNumber_contains: String

  """All values not containing the given string."""
  emergencyContactNumber_not_contains: String

  """All values starting with the given string."""
  emergencyContactNumber_starts_with: String

  """All values not starting with the given string."""
  emergencyContactNumber_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactNumber_ends_with: String

  """All values not ending with the given string."""
  emergencyContactNumber_not_ends_with: String
  emergencyContactEmail: String

  """All values that are not equal to given value."""
  emergencyContactEmail_not: String

  """All values that are contained in given list."""
  emergencyContactEmail_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactEmail_not_in: [String!]

  """All values less than the given value."""
  emergencyContactEmail_lt: String

  """All values less than or equal the given value."""
  emergencyContactEmail_lte: String

  """All values greater than the given value."""
  emergencyContactEmail_gt: String

  """All values greater than or equal the given value."""
  emergencyContactEmail_gte: String

  """All values containing the given string."""
  emergencyContactEmail_contains: String

  """All values not containing the given string."""
  emergencyContactEmail_not_contains: String

  """All values starting with the given string."""
  emergencyContactEmail_starts_with: String

  """All values not starting with the given string."""
  emergencyContactEmail_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactEmail_ends_with: String

  """All values not ending with the given string."""
  emergencyContactEmail_not_ends_with: String
  referee1Name: String

  """All values that are not equal to given value."""
  referee1Name_not: String

  """All values that are contained in given list."""
  referee1Name_in: [String!]

  """All values that are not contained in given list."""
  referee1Name_not_in: [String!]

  """All values less than the given value."""
  referee1Name_lt: String

  """All values less than or equal the given value."""
  referee1Name_lte: String

  """All values greater than the given value."""
  referee1Name_gt: String

  """All values greater than or equal the given value."""
  referee1Name_gte: String

  """All values containing the given string."""
  referee1Name_contains: String

  """All values not containing the given string."""
  referee1Name_not_contains: String

  """All values starting with the given string."""
  referee1Name_starts_with: String

  """All values not starting with the given string."""
  referee1Name_not_starts_with: String

  """All values ending with the given string."""
  referee1Name_ends_with: String

  """All values not ending with the given string."""
  referee1Name_not_ends_with: String
  referee1Phone: String

  """All values that are not equal to given value."""
  referee1Phone_not: String

  """All values that are contained in given list."""
  referee1Phone_in: [String!]

  """All values that are not contained in given list."""
  referee1Phone_not_in: [String!]

  """All values less than the given value."""
  referee1Phone_lt: String

  """All values less than or equal the given value."""
  referee1Phone_lte: String

  """All values greater than the given value."""
  referee1Phone_gt: String

  """All values greater than or equal the given value."""
  referee1Phone_gte: String

  """All values containing the given string."""
  referee1Phone_contains: String

  """All values not containing the given string."""
  referee1Phone_not_contains: String

  """All values starting with the given string."""
  referee1Phone_starts_with: String

  """All values not starting with the given string."""
  referee1Phone_not_starts_with: String

  """All values ending with the given string."""
  referee1Phone_ends_with: String

  """All values not ending with the given string."""
  referee1Phone_not_ends_with: String
  referee1Email: String

  """All values that are not equal to given value."""
  referee1Email_not: String

  """All values that are contained in given list."""
  referee1Email_in: [String!]

  """All values that are not contained in given list."""
  referee1Email_not_in: [String!]

  """All values less than the given value."""
  referee1Email_lt: String

  """All values less than or equal the given value."""
  referee1Email_lte: String

  """All values greater than the given value."""
  referee1Email_gt: String

  """All values greater than or equal the given value."""
  referee1Email_gte: String

  """All values containing the given string."""
  referee1Email_contains: String

  """All values not containing the given string."""
  referee1Email_not_contains: String

  """All values starting with the given string."""
  referee1Email_starts_with: String

  """All values not starting with the given string."""
  referee1Email_not_starts_with: String

  """All values ending with the given string."""
  referee1Email_ends_with: String

  """All values not ending with the given string."""
  referee1Email_not_ends_with: String
  referee2Name: String

  """All values that are not equal to given value."""
  referee2Name_not: String

  """All values that are contained in given list."""
  referee2Name_in: [String!]

  """All values that are not contained in given list."""
  referee2Name_not_in: [String!]

  """All values less than the given value."""
  referee2Name_lt: String

  """All values less than or equal the given value."""
  referee2Name_lte: String

  """All values greater than the given value."""
  referee2Name_gt: String

  """All values greater than or equal the given value."""
  referee2Name_gte: String

  """All values containing the given string."""
  referee2Name_contains: String

  """All values not containing the given string."""
  referee2Name_not_contains: String

  """All values starting with the given string."""
  referee2Name_starts_with: String

  """All values not starting with the given string."""
  referee2Name_not_starts_with: String

  """All values ending with the given string."""
  referee2Name_ends_with: String

  """All values not ending with the given string."""
  referee2Name_not_ends_with: String
  referee2Phone: String

  """All values that are not equal to given value."""
  referee2Phone_not: String

  """All values that are contained in given list."""
  referee2Phone_in: [String!]

  """All values that are not contained in given list."""
  referee2Phone_not_in: [String!]

  """All values less than the given value."""
  referee2Phone_lt: String

  """All values less than or equal the given value."""
  referee2Phone_lte: String

  """All values greater than the given value."""
  referee2Phone_gt: String

  """All values greater than or equal the given value."""
  referee2Phone_gte: String

  """All values containing the given string."""
  referee2Phone_contains: String

  """All values not containing the given string."""
  referee2Phone_not_contains: String

  """All values starting with the given string."""
  referee2Phone_starts_with: String

  """All values not starting with the given string."""
  referee2Phone_not_starts_with: String

  """All values ending with the given string."""
  referee2Phone_ends_with: String

  """All values not ending with the given string."""
  referee2Phone_not_ends_with: String
  referee2Email: String

  """All values that are not equal to given value."""
  referee2Email_not: String

  """All values that are contained in given list."""
  referee2Email_in: [String!]

  """All values that are not contained in given list."""
  referee2Email_not_in: [String!]

  """All values less than the given value."""
  referee2Email_lt: String

  """All values less than or equal the given value."""
  referee2Email_lte: String

  """All values greater than the given value."""
  referee2Email_gt: String

  """All values greater than or equal the given value."""
  referee2Email_gte: String

  """All values containing the given string."""
  referee2Email_contains: String

  """All values not containing the given string."""
  referee2Email_not_contains: String

  """All values starting with the given string."""
  referee2Email_starts_with: String

  """All values not starting with the given string."""
  referee2Email_not_starts_with: String

  """All values ending with the given string."""
  referee2Email_ends_with: String

  """All values not ending with the given string."""
  referee2Email_not_ends_with: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """The subscription event gets dispatched when it's listed in mutation_in"""
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
}

input UserUpdateManyDataInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyWithoutPropertiesInput {
  create: [UserCreateWithoutPropertiesInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPropertiesInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  deleteMany: [UserScalarWhereInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPropertiesInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneRequiredWithoutCreatedPropertiesInput {
  create: UserCreateWithoutCreatedPropertiesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCreatedPropertiesDataInput
  upsert: UserUpsertWithoutCreatedPropertiesInput
}

input UserUpdateOneRequiredWithoutCreditCardsInput {
  create: UserCreateWithoutCreditCardsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutCreditCardsDataInput
  upsert: UserUpsertWithoutCreditCardsInput
}

input UserUpdateOneWithoutLesseeLeasesInput {
  create: UserCreateWithoutLesseeLeasesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLesseeLeasesDataInput
  upsert: UserUpsertWithoutLesseeLeasesInput
}

input UserUpdateOneWithoutLessorLeasesInput {
  create: UserCreateWithoutLessorLeasesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLessorLeasesDataInput
  upsert: UserUpsertWithoutLessorLeasesInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpdateWithoutCreatedPropertiesDataInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  photoIdentification: FileUpdateOneInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
}

input UserUpdateWithoutCreditCardsDataInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneInput
  primaryCreditCard: CreditCardUpdateOneInput
}

input UserUpdateWithoutLesseeLeasesDataInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
}

input UserUpdateWithoutLessorLeasesDataInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
  properties: PropertyUpdateManyWithoutOwnersInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
}

input UserUpdateWithoutPropertiesDataInput {
  firstName: String
  lastName: String
  phone: String
  email: String
  password: String
  resetToken: String
  resetTokenExpiry: Float
  identificationNumber: String
  emergencyContactName: String
  emergencyContactNumber: String
  emergencyContactEmail: String
  referee1Name: String
  referee1Phone: String
  referee1Email: String
  referee2Name: String
  referee2Phone: String
  referee2Email: String
  permissions: UserUpdatepermissionsInput
  lesseeLeases: LesseeUpdateManyWithoutUserInput
  lessorLeases: LessorUpdateManyWithoutUserInput
  createdProperties: PropertyUpdateManyWithoutCreatorInput
  photoIdentification: FileUpdateOneInput
  creditCards: CreditCardUpdateManyWithoutCardOwnerInput
  primaryCreditCard: CreditCardUpdateOneInput
}

input UserUpdateWithWhereUniqueWithoutPropertiesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPropertiesDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutCreatedPropertiesInput {
  update: UserUpdateWithoutCreatedPropertiesDataInput!
  create: UserCreateWithoutCreatedPropertiesInput!
}

input UserUpsertWithoutCreditCardsInput {
  update: UserUpdateWithoutCreditCardsDataInput!
  create: UserCreateWithoutCreditCardsInput!
}

input UserUpsertWithoutLesseeLeasesInput {
  update: UserUpdateWithoutLesseeLeasesDataInput!
  create: UserCreateWithoutLesseeLeasesInput!
}

input UserUpsertWithoutLessorLeasesInput {
  update: UserUpdateWithoutLessorLeasesDataInput!
  create: UserCreateWithoutLessorLeasesInput!
}

input UserUpsertWithWhereUniqueWithoutPropertiesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPropertiesDataInput!
  create: UserCreateWithoutPropertiesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  resetToken: String

  """All values that are not equal to given value."""
  resetToken_not: String

  """All values that are contained in given list."""
  resetToken_in: [String!]

  """All values that are not contained in given list."""
  resetToken_not_in: [String!]

  """All values less than the given value."""
  resetToken_lt: String

  """All values less than or equal the given value."""
  resetToken_lte: String

  """All values greater than the given value."""
  resetToken_gt: String

  """All values greater than or equal the given value."""
  resetToken_gte: String

  """All values containing the given string."""
  resetToken_contains: String

  """All values not containing the given string."""
  resetToken_not_contains: String

  """All values starting with the given string."""
  resetToken_starts_with: String

  """All values not starting with the given string."""
  resetToken_not_starts_with: String

  """All values ending with the given string."""
  resetToken_ends_with: String

  """All values not ending with the given string."""
  resetToken_not_ends_with: String
  resetTokenExpiry: Float

  """All values that are not equal to given value."""
  resetTokenExpiry_not: Float

  """All values that are contained in given list."""
  resetTokenExpiry_in: [Float!]

  """All values that are not contained in given list."""
  resetTokenExpiry_not_in: [Float!]

  """All values less than the given value."""
  resetTokenExpiry_lt: Float

  """All values less than or equal the given value."""
  resetTokenExpiry_lte: Float

  """All values greater than the given value."""
  resetTokenExpiry_gt: Float

  """All values greater than or equal the given value."""
  resetTokenExpiry_gte: Float
  identificationNumber: String

  """All values that are not equal to given value."""
  identificationNumber_not: String

  """All values that are contained in given list."""
  identificationNumber_in: [String!]

  """All values that are not contained in given list."""
  identificationNumber_not_in: [String!]

  """All values less than the given value."""
  identificationNumber_lt: String

  """All values less than or equal the given value."""
  identificationNumber_lte: String

  """All values greater than the given value."""
  identificationNumber_gt: String

  """All values greater than or equal the given value."""
  identificationNumber_gte: String

  """All values containing the given string."""
  identificationNumber_contains: String

  """All values not containing the given string."""
  identificationNumber_not_contains: String

  """All values starting with the given string."""
  identificationNumber_starts_with: String

  """All values not starting with the given string."""
  identificationNumber_not_starts_with: String

  """All values ending with the given string."""
  identificationNumber_ends_with: String

  """All values not ending with the given string."""
  identificationNumber_not_ends_with: String
  emergencyContactName: String

  """All values that are not equal to given value."""
  emergencyContactName_not: String

  """All values that are contained in given list."""
  emergencyContactName_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactName_not_in: [String!]

  """All values less than the given value."""
  emergencyContactName_lt: String

  """All values less than or equal the given value."""
  emergencyContactName_lte: String

  """All values greater than the given value."""
  emergencyContactName_gt: String

  """All values greater than or equal the given value."""
  emergencyContactName_gte: String

  """All values containing the given string."""
  emergencyContactName_contains: String

  """All values not containing the given string."""
  emergencyContactName_not_contains: String

  """All values starting with the given string."""
  emergencyContactName_starts_with: String

  """All values not starting with the given string."""
  emergencyContactName_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactName_ends_with: String

  """All values not ending with the given string."""
  emergencyContactName_not_ends_with: String
  emergencyContactNumber: String

  """All values that are not equal to given value."""
  emergencyContactNumber_not: String

  """All values that are contained in given list."""
  emergencyContactNumber_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactNumber_not_in: [String!]

  """All values less than the given value."""
  emergencyContactNumber_lt: String

  """All values less than or equal the given value."""
  emergencyContactNumber_lte: String

  """All values greater than the given value."""
  emergencyContactNumber_gt: String

  """All values greater than or equal the given value."""
  emergencyContactNumber_gte: String

  """All values containing the given string."""
  emergencyContactNumber_contains: String

  """All values not containing the given string."""
  emergencyContactNumber_not_contains: String

  """All values starting with the given string."""
  emergencyContactNumber_starts_with: String

  """All values not starting with the given string."""
  emergencyContactNumber_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactNumber_ends_with: String

  """All values not ending with the given string."""
  emergencyContactNumber_not_ends_with: String
  emergencyContactEmail: String

  """All values that are not equal to given value."""
  emergencyContactEmail_not: String

  """All values that are contained in given list."""
  emergencyContactEmail_in: [String!]

  """All values that are not contained in given list."""
  emergencyContactEmail_not_in: [String!]

  """All values less than the given value."""
  emergencyContactEmail_lt: String

  """All values less than or equal the given value."""
  emergencyContactEmail_lte: String

  """All values greater than the given value."""
  emergencyContactEmail_gt: String

  """All values greater than or equal the given value."""
  emergencyContactEmail_gte: String

  """All values containing the given string."""
  emergencyContactEmail_contains: String

  """All values not containing the given string."""
  emergencyContactEmail_not_contains: String

  """All values starting with the given string."""
  emergencyContactEmail_starts_with: String

  """All values not starting with the given string."""
  emergencyContactEmail_not_starts_with: String

  """All values ending with the given string."""
  emergencyContactEmail_ends_with: String

  """All values not ending with the given string."""
  emergencyContactEmail_not_ends_with: String
  referee1Name: String

  """All values that are not equal to given value."""
  referee1Name_not: String

  """All values that are contained in given list."""
  referee1Name_in: [String!]

  """All values that are not contained in given list."""
  referee1Name_not_in: [String!]

  """All values less than the given value."""
  referee1Name_lt: String

  """All values less than or equal the given value."""
  referee1Name_lte: String

  """All values greater than the given value."""
  referee1Name_gt: String

  """All values greater than or equal the given value."""
  referee1Name_gte: String

  """All values containing the given string."""
  referee1Name_contains: String

  """All values not containing the given string."""
  referee1Name_not_contains: String

  """All values starting with the given string."""
  referee1Name_starts_with: String

  """All values not starting with the given string."""
  referee1Name_not_starts_with: String

  """All values ending with the given string."""
  referee1Name_ends_with: String

  """All values not ending with the given string."""
  referee1Name_not_ends_with: String
  referee1Phone: String

  """All values that are not equal to given value."""
  referee1Phone_not: String

  """All values that are contained in given list."""
  referee1Phone_in: [String!]

  """All values that are not contained in given list."""
  referee1Phone_not_in: [String!]

  """All values less than the given value."""
  referee1Phone_lt: String

  """All values less than or equal the given value."""
  referee1Phone_lte: String

  """All values greater than the given value."""
  referee1Phone_gt: String

  """All values greater than or equal the given value."""
  referee1Phone_gte: String

  """All values containing the given string."""
  referee1Phone_contains: String

  """All values not containing the given string."""
  referee1Phone_not_contains: String

  """All values starting with the given string."""
  referee1Phone_starts_with: String

  """All values not starting with the given string."""
  referee1Phone_not_starts_with: String

  """All values ending with the given string."""
  referee1Phone_ends_with: String

  """All values not ending with the given string."""
  referee1Phone_not_ends_with: String
  referee1Email: String

  """All values that are not equal to given value."""
  referee1Email_not: String

  """All values that are contained in given list."""
  referee1Email_in: [String!]

  """All values that are not contained in given list."""
  referee1Email_not_in: [String!]

  """All values less than the given value."""
  referee1Email_lt: String

  """All values less than or equal the given value."""
  referee1Email_lte: String

  """All values greater than the given value."""
  referee1Email_gt: String

  """All values greater than or equal the given value."""
  referee1Email_gte: String

  """All values containing the given string."""
  referee1Email_contains: String

  """All values not containing the given string."""
  referee1Email_not_contains: String

  """All values starting with the given string."""
  referee1Email_starts_with: String

  """All values not starting with the given string."""
  referee1Email_not_starts_with: String

  """All values ending with the given string."""
  referee1Email_ends_with: String

  """All values not ending with the given string."""
  referee1Email_not_ends_with: String
  referee2Name: String

  """All values that are not equal to given value."""
  referee2Name_not: String

  """All values that are contained in given list."""
  referee2Name_in: [String!]

  """All values that are not contained in given list."""
  referee2Name_not_in: [String!]

  """All values less than the given value."""
  referee2Name_lt: String

  """All values less than or equal the given value."""
  referee2Name_lte: String

  """All values greater than the given value."""
  referee2Name_gt: String

  """All values greater than or equal the given value."""
  referee2Name_gte: String

  """All values containing the given string."""
  referee2Name_contains: String

  """All values not containing the given string."""
  referee2Name_not_contains: String

  """All values starting with the given string."""
  referee2Name_starts_with: String

  """All values not starting with the given string."""
  referee2Name_not_starts_with: String

  """All values ending with the given string."""
  referee2Name_ends_with: String

  """All values not ending with the given string."""
  referee2Name_not_ends_with: String
  referee2Phone: String

  """All values that are not equal to given value."""
  referee2Phone_not: String

  """All values that are contained in given list."""
  referee2Phone_in: [String!]

  """All values that are not contained in given list."""
  referee2Phone_not_in: [String!]

  """All values less than the given value."""
  referee2Phone_lt: String

  """All values less than or equal the given value."""
  referee2Phone_lte: String

  """All values greater than the given value."""
  referee2Phone_gt: String

  """All values greater than or equal the given value."""
  referee2Phone_gte: String

  """All values containing the given string."""
  referee2Phone_contains: String

  """All values not containing the given string."""
  referee2Phone_not_contains: String

  """All values starting with the given string."""
  referee2Phone_starts_with: String

  """All values not starting with the given string."""
  referee2Phone_not_starts_with: String

  """All values ending with the given string."""
  referee2Phone_ends_with: String

  """All values not ending with the given string."""
  referee2Phone_not_ends_with: String
  referee2Email: String

  """All values that are not equal to given value."""
  referee2Email_not: String

  """All values that are contained in given list."""
  referee2Email_in: [String!]

  """All values that are not contained in given list."""
  referee2Email_not_in: [String!]

  """All values less than the given value."""
  referee2Email_lt: String

  """All values less than or equal the given value."""
  referee2Email_lte: String

  """All values greater than the given value."""
  referee2Email_gt: String

  """All values greater than or equal the given value."""
  referee2Email_gte: String

  """All values containing the given string."""
  referee2Email_contains: String

  """All values not containing the given string."""
  referee2Email_not_contains: String

  """All values starting with the given string."""
  referee2Email_starts_with: String

  """All values not starting with the given string."""
  referee2Email_not_starts_with: String

  """All values ending with the given string."""
  referee2Email_ends_with: String

  """All values not ending with the given string."""
  referee2Email_not_ends_with: String
  properties_every: PropertyWhereInput
  properties_some: PropertyWhereInput
  properties_none: PropertyWhereInput
  lesseeLeases_every: LesseeWhereInput
  lesseeLeases_some: LesseeWhereInput
  lesseeLeases_none: LesseeWhereInput
  lessorLeases_every: LessorWhereInput
  lessorLeases_some: LessorWhereInput
  lessorLeases_none: LessorWhereInput
  createdProperties_every: PropertyWhereInput
  createdProperties_some: PropertyWhereInput
  createdProperties_none: PropertyWhereInput
  photoIdentification: FileWhereInput
  creditCards_every: CreditCardWhereInput
  creditCards_some: CreditCardWhereInput
  creditCards_none: CreditCardWhereInput
  primaryCreditCard: CreditCardWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

enum VisibilityLevel {
  PRIVATE
  FRIENDS_ONLY
  PUBLIC
}
